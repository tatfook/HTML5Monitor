<?npl
--[[
Title: H5MonitorClient.page
Author: leio
Date: 2016/7/21
Revised: MarxWolf 2016/07/23
Desc: 
]]

wp_enqueue_script("ace",						"/wp-includes/js/ace/ace.js"); 
wp_enqueue_script("angular",					"/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("ngStorage",					"/wp-includes/js/angular/ngStorage.js");
wp_enqueue_script("ngSanitize",					"/wp-includes/js/angular/angular-sanitize.min.js");

wp_enqueue_script("ngAnimate",                  "/wp-includes/js/angular-animate.min.js");
wp_enqueue_script("ui-bootstrap",               "/wp-includes/js/ui-bootstrap-2.0.0.min.js");

wp_enqueue_script("ngDialog",                   "/wp-includes/js/ngDialog.min.js");
wp_enqueue_style("ngDialogcss",                 "/wp-admin/css/ngDialog.min.css");
wp_enqueue_style("ngDialog-theme-default",      "/wp-admin/css/ngDialog-theme-default.min.css");
wp_enqueue_style("ngDialog-theme-plain",	    "/wp-admin/css/ngDialog-theme-plain.min.css");

wp_enqueue_script("H5Monitor_App",			    "/wp-content/pages/h5monitor/app.js");
wp_enqueue_script("h5MonitorController",		"/wp-content/pages/h5monitor/controllers/h5MonitorController.js");

NPL.load("(gl)Mod/HTML5Monitor/H5MonitorClient.lua");
NPL.load("(gl)Mod/HTML5Monitor/H5MonitorServer.lua");

local H5MonitorClient = commonlib.gettable("Mod.HTML5Monitor.H5MonitorClient");
local H5MonitorServer = commonlib.gettable("Mod.HTML5Monitor.H5MonitorServer");

local string = string;
local tostring = tostring;
local tonumber = tonumber;

-- can use client side to connect with the specific server
local function GetServer()
	local server = request:get("server");
	local ip = string.match(server,"^(.*):.*$");	
	local port = string.match(server,"^.*:(.*)$");	
	--LOG.std(nil, "info","serverInfo" ,"ip:%s, port: %s", ip, port);
	return ip, port;
end

-- can use server side to connect with the specific client
local function GetClient()
	local client = request:get("client")
	local ip = string.match(client, "^(.*):.*$");
	local port = string.match(client,"^.*:(.*)$");	
	--LOG.std(nil, "info", "clientInfo","ip:%s, port: %s", ip, port);
	return ip, port;
end



if(is_ajax()) then

-- client side, 
	add_action('wp_ajax_monitor_client_start', function()
		local ip, port = GetServer();
		H5MonitorClient.Start(tostring(ip),tostring(port));
		H5MonitorClient.Ping();
		wp_send_json({status = 0}, true);
    end)

-- server side, 
	add_action('wp_ajax_monitor_server_start', function()
		local ip, port = GetClient();
		H5MonitorServer.Start(tostring(ip),tostring(port));
		H5MonitorServer.Ping();
	end)

-- server side,
	add_action('wp_ajax_monitor_show_large_screen_shot', function()
		local counter = tonumber(request:get("counter"));
		local index = tonumber(request:get("index"));
		if(counter == 0) then
			local msgIPQueue = H5MonitorServer.SortTempIPQueue();
			local msgIP = msgIPQueue[index+1];
			H5MonitorServer.SetScreenShotInfo(true, H5MonitorServer.nidQueue[msgIP]);
		end
		local msgQueue = H5MonitorServer.SortMsgQueue();
		local largeScreenShotData = msgQueue[index + 1];
		local largeScreenShot = {largeScreenShotData = largeScreenShotData}
		--wp_send_json(largeScreenShot,true);
		H5MonitorServer.ClearMsgQueue();
		wp_send_json(largeScreenShot, true);
	end)

-- server side,	
	add_action('wp_ajax_monitor_show_screen_shot', function()
		local counter = tonumber(request:get("counter"));
		local index = tonumber(request:get("index"));
		if(counter == 0 and index) then
			local msgIPQueue = H5MonitorServer.SortTempIPQueue();
			local msgIP = msgIPQueue[index+1];
			H5MonitorServer.SetScreenShotInfo(nil, H5MonitorServer.nidQueue[msgIP]);
		end
		local msgQueue = H5MonitorServer.SortMsgQueue();
		H5MonitorServer.ClearMsgQueue();
		wp_send_json(msgQueue, true);
    end)

-- server side,
	add_action('wp_ajax_monitor_show_screen_shot_info', function()
		local screenShotInfo = H5MonitorServer.SortTempIPQueue();
		wp_send_json(screenShotInfo, true);
	end)

	return;
end

?>

<div ng-app="H5Monitor_App" >
	<monitor></monitor>
</div>
