<?xml version="1.0" encoding="utf-8" ?>

<doc>
	<tables>
		<table name="BlockEngine" src="script/apps/Aries/Creator/Game/block_engine.lua">
			<function line="80" name="SetGameLogic">
				<summary>function BlockEngine:SetGameLogic(game_logic)
set the current game logic to use. 
				</summary>
				<parameter name="game_logic"/>
			</function>
			<function line="86" name="Connect">
				<summary>function BlockEngine:Connect()
call this function to connect the block engine with the current low level game engine's block terrain world. 
call this function when one enters the block based game.
				</summary>
			</function>
			<function line="143" name="OnBeforeLoadBlockRegion">
				<summary>function BlockEngine.OnBeforeLoadBlockRegion()

   @return 0 or nil to proceed loading the region in async mode. 
return 1 to prevent the region from loaded
				</summary>
				<returns>return or nil to proceed loading the region in async mode. 
return 1 to prevent the region from loaded
				</returns>
			</function>
			<function line="154" name="OnSaveBlockRegion">
				<summary>function BlockEngine.OnSaveBlockRegion()

				</summary>
			</function>
			<function line="160" name="OnLoadBlockRegion">
				<summary>function BlockEngine.OnLoadBlockRegion()

				</summary>
			</function>
			<function line="200" name="OnUnLoadBlockRegion">
				<summary>function BlockEngine.OnUnLoadBlockRegion()

				</summary>
			</function>
			<function line="211" name="OnGeneratorScript">
				<summary>function BlockEngine.OnGeneratorScript()

				</summary>
			</function>
			<function line="227" name="Disconnect">
				<summary>function BlockEngine:Disconnect()
disconnect the block engine, so that no computation occurs afterwards. 
call this function when one exit the block based game
				</summary>
			</function>
			<function line="235" name="SetOffsetY">
				<summary>function BlockEngine:SetOffsetY(y)

				</summary>
				<parameter name="y"/>
			</function>
			<function line="245" name="GetBlockTypeInCache">
				<summary>function BlockEngine:GetBlockTypeInCache(x, y, z)
used to cache some game data per block
   @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="256" name="GetBlockTypeInCacheIdx">
				<summary>function BlockEngine:GetBlockTypeInCacheIdx(bx, by, bz)
used to cache some game data per block
   @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="267" name="SetBlockAttributeInCache">
				<summary>function BlockEngine:SetBlockAttributeInCache(x,y,z, name, value)
similar to GetBlockType except that index is block coordinates is uint16
   @param bx,by,bz: block index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="277" name="GetBlockAttributeInCache">
				<summary>function BlockEngine:GetBlockAttributeInCache(x,y,z, name)
one can set the block attribute at the given position
supported attributes are like "type", "texture", ...
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
			</function>
			<function line="285" name="GetBlockInCacheIdx">
				<summary>function BlockEngine:GetBlockInCacheIdx(bx, by, bz, bCreateIfNotExist)
create/get block at given world position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="300" name="GetBlockInCache">
				<summary>function BlockEngine:GetBlockInCache(x,y,z, bCreateIfNotExist)
create/get block at given world position.
   @param x, y, z: real world position.
				</summary>
				<parameter name="x">, y, z: real world position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="315" name="IsBlockFreeSpace">
				<summary>function BlockEngine:IsBlockFreeSpace(bx, by, bz)
whether this block is freespace. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="324" name="GetRegionPos">
				<summary>function BlockEngine:GetRegionPos(x,z)
get the region pos that contains x, z
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="335" name="ConvertToRealPosition_float">
				<summary>function BlockEngine:ConvertToRealPosition_float(x,y,z)
convert from block index to real world coordinate. use floating point operations.
   @param note: the returned position is always the center of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="354" name="ConvertToRealPosition">
				<summary>function BlockEngine:ConvertToRealPosition(x,y,z)
only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="361" name="real_bottom">
				<summary>function BlockEngine:real_bottom(x,y,z)
this is 64bits version. convert from block index position to real world bottom center position.
   @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="366" name="real_top">
				<summary>function BlockEngine:real_top(x,y,z)
top center position of given block in real coordinate
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="372" name="real_min">
				<summary>function BlockEngine:real_min(x,y,z)
this is 64bits version. convert from block index position to real world min position.
   @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="381" name="realY">
				<summary>function BlockEngine:realY(y)
return the real y. returned value is at the bottom of the y block.
				</summary>
				<parameter name="y"/>
			</function>
			<function line="386" name="ConvertToBlockIndex_float">
				<summary>function BlockEngine:ConvertToBlockIndex_float(x,y,z)
convert real world coordinate x,y,z to block index. use floating point operations.  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="406" name="ConvertToBlockIndex">
				<summary>function BlockEngine:ConvertToBlockIndex(x,y,z)
only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="414" name="block_float">
				<summary>function BlockEngine:block_float(x,y,z)
convert to block floating point index.
   @param x,y,z: real world cooridnate. y z can be nil.
   @return block index but NOT math.floored. 
				</summary>
				<parameter name="x">,y,z: real world cooridnate. y z can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return index but NOT math.floored. 
				</returns>
			</function>
			<function line="423" name="GetBlockCenter">
				<summary>function BlockEngine:GetBlockCenter(x,y,z)
get the block center, based on a real world position.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="429" name="GetSparseIndex">
				<summary>function BlockEngine:GetSparseIndex(x, y, z)
get sparse index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="435" name="FromSparseIndex">
				<summary>function BlockEngine:FromSparseIndex(index)
convert from sparse index to block x,y,z
   @return x,y,z
				</summary>
				<parameter name="index"/>
				<returns>return ,y,z
				</returns>
			</function>
			<function line="449" name="GetOppositeSide">
				<summary>function BlockEngine:GetOppositeSide(side)

				</summary>
				<parameter name="side"/>
			</function>
			<function line="455" name="GetBlockIndexBySide">
				<summary>function BlockEngine:GetBlockIndexBySide(x,y,z,side)

   @param x, y, z: block index
   @return: x,y,z nearby block index. 
				</summary>
				<parameter name="x">, y, z: block index
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side"/>
				<returns>return x,y,z nearby block index. 
				</returns>
			</function>
			<function line="473" name="UpdateEyePosition">
				<summary>function BlockEngine:UpdateEyePosition(x, y, z)
update eye position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="498" name="GetNextDynamicTypeInColumn">
				<summary>function BlockEngine:GetNextDynamicTypeInColumn(x,y,z, max_dist)
get the next dynamic object type in the block column x,z. It will start from the high y-1 and search downward, until one is found.
   @param max_dist: max dist to search downward. default to y.
   @return block_id, block_y: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="max_dist">max dist to search downward. default to y.
				</parameter>
				<returns>return , block_y: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="511" name="GetNextBlockOfTypeInColumn">
				<summary>function BlockEngine:GetNextBlockOfTypeInColumn(x,y,z, attr, max_dist)

   @param attr: bitwise field. default to block.attributes.onload (which is usually entity block)
   @return block_id, block_y: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="attr">bitwise field. default to block.attributes.onload (which is usually entity block)
				</parameter>
				<parameter name="max_dist"/>
				<returns>return , block_y: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="529" name="GetFirstBlock">
				<summary>function BlockEngine:GetFirstBlock(x, y, z, nBlockId, nSide, max_dist)
get the y pos of the first block of nBlockID, start searching from x, y, z in the side direction
   @param x,y,z: y default to 0
   @param nBlockId: the block id to search for
   @param nSide: default to 5, which is downward, 4 if upward.
   @param max_dist: default to 255
   @return -1 if not found
				</summary>
				<parameter name="x">,y,z: y default to 0
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="nBlockId">the block id to search for
				</parameter>
				<parameter name="nSide">default to 5, which is downward, 4 if upward.
				</parameter>
				<parameter name="max_dist">default to 255
				</parameter>
				<returns>return -1 if not found
				</returns>
			</function>
			<function line="534" name="FrameMove_Coroutine">
				<summary>function BlockEngine:FrameMove_Coroutine()
this is a coroutine and may yield every block_sim_per_frame framemove. 
				</summary>
			</function>
			<function line="559" name="OnFrameMove">
				<summary>function BlockEngine:OnFrameMove()
main loop of the block engine.
				</summary>
			</function>
			<function line="584" name="FrameMoveRegion">
				<summary>function BlockEngine:FrameMoveRegion(x, y, z, radius, radius_from)
frame move all dynamic block in given square region.
   @param x, y, z: the block index. y can be nil.
   @param radius:  the square region radius
   @param radius_from: default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. 
this allow us the framemove block with different interval according to distance to eye position. 
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="radius">the square region radius
				</parameter>
				<parameter name="radius_from">default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. 
this allow us the framemove block with different interval according to distance to eye position. 
				</parameter>
			</function>
			<function line="622" name="FrameMoveColumn">
				<summary>function BlockEngine:FrameMoveColumn(x,y,z)
framemove all blocks below y, in the x, z columns from top to bottom.
   @param x, y, z: the block index. y can be nil.
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="640" name="SetBlockToAir">
				<summary>function BlockEngine:SetBlockToAir(x,y,z, flag)
same as: BlockEngine:SetBlock(x,y,z,0, nil, flag)
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="flag"/>
			</function>
			<function line="644" name="MarkBlockForUpdate">
				<summary>function BlockEngine:MarkBlockForUpdate(x, y, z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="650" name="IsRemote">
				<summary>function BlockEngine:IsRemote()

				</summary>
			</function>
			<function line="662" name="SetBlock">
				<summary>function BlockEngine:SetBlock(x,y,z,block_id, block_data, flag, entity_data)
Sets the block ID and metadata at a given location.
   @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. 
0 will just set block without calling the block callback func.
   @param entity_data: table of xml node as entity_data
   @return true if a new block is created. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. 
0 will just set block without calling the block callback func.
				</parameter>
				<parameter name="entity_data">table of xml node as entity_data
				</parameter>
				<returns>return if a new block is created. 
				</returns>
			</function>
			<function line="716" name="SetBlockData">
				<summary>function BlockEngine:SetBlockData(x,y,z,block_data, flag)
Sets the block metadata at a given location.
   @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</parameter>
			</function>
			<function line="735" name="SetBlockDataForced">
				<summary>function BlockEngine:SetBlockDataForced(x,y,z,block_data)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="740" name="GetBlockData">
				<summary>function BlockEngine:GetBlockData(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="744" name="GetBlockId">
				<summary>function BlockEngine:GetBlockId(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="748" name="GetBlockEntityData">
				<summary>function BlockEngine:GetBlockEntityData(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="758" name="GetBlockEntity">
				<summary>function BlockEngine:GetBlockEntity(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="765" name="GetBlockEntityList">
				<summary>function BlockEngine:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)

				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="785" name="GetBlockFull">
				<summary>function BlockEngine:GetBlockFull(x,y,z)
get full info about a given block
   @return block_id, block_data, entity_data
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return , block_data, entity_data
				</returns>
			</function>
			<function line="795" name="GetAllBlocksInfoInAABB">
				<summary>function BlockEngine:GetAllBlocksInfoInAABB(aabb)
return array of {x,y,z, id, data, entity_data}
				</summary>
				<parameter name="aabb"/>
			</function>
			<function line="814" name="GetBlock">
				<summary>function BlockEngine:GetBlock(x,y,z)
return the block template object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="822" name="GetBlockTemplateByIdx">
				<summary>function BlockEngine:GetBlockTemplateByIdx(bX, bY, bZ)
return the block template table. 
				</summary>
				<parameter name="bX"/>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="831" name="SetBlockTemplateByIdx">
				<summary>function BlockEngine.SetBlockTemplateByIdx(x,y,z,block_id, block_data)
Obsoleted: use BlockEngine:SetBlock
   @param x, y, z: the block index. 
				</summary>
				<parameter name="x">, y, z: the block index. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
			</function>
			<function line="836" name="SetBlockUserDataByIdx">
				<summary>function BlockEngine.SetBlockUserDataByIdx(x,y,z,block_data)
Obsoleted: use BlockEngine:SetBlockData
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="842" name="IsInLiquid">
				<summary>function BlockEngine:IsInLiquid(bX, bY, bZ)
is point under water
   @param bX, bY, bZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="bX">, bY, bZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="857" name="IsInAir">
				<summary>function BlockEngine:IsInAir(x,y,z)
if all 6 neighbour are empty. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="869" name="IsInLiquidReal">
				<summary>function BlockEngine:IsInLiquidReal(realX, realY, realZ)
TODO: is point under water
   @param realX, realY, realZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="realX">, realY, realZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="realY"/>
				<parameter name="realZ"/>
			</function>
			<function line="908" name="NotifyNeighborBlocksChange">
				<summary>function BlockEngine:NotifyNeighborBlocksChange(x, y, z, from_block_id)
Notifies all six neighboring blocks that from_block_id changed  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
			</function>
			<function line="919" name="NotifyNeighborBlocksChangeNoSide">
				<summary>function BlockEngine:NotifyNeighborBlocksChangeNoSide(x, y, z, from_block_id, side)
Notifies all six neighboring blocks that from_block_id changed, except the one on the given side.
   @param side: the block on this side is not notified. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
				<parameter name="side">the block on this side is not notified. 
				</parameter>
			</function>
			<function line="948" name="OnNeighborBlockChange">
				<summary>function BlockEngine:OnNeighborBlockChange(x, y, z, from_block_id)
Notifies a block that one of its neighbor change to the specified type
   @param from_block_id: the block id that has changed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id">the block id that has changed
				</parameter>
			</function>
			<function line="959" name="GetBlockMaterial">
				<summary>function BlockEngine:GetBlockMaterial(x,y,z)
get block material
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="973" name="isBlockProvidingStrongPowerTo">
				<summary>function BlockEngine:isBlockProvidingStrongPowerTo(x, y, z, direction)
Is this block powering in the specified direction 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction"/>
			</function>
			<function line="988" name="getBlockStrongPowerInput">
				<summary>function BlockEngine:getBlockStrongPowerInput(x,y,z)
Returns the highest strong power input from this block's six neighbors. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1025" name="hasWeakPowerOutputTo">
				<summary>function BlockEngine:hasWeakPowerOutputTo(x,y,z,dir)
Returns the weak power being outputted by the given block to the given direction.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1030" name="isBlockNormalCube">
				<summary>function BlockEngine:isBlockNormalCube(x,y,z)
Indicate if a material is a normal solid opaque cube.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1039" name="getWeakPowerOutputTo">
				<summary>function BlockEngine:getWeakPowerOutputTo(x,y,z,dir)
Gets the indirect(weak) power level of this block to a given side. 
Normal cube block will output the highest strong power input as weak output to all of its six faces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1054" name="isBlockIndirectlyGettingPowered">
				<summary>function BlockEngine:isBlockIndirectlyGettingPowered(x, y, z)
Used to see if one of the blocks next to you or your block is getting power from a neighboring block. Used by
items like TNT or Doors so they don't have redstone going straight into them.  
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1065" name="getStrongestIndirectPower">
				<summary>function BlockEngine:getStrongestIndirectPower(x, y, z)
get strongest indirect power from the neighboring 6 blocks. wires will transmit indirect power to its neighbor
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1085" name="DoesBlockHaveSolidTopSurface">
				<summary>function BlockEngine:DoesBlockHaveSolidTopSurface(x,y,z)
Performs check to see if the block is a normal, solid block, or if the metadata of the block indicates that its
facing puts its solid side upwards. (inverted stairs, for example)
Returns true if the block at the given coordinate has a solid (buildable) top surface.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1095" name="Dump">
				<summary>function BlockEngine:Dump()
dump the current state of the block engine
				</summary>
			</function>
		</table>
		<table name="GameLogic" src="script/apps/Aries/Creator/Game/game_logic.lua">
			<function line="125" name="ctor">
				<summary>function GameLogic:ctor()
one time singleton init
				</summary>
			</function>
			<function line="141" name="InitAPIPath">
				<summary>function GameLogic:InitAPIPath()

				</summary>
			</function>
			<function line="164" name="InitMod">
				<summary>function GameLogic.InitMod()
static method called at the very beginning when paracraft start
				</summary>
			</function>
			<function line="173" name="InitCommon">
				<summary>function GameLogic.InitCommon()
called by both Init() and StaticInit()
				</summary>
			</function>
			<function line="204" name="Init">
				<summary>function GameLogic.Init(worldObj)
call this when user first enters a game world.
				</summary>
				<parameter name="worldObj"/>
			</function>
			<function line="276" name="OnBeforeBlockWorldLoaded">
				<summary>function GameLogic.OnBeforeBlockWorldLoaded()

				</summary>
			</function>
			<function line="287" name="GetWorld">
				<summary>function GameLogic.GetWorld()
get the current world. 
				</summary>
			</function>
			<function line="291" name="GetPlayerController">
				<summary>function GameLogic.GetPlayerController()

				</summary>
			</function>
			<function line="295" name="GetPlayer">
				<summary>function GameLogic.GetPlayer()

				</summary>
			</function>
			<function line="300" name="OnBeforeLoadBlockRegion">
				<summary>function GameLogic.OnBeforeLoadBlockRegion(bContinue, region_x, region_y)

   @return false to disable loading region from file
				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<returns>return to disable loading region from file
				</returns>
			</function>
			<function line="305" name="OnSaveBlockRegion">
				<summary>function GameLogic.OnSaveBlockRegion(bContinue, region_x, region_y, region_type)

				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<parameter name="region_type"/>
			</function>
			<function line="310" name="ReplaceWorld">
				<summary>function GameLogic.ReplaceWorld(world)
this is used to secretely replace current world object, such as from a standalone world into a multplayer worldserver. 
				</summary>
				<parameter name="world"/>
			</function>
			<function line="323" name="GetParticleManager">
				<summary>function GameLogic.GetParticleManager()

				</summary>
			</function>
			<function line="328" name="GetSaveHandler">
				<summary>function GameLogic.GetSaveHandler()
Returns the current world's current save handler
				</summary>
			</function>
			<function line="333" name="GetEvents">
				<summary>function GameLogic.GetEvents()
get events
				</summary>
			</function>
			<function line="341" name="GetProfile">
				<summary>function GameLogic.GetProfile()
get current user profile. 
				</summary>
			</function>
			<function line="346" name="GetBlockWorld">
				<summary>function GameLogic.GetBlockWorld()
get the block world raw pointer
				</summary>
			</function>
			<function line="356" name="SetBlockWorld">
				<summary>function GameLogic.SetBlockWorld(world)
set current block world.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="364" name="SetTipText">
				<summary>function GameLogic.SetTipText(text, target, duration)
set cody's text
   @param text: any HTML text
   @param target: nil or "&lt;player&gt;"
   @return true if text changed. 
				</summary>
				<parameter name="text">any HTML text
				</parameter>
				<parameter name="target">nil or "&lt;player&gt;"
				</parameter>
				<parameter name="duration"/>
				<returns>return if text changed. 
				</returns>
			</function>
			<function line="371" name="HideTipText">
				<summary>function GameLogic.HideTipText(target)
hide cody's text
				</summary>
				<parameter name="target"/>
			</function>
			<function line="379" name="Login">
				<summary>function GameLogic.Login(server, callback)
login a given server
   @param server:if nil, it means the local server
				</summary>
				<parameter name="server">if nil, it means the local server
				</parameter>
				<parameter name="callback"/>
			</function>
			<function line="386" name="GetBlockGenerator">
				<summary>function GameLogic.GetBlockGenerator()

				</summary>
			</function>
			<function line="392" name="StaticInit">
				<summary>function GameLogic.StaticInit(load_level)
this function is used for loading static world without editing features.
   @param load_level: nil to load only blocks, 1 load NPC and neuron logics.
				</summary>
				<parameter name="load_level">nil to load only blocks, 1 load NPC and neuron logics.
				</parameter>
			</function>
			<function line="453" name="AutoFindLoginPos">
				<summary>function GameLogic.AutoFindLoginPos()
find the most suitable login position. 
				</summary>
			</function>
			<function line="462" name="Reset">
				<summary>function GameLogic.Reset()
clear all old game level objects. 
				</summary>
			</function>
			<function line="465" name="NewGame">
				<summary>function GameLogic.NewGame()

				</summary>
			</function>
			<function line="470" name="GetWorldDirectory">
				<summary>function GameLogic.GetWorldDirectory()
return current world directory (fast)
				</summary>
			</function>
			<function line="475" name="LoadGame">
				<summary>function GameLogic.LoadGame()
load from the current world directory. 
				</summary>
			</function>
			<function line="515" name="Pause">
				<summary>function GameLogic.Pause()

				</summary>
			</function>
			<function line="519" name="Resume">
				<summary>function GameLogic.Resume()

				</summary>
			</function>
			<function line="523" name="IsPaused">
				<summary>function GameLogic.IsPaused()

				</summary>
			</function>
			<function line="527" name="RemoveWorldFileWatcher">
				<summary>function GameLogic.RemoveWorldFileWatcher()

				</summary>
			</function>
			<function line="534" name="CheckCreateFileWatcher">
				<summary>function GameLogic.CheckCreateFileWatcher()

				</summary>
			</function>
			<function line="571" name="BuildResourceFilepath">
				<summary>function GameLogic.BuildResourceFilepath(filename)
build resource filepath
   @param filename: relative to current world directory. 
				</summary>
				<parameter name="filename">relative to current world directory. 
				</parameter>
			</function>
			<function line="577" name="ToggleGameMode">
				<summary>function GameLogic.ToggleGameMode()

				</summary>
			</function>
			<function line="588" name="ToggleFly">
				<summary>function GameLogic.ToggleFly()

				</summary>
			</function>
			<function line="607" name="GetPickingDist">
				<summary>function GameLogic.GetPickingDist()

				</summary>
			</function>
			<function line="612" name="QuickSave">
				<summary>function GameLogic.QuickSave()
call this function every 1 min
				</summary>
			</function>
			<function line="616" name="GetUnSavedTime">
				<summary>function GameLogic.GetUnSavedTime()

				</summary>
			</function>
			<function line="621" name="SaveAll">
				<summary>function GameLogic.SaveAll(bSaveToLastSaveFolder)

   @param bSaveToLastSaveFolder: whether to save block to "blockworld.lastsave" folder
				</summary>
				<parameter name="bSaveToLastSaveFolder">whether to save block to "blockworld.lastsave" folder
				</parameter>
			</function>
			<function line="657" name="PlayAnimation">
				<summary>function GameLogic.PlayAnimation(params)
let a given character to play an animation.
   @param params: {nid, animationName=string, facingTarget={x,y,z}}
				</summary>
				<parameter name="params">{nid, animationName=string, facingTarget={x,y,z}}
				</parameter>
			</function>
			<function line="670" name="Exit">
				<summary>function GameLogic.Exit()

				</summary>
			</function>
			<function line="724" name="CheckTickShiftWalkingMode">
				<summary>function GameLogic.CheckTickShiftWalkingMode()

				</summary>
			</function>
			<function line="736" name="GetCurrentPlayerObj">
				<summary>function GameLogic.GetCurrentPlayerObj()

				</summary>
			</function>
			<function line="745" name="CheckCurrentPlayerLocation">
				<summary>function GameLogic.CheckCurrentPlayerLocation()
ensure the player never goes too high or too low. If too low, it should die in game mode. 
disable fly mode, if player feet is on ground
				</summary>
			</function>
			<function line="795" name="IsRemoteWorld">
				<summary>function GameLogic.IsRemoteWorld()
if true, we will disable all block entity simulation on the local world. 
				</summary>
			</function>
			<function line="800" name="IsServerWorld">
				<summary>function GameLogic.IsServerWorld()
if true, the entity may need to send update to clients. 
				</summary>
			</function>
			<function line="806" name="SetIsRemoteWorld">
				<summary>function GameLogic.SetIsRemoteWorld(bRemoteWorld, bIsServerWorld)
if true, we will disable all block entity simulation on the local world.
   @param bRemoteWorld: this is set to true, if self.world is a WorldClient type. 
				</summary>
				<parameter name="bRemoteWorld">this is set to true, if self.world is a WorldClient type. 
				</parameter>
				<parameter name="bIsServerWorld"/>
			</function>
			<function line="812" name="IsTick">
				<summary>function GameLogic:IsTick(deltaTime)

				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="820" name="FrameMove">
				<summary>function GameLogic.FrameMove(timer)
called 30 FPS framemove.
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="859" name="OnDead">
				<summary>function GameLogic.OnDead()

				</summary>
			</function>
			<function line="865" name="RunCommand">
				<summary>function GameLogic.RunCommand(...)

				</summary>
			</function>
			<function line="869" name="RefreshPlayerDensity">
				<summary>function GameLogic.RefreshPlayerDensity()

				</summary>
			</function>
			<function line="893" name="CanCollectItem">
				<summary>function GameLogic.CanCollectItem()
whether we can collect items when player hit it. 
				</summary>
			</function>
			<function line="900" name="IsReadOnly">
				<summary>function GameLogic.IsReadOnly()
whether we can edit the world 
				</summary>
			</function>
			<function line="905" name="CheckReadOnly">
				<summary>function GameLogic.CheckReadOnly()
return true if read only and display a message box. 
				</summary>
			</function>
			<function line="913" name="SetMode">
				<summary>function GameLogic.SetMode(mode, bFireModeChangeEvent)
set mode 
				</summary>
				<parameter name="mode"/>
				<parameter name="bFireModeChangeEvent"/>
			</function>
			<function line="925" name="EnterGameMode">
				<summary>function GameLogic.EnterGameMode(bIsSurvival)
call this to enter game mode and begin to spawn all kinds of creatures and display game UI 
				</summary>
				<parameter name="bIsSurvival"/>
			</function>
			<function line="939" name="EnterEditorMode">
				<summary>function GameLogic.EnterEditorMode()
call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="943" name="EnterTutorialMode">
				<summary>function GameLogic.EnterTutorialMode()

				</summary>
			</function>
			<function line="948" name="EnterMovieMode">
				<summary>function GameLogic.EnterMovieMode()
call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="954" name="GetMode">
				<summary>function GameLogic.GetMode()
get the current game mode
   @return "game", "editor", "survival"
				</summary>
				<returns>return "game", "editor", "survival"
				</returns>
			</function>
			<function line="959" name="GetBlockInRightHand">
				<summary>function GameLogic.GetBlockInRightHand()
return the block id in the right hand of the player. 
				</summary>
			</function>
			<function line="963" name="SetBlockInRightHand">
				<summary>function GameLogic.SetBlockInRightHand(block_id)

				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="971" name="CreateObject">
				<summary>function GameLogic.CreateObject(name, x, y, z, bAddToHistory)
create a game object at the given position. 
please note that all creation must ensure a closed space.
   @param name: tons of object types can be created.
   @param bAddToHistory: true to add to history for a possible undo function in future. Only some object support history.
				</summary>
				<parameter name="name">tons of object types can be created.
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bAddToHistory">true to add to history for a possible undo function in future. Only some object support history.
				</parameter>
			</function>
			<function line="1029" name="UndoBlock">
				<summary>function GameLogic.UndoBlock()
undo the block creation, only for testing
				</summary>
			</function>
			<function line="1039" name="CreatePortal">
				<summary>function GameLogic.CreatePortal(x, y, z)
create a portal at the current player's position to the block world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1045" name="GotoBlockWorld">
				<summary>function GameLogic.GotoBlockWorld()
teleport the user to the closest block world teleport position. If there is no such a position, we will create one in the block world. 
				</summary>
			</function>
			<function line="1057" name="TeleportPlayer">
				<summary>function GameLogic.TeleportPlayer(x, y, z)
teleport the current player to a givn position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1061" name="GetPlayerPosition">
				<summary>function GameLogic.GetPlayerPosition()

				</summary>
			</function>
			<function line="1066" name="IsOwner">
				<summary>function GameLogic.IsOwner()
is owner
				</summary>
			</function>
			<function line="1072" name="GotoOverworld">
				<summary>function GameLogic.GotoOverworld()
teleport the user to the over world at the current block world position. 
				</summary>
			</function>
			<function line="1083" name="GetNearestNPC">
				<summary>function GameLogic.GetNearestNPC(radius)
get the nearest npc around the current player position.
   @param radius: we will search for all npcs within this radius. if nil, it is 6 meters
   @return npc_object, dist: nil may be returned if not found. 
				</summary>
				<parameter name="radius">we will search for all npcs within this radius. if nil, it is 6 meters
				</parameter>
				<returns>return , dist: nil may be returned if not found. 
				</returns>
			</function>
			<function line="1110" name="WalkForward">
				<summary>function GameLogic.WalkForward()

				</summary>
			</function>
			<function line="1122" name="TalkToNearestNPC">
				<summary>function GameLogic.TalkToNearestNPC()
talk with the nearest npc if any. 
				</summary>
			</function>
			<function line="1134" name="DoJump">
				<summary>function GameLogic.DoJump()

				</summary>
			</function>
			<function line="1188" name="SetTouchMode">
				<summary>function GameLogic.SetTouchMode(mode)

   @param mode: "add", "del"
				</summary>
				<parameter name="mode">"add", "del"
				</parameter>
			</function>
			<function line="1193" name="GetTouchMode">
				<summary>function GameLogic.GetTouchMode()

   @return: "add", "del"
				</summary>
				<returns>return "add", "del"
				</returns>
			</function>
			<function line="1199" name="SetHomePosition">
				<summary>function GameLogic.SetHomePosition(x,y,z)
set player home position.
   @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1204" name="GetHomePosition">
				<summary>function GameLogic.GetHomePosition()
get player home spawn position. 
				</summary>
			</function>
			<function line="1209" name="GetDesktopEntity">
				<summary>function GameLogic.GetDesktopEntity()
create get desktop entity
				</summary>
			</function>
			<function line="1225" name="GetSkyEntity">
				<summary>function GameLogic.GetSkyEntity()
create get sky entity
				</summary>
			</function>
			<function line="1239" name="GetFreeCamera">
				<summary>function GameLogic.GetFreeCamera()
create get free camera entity
				</summary>
			</function>
			<function line="1259" name="GetHomeEntity">
				<summary>function GameLogic.GetHomeEntity()
may return nil if there is no home entity. 
				</summary>
			</function>
			<function line="1265" name="AppendChat">
				<summary>function GameLogic.AppendChat(text, entity)
append chat message
   @param entity: if not nil, entity display name is prepended
				</summary>
				<parameter name="text"/>
				<parameter name="entity">if not nil, entity display name is prepended
				</parameter>
			</function>
			<function line="1286" name="ShowMsg">
				<summary>function GameLogic.ShowMsg(text, level)
display message such as script syntax or runtime error.
   @param level: default to 1, which only show in bbs window. 
				</summary>
				<parameter name="text"/>
				<parameter name="level">default to 1, which only show in bbs window. 
				</parameter>
			</function>
			<function line="1312" name="ToggleRunning">
				<summary>function GameLogic.ToggleRunning(bRunning)

				</summary>
				<parameter name="bRunning"/>
			</function>
			<function line="1336" name="OnCameraFrameMove">
				<summary>function GameLogic.OnCameraFrameMove()

				</summary>
			</function>
			<function line="1361" name="GetShaderManager">
				<summary>function GameLogic.GetShaderManager()

				</summary>
			</function>
			<function line="1371" name="ToggleDesktop">
				<summary>function GameLogic.ToggleDesktop(name)
toggle desktop view
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1401" name="OnToggleViewBobbing">
				<summary>function GameLogic.OnToggleViewBobbing(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1405" name="OnToggleLockMouseWheel">
				<summary>function GameLogic.OnToggleLockMouseWheel(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1411" name="AddBBS">
				<summary>function GameLogic.AddBBS(channel, text, max_duration, color)

   @param text: nil to clear text on that channel.
e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</summary>
				<parameter name="channel"/>
				<parameter name="text">nil to clear text on that channel.
e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</parameter>
				<parameter name="max_duration"/>
				<parameter name="color"/>
			</function>
			<function line="1416" name="SetStatus">
				<summary>function GameLogic.SetStatus(text)

   @param text: text to show in the status bar.  if nil, it will clear it. 
				</summary>
				<parameter name="text">text to show in the status bar.  if nil, it will clear it. 
				</parameter>
			</function>
			<function line="1420" name="OnToggleUIScaling">
				<summary>function GameLogic.OnToggleUIScaling(bChecked)

				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1426" name="ToggleCamera">
				<summary>function GameLogic.ToggleCamera(IsFPSView)

   @param IsFPSView: nil to toggle, otherwise to set
				</summary>
				<parameter name="IsFPSView">nil to toggle, otherwise to set
				</parameter>
			</function>
			<function line="1431" name="GetSim">
				<summary>function GameLogic.GetSim()
get world simulator
				</summary>
			</function>
			<function line="1435" name="GetCurrentSelection">
				<summary>function GameLogic.GetCurrentSelection()

				</summary>
			</function>
			<function line="1441" name="GetFilters">
				<summary>function GameLogic.GetFilters()
filters are only used by plugins, mods. Standard customization should use Entity:event() and rule bag items.
some commands, or items use filters for plugin functions. 
				</summary>
			</function>
			<function line="1451" name="ActivateDefaultContext">
				<summary>function GameLogic.ActivateDefaultContext()
please note this function may return nil if context can not be switched since we are in the middle of some operation. 
				</summary>
			</function>
			<function line="1456" name="GetSceneContext">
				<summary>function GameLogic.GetSceneContext()
get current scene context
				</summary>
			</function>
			<function line="1461" name="UserAction">
				<summary>function GameLogic:UserAction(name)
record a user action to keep track of user behavior. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1467" name="GetLastUserAction">
				<summary>function GameLogic:GetLastUserAction()

				</summary>
			</function>
			<function line="1472" name="GetText">
				<summary>function GameLogic:GetText(text)
get a translated text
				</summary>
				<parameter name="text"/>
			</function>
			<function line="1478" name="event">
				<summary>function GameLogic:event(event)
custom user or game event
				</summary>
				<parameter name="event"/>
			</function>
		</table>
		<table name="CmdParser" src="script/apps/Aries/Creator/Game/Commands/CmdParser.lua">
			<function line="39" name="ParsePlayer">
				<summary>function CmdParser.ParsePlayer(cmd_text, fromEntity)

   @param cmd_text:
   @p or @[playername]. if
   @p it is the last triggering entity or current player. 
if
   @self, it is the fromEntity. if
   @a, it means closest nearby player. 
return player_entity, cmd_text_remain
				</summary>
				<parameter name="cmd_text">
				</parameter>
				<parameter name="fromEntity"/>
			</function>
			<function line="58" name="ParsePos">
				<summary>function CmdParser.ParsePos(cmd_text, entity)
3d position absolute or relative with ~
e.g. "20000 0 20000" or "~ ~1 ~" or "~1 ~-2 ~-3"
return x,y,z, cmd_text_remain: cmd_text_remaining is remaining unparsed text. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="entity"/>
			</function>
			<function line="94" name="ParsePosInBrackets">
				<summary>function CmdParser.ParsePosInBrackets(cmd_text)
additional pos in brackets like "(2 -1 0)", "(2 ~ ~)"
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="126" name="ParseBlockId">
				<summary>function CmdParser.ParseBlockId(cmd_text)
block_id can be number or block name.
return block_id, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="33" name="ParseInt" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseInt(cmd_text)
return integer or float, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="48" name="ParseDeltaInt" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseDeltaInt(cmd_text)
e.g. "~0.1"
return integer or float, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="61" name="ParseText" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseText(cmd_text, text)
parse a given text
   @param text:such as "home", must not contain regular expression letters. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="text">such as "home", must not contain regular expression letters. 
				</parameter>
			</function>
			<function line="70" name="ParseString" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseString(cmd_text)
parse any string value without white space. 
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="79" name="ParseWord" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseWord(cmd_text)
parse any word value without white space. 
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="88" name="ParseFormated" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseFormated(cmd_text, strFmt)

   @param strFmt: regular expression such as "%S+", "%w+", etc. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="strFmt">regular expression such as "%S+", "%w+", etc. 
				</parameter>
			</function>
			<function line="99" name="ParseOption" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseOption(cmd_text)
parse option that begins with -, return the option name
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="108" name="ParseOptions" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseOptions(cmd_text)
return options: -[options]
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="123" name="ParseBool" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseBool(cmd_text)
1|0 on|off true|false are all supported
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="135" name="ParseNumberList" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseNumberList(cmd_text, list, separator)

   @param cmd_text: "1|2|3" will return {1,2,3}
"1|~|3" will return {1,false,3}
   @param separator: default to "|," which is "|" or ",". one can also specify "|,%s"
return a table array of numbers
				</summary>
				<parameter name="cmd_text">"1|2|3" will return {1,2,3}
"1|~|3" will return {1,false,3}
				</parameter>
				<parameter name="list"/>
				<parameter name="separator">default to "|," which is "|" or ",". one can also specify "|,%s"
return a table array of numbers
				</parameter>
			</function>
			<function line="172" name="ParseStringList" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseStringList(cmd_text, list)

   @param cmd_text: "str1|2|str3" will return {"str1","2","str3"}
return a table of |or, sperated list
				</summary>
				<parameter name="cmd_text">"str1|2|str3" will return {"str1","2","str3"}
return a table of |or, sperated list
				</parameter>
				<parameter name="list"/>
			</function>
			<function line="195" name="ParseServerData" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseServerData(cmd_text)
item's serverdata or tagData in xml format
currently, this must be the last parameter.
   @param cmd_text: "{table parameters}"
   @return serverDataTable, cmd_remaining_text
				</summary>
				<parameter name="cmd_text">"{table parameters}"
				</parameter>
				<returns>return , cmd_remaining_text
				</returns>
			</function>
			<function line="208" name="ParseColor" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseColor(cmd_text, default_value)
parse: #rgb like "#ffffff"
   @return the string "#ffffff"
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="default_value"/>
				<returns>return string "#ffffff"
				</returns>
			</function>
			<function line="218" name="ParseTable" src="script/ide/System/Util/CmdParser.lua">
				<summary>function CmdParser.ParseTable(cmd_text, default_value)
parse: NPL table string {attr={filename=""}}
   @return table, remaining_text;
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="default_value"/>
				<returns>return , remaining_text;
				</returns>
			</function>
		</table>
		<table name="CommandManager" src="script/apps/Aries/Creator/Game/Commands/CommandManager.lua">
			<function line="32" name="Init">
				<summary>function CommandManager:Init()
call this when command
				</summary>
			</function>
			<function line="85" name="RunCommand">
				<summary>function CommandManager:RunCommand(cmd_name, cmd_text, ...)
run one text command
   @param cmd_name: this can be command name or full command text that begin with "/" or nothing. 
				</summary>
				<parameter name="cmd_name">this can be command name or full command text that begin with "/" or nothing. 
				</parameter>
				<parameter name="cmd_text"/>
			</function>
			<function line="93" name="GetCommandName">
				<summary>function CommandManager:GetCommandName(cmd_text)

				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="100" name="RunText">
				<summary>function CommandManager:RunText(text, ...)
run text with may contain one or several commands. 
it will treat ; or \r\n as a new line of command
   @param ...: ususally fromEntity, 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="112" name="RunInlineCommand">
				<summary>function CommandManager:RunInlineCommand(cmd_text, ...)
like linux bash shell, text inside $() is regarded as inline command, whose returned value is used in current command. 
brackets can be nested
   @return the new cmd_text after inline command is executed. 
				</summary>
				<parameter name="cmd_text"/>
				<returns>return new cmd_text after inline command is executed. 
				</returns>
			</function>
			<function line="136" name="Run">
				<summary>function CommandManager:Run(cmd, ... )
run commands
   @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="141" name="GetCmdByString">
				<summary>function CommandManager:GetCmdByString(cmd)

   @return cmd_class, cmd_name, cmd_text;
				</summary>
				<parameter name="cmd"/>
				<returns>return , cmd_name, cmd_text;
				</returns>
			</function>
			<function line="156" name="RunWithVariables">
				<summary>function CommandManager:RunWithVariables(variables, cmd, ...)

   @param variables: nil or a must be an object containning Compile() function.
   @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="variables">nil or a must be an object containning Compile() function.
				</parameter>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. 
if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="172" name="RunFromConsole">
				<summary>function CommandManager:RunFromConsole(cmd)
run command from console for the current player
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="193" name="Destroy">
				<summary>function CommandManager:Destroy()
destroy the command manager
				</summary>
			</function>
			<function line="205" name="Register">
				<summary>function CommandManager:Register(slash_command)
call this function to register the slash command and init
				</summary>
				<parameter name="slash_command"/>
			</function>
			<function line="221" name="GetCmdList">
				<summary>function CommandManager:GetCmdList(cmds_str, line_reg_exp)
get command list
   @param line_reg_exp: default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</summary>
				<parameter name="cmds_str"/>
				<parameter name="line_reg_exp">default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</parameter>
			</function>
			<function line="242" name="CallFunction">
				<summary>function CommandManager:CallFunction(cmd_list, func_name, variables, fromEntity)

   @param cmd_list: array of command text. if nil, the current command list is used.
   @param func_name: function name, 
function [name]  
-- cmd here will be called. 
functionend
return true, function_return_value:  if function is found and called. otherwise return nil;
				</summary>
				<parameter name="cmd_list">array of command text. if nil, the current command list is used.
				</parameter>
				<parameter name="func_name">function name, 
function [name]  
-- cmd here will be called. 
functionend
return true, function_return_value:  if function is found and called. otherwise return nil;
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="276" name="GetCurrentCmdList">
				<summary>function CommandManager:GetCurrentCmdList()
get the current command list if any that is being executed;
				</summary>
			</function>
			<function line="284" name="RunCmdSegment">
				<summary>function CommandManager:RunCmdSegment(cmd_list, fromLine, toLine, variables, fromEntity)
run command from fromLine to toLine
   @param cmd_list: array of cmd strings
   @param fromLine: default to 1
   @param toLine: default to #cmd_list
				</summary>
				<parameter name="cmd_list">array of cmd strings
				</parameter>
				<parameter name="fromLine">default to 1
				</parameter>
				<parameter name="toLine">default to #cmd_list
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="395" name="RunCmdList">
				<summary>function CommandManager:RunCmdList(cmd_list, variables, fromEntity)
run command list and return the result. 
				</summary>
				<parameter name="cmd_list"/>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="400" name="LoadCmdHelpFile">
				<summary>function CommandManager:LoadCmdHelpFile()

				</summary>
			</function>
			<function line="511" name="GetCmdHelpDS">
				<summary>function CommandManager:GetCmdHelpDS()
lazy load all command help
				</summary>
			</function>
			<function line="518" name="GetCmdTypeDS">
				<summary>function CommandManager:GetCmdTypeDS()

				</summary>
			</function>
		</table>
		<table name="EntityManager" src="script/apps/Aries/Creator/Game/Entity/EntityManager.lua">
			<function line="89" name="RegisterEntities">
				<summary>function EntityManager.RegisterEntities()

				</summary>
			</function>
			<function line="123" name="RegisterEntityClass">
				<summary>function EntityManager.RegisterEntityClass(name, entity)
register a new entity class
				</summary>
				<parameter name="name"/>
				<parameter name="entity"/>
			</function>
			<function line="128" name="GetEntityClass">
				<summary>function EntityManager.GetEntityClass(class_name)
get entity class
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="137" name="GetChild">
				<summary>function EntityManager:GetChild(sName)
-------------------------------
attribute interface
-------------------------------
get child attribute object. this can be regarded as an intrusive data model of a given object. 
once you get an attribute object, you can use this model class to access all data in the hierarchy.
				</summary>
				<parameter name="sName"/>
			</function>
			<function line="142" name="GetChildAt">
				<summary>function EntityManager:GetChildAt(nRowIndex, nColumnIndex)

   @param nColumnIndex: nil to default to 0;
				</summary>
				<parameter name="nRowIndex"/>
				<parameter name="nColumnIndex">nil to default to 0;
				</parameter>
			</function>
			<function line="153" name="GetChildCount">
				<summary>function EntityManager:GetChildCount(nColumnIndex)

   @param nColumnIndex: if nil, default to 0. 
				</summary>
				<parameter name="nColumnIndex">if nil, default to 0. 
				</parameter>
			</function>
			<function line="162" name="Clear">
				<summary>function EntityManager.Clear()

				</summary>
			</function>
			<function line="184" name="IsBlocked">
				<summary>function EntityManager.IsBlocked(bx, by, bz)
whether the given block is blocked. 
TODO: cache the query result for a single framemove. this function may be called many times in a single frame. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="190" name="AddObject">
				<summary>function EntityManager.AddObject(entity)
add entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="215" name="AddEntityCount">
				<summary>function EntityManager.AddEntityCount(item_id, delta_count)

				</summary>
				<parameter name="item_id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="222" name="RemoveObject">
				<summary>function EntityManager.RemoveObject(entity)
remove entity from manager. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="241" name="GetAllEntities">
				<summary>function EntityManager.GetAllEntities()

				</summary>
			</function>
			<function line="246" name="GetItemCount">
				<summary>function EntityManager.GetItemCount(item_id)
get item count by block_id
				</summary>
				<parameter name="item_id"/>
			</function>
			<function line="253" name="LoadFromFile">
				<summary>function EntityManager.LoadFromFile(filename)
Load all entity data from a given XML file.
   @param filename: if nil, it search the "[currentworld]/entity.xml"
   @return true if there is local NPC file. or nil if not. 
				</summary>
				<parameter name="filename">if nil, it search the "[currentworld]/entity.xml"
				</parameter>
				<returns>return if there is local NPC file. or nil if not. 
				</returns>
			</function>
			<function line="275" name="InitPlayers">
				<summary>function EntityManager.InitPlayers()
init player. Set and load current player. 
				</summary>
			</function>
			<function line="289" name="GetPlayerFileName">
				<summary>function EntityManager.GetPlayerFileName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="294" name="CheckNoEntityCollision">
				<summary>function EntityManager.CheckNoEntityCollision(x,y,z, excludingEntity)
Returns true if there are no solid, live entities in the specified location, excluding the given entity
   @param excludingEntity: usually the current player. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="excludingEntity">usually the current player. 
				</parameter>
			</function>
			<function line="307" name="GetLastTriggerEntity">
				<summary>function EntityManager.GetLastTriggerEntity()
the lastest trigger entity, such as the one that pressed a button or step on a pressure plat, etc.  
				</summary>
			</function>
			<function line="312" name="SetLastTriggerEntity">
				<summary>function EntityManager.SetLastTriggerEntity(entity)
set lastest trigger entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="317" name="LoadPlayer">
				<summary>function EntityManager.LoadPlayer(name)
get or load or create a player of the given name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="337" name="SetMainPlayer">
				<summary>function EntityManager.SetMainPlayer(playerEntity)
set the main player that is being controlled. After this call, EntityManager.GetPlayer() will return the given player. 
the main player is always the player being controlled by the PlayerController.
   @param playerEntity: this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player
   @return: the previous player if any. 
				</summary>
				<parameter name="playerEntity">this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player
				</parameter>
				<returns>return the previous player if any. 
				</returns>
			</function>
			<function line="348" name="SaveAllPlayers">
				<summary>function EntityManager.SaveAllPlayers()

				</summary>
			</function>
			<function line="361" name="GetPlayer">
				<summary>function EntityManager.GetPlayer(name)
get player
   @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="370" name="GetEntityByObjectID">
				<summary>function EntityManager.GetEntityByObjectID(obj_id)
get entity
				</summary>
				<parameter name="obj_id"/>
			</function>
			<function line="375" name="GetEntity">
				<summary>function EntityManager.GetEntity(name)
get by name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="382" name="GetEntityById">
				<summary>function EntityManager.GetEntityById(entityId)
get by id. 
				</summary>
				<parameter name="entityId"/>
			</function>
			<function line="389" name="RenameEntity">
				<summary>function EntityManager.RenameEntity(entity, old_name, new_name)
rename a given entity in the manager. 
				</summary>
				<parameter name="entity"/>
				<parameter name="old_name"/>
				<parameter name="new_name"/>
			</function>
			<function line="403" name="GetEntitiesByItemID">
				<summary>function EntityManager.GetEntitiesByItemID(item_id)
get all entities by block id.
   @return nil or array of entities. 
				</summary>
				<parameter name="item_id"/>
				<returns>return or array of entities. 
				</returns>
			</function>
			<function line="414" name="SetEntityByObjectID">
				<summary>function EntityManager.SetEntityByObjectID(obj_id, entity)

				</summary>
				<parameter name="obj_id"/>
				<parameter name="entity"/>
			</function>
			<function line="420" name="HasEntityInBlock">
				<summary>function EntityManager.HasEntityInBlock(bx, by, bz)
return true if there is at least one entity at the blocok position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="431" name="HasNonPlayerEntityInBlock">
				<summary>function EntityManager.HasNonPlayerEntityInBlock(bx, by, bz)
has non-player entity
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="443" name="GetEntitiesInBlock">
				<summary>function EntityManager.GetEntitiesInBlock(bx, by, bz)
get all entities in block. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="452" name="GetBlockEntity">
				<summary>function EntityManager.GetBlockEntity(bx, by, bz)
get the block entity excluding other entity
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="460" name="GetEntityInBlock">
				<summary>function EntityManager.GetEntityInBlock(bx, by, bz, class_name)
get the first entity that matches the class_name
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="472" name="GetEntitiesByAABBOfType">
				<summary>function EntityManager.GetEntitiesByAABBOfType(entity_class, aabb)

   @param entity_class: nil to match any entity. 
				</summary>
				<parameter name="entity_class">nil to match any entity. 
				</parameter>
				<parameter name="aabb"/>
			</function>
			<function line="500" name="GetEntitiesByAABBExcept">
				<summary>function EntityManager.GetEntitiesByAABBExcept(aabb, excludingEntity)
Will get all entities within the specified AABB excluding the one passed into it. Args: entityToExclude, aabb
   @return array of entities
				</summary>
				<parameter name="aabb"/>
				<parameter name="excludingEntity"/>
				<returns>return of entities
				</returns>
			</function>
			<function line="529" name="RemoveBlockEntity">
				<summary>function EntityManager.RemoveBlockEntity(bx, by, bz, class_name)
remove entity by its class_name at the given block position. 
all matching entities will be removed. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="556" name="GetBlockContainer">
				<summary>function EntityManager.GetBlockContainer(bx,by,bz)
private: 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="568" name="SetBlockContainer">
				<summary>function EntityManager.SetBlockContainer(bx,by,bz, block_container)

				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="block_container"/>
			</function>
			<function line="574" name="GetEntitiesInChunkColumn">
				<summary>function EntityManager.GetEntitiesInChunkColumn(cx, cz, bCreateIfNotExist)
return array of all entities in a given chunk column
				</summary>
				<parameter name="cx"/>
				<parameter name="cz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="585" name="GetRegionContainer">
				<summary>function EntityManager.GetRegionContainer(bx,bz)
get region object
				</summary>
				<parameter name="bx"/>
				<parameter name="bz"/>
			</function>
			<function line="600" name="SaveToFile">
				<summary>function EntityManager.SaveToFile(bSaveToLastSaveFolder)

				</summary>
				<parameter name="bSaveToLastSaveFolder"/>
			</function>
			<function line="632" name="AddToSentientList">
				<summary>function EntityManager.AddToSentientList(entity)
set an entity so that its framemove function should always be called regardless of player position
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="639" name="RemoveFromSentientList">
				<summary>function EntityManager.RemoveFromSentientList(entity)
remove an entity so that its framemove function should not be called unless it falls into player sensible range.
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="654" name="GetDeltaTime">
				<summary>function EntityManager:GetDeltaTime()

				</summary>
			</function>
			<function line="659" name="FrameMove">
				<summary>function EntityManager.FrameMove(deltaTime)
called every frame to simulate objects 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="704" name="FrameMoveQueueThisFrame">
				<summary>function EntityManager.FrameMoveQueueThisFrame(deltaTime, cur_time, destroy_list)
pending list to framemove
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="714" name="SetFocus">
				<summary>function EntityManager.SetFocus(entity)
set focus to the given entity. 
The entity class's SetFocus() function should always call this fuction before it return true. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="727" name="GetFocus">
				<summary>function EntityManager.GetFocus()
get current focus
				</summary>
			</function>
			<function line="732" name="FrameMoveDynamicObjects">
				<summary>function EntityManager.FrameMoveDynamicObjects(deltaTime, cur_time, destroy_list)
dynamic object is always framemoved until they are dead. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="751" name="FrameMoveChunksByPlayer">
				<summary>function EntityManager.FrameMoveChunksByPlayer(playerEntity, grid_radius, deltaTime, cur_time, destroy_list)
all entities in the radius of the given player is framemoved.
   @param grid_radius: if nil, default to playerEntity:GetSentientRadius(). 
				</summary>
				<parameter name="playerEntity"/>
				<parameter name="grid_radius">if nil, default to playerEntity:GetSentientRadius(). 
				</parameter>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="774" name="FrameMoveEntities">
				<summary>function EntityManager.FrameMoveEntities(entities, deltaTime, cur_time, destroy_list)
all entities in the list is framemoved. 
				</summary>
				<parameter name="entities"/>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="794" name="FrameMoveSentientList">
				<summary>function EntityManager.FrameMoveSentientList(deltaTime, cur_time, destroy_list)
for always sentient objects, like CommandEntity with timed event
   @param deltaTime: in seconds
   @param cur_time: in seconds
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="cur_time">in seconds
				</parameter>
				<parameter name="destroy_list"/>
			</function>
		</table>
		<table name="Entity" src="script/apps/Aries/Creator/Game/Entity/Entity.lua">
			<function line="103" name="ctor">
				<summary>function Entity:ctor()

   @param x,y,z: initial real world position.
   @param radius: the half radius of the object. 
				</summary>
			</function>
			<function line="110" name="SetEntityId">
				<summary>function Entity:SetEntityId(id)
this function can only be called before entity is attached, such as in Init() function. 
e.g. when that server and client need to share same id
				</summary>
				<parameter name="id"/>
			</function>
			<function line="121" name="GetCameraRoll">
				<summary>function Entity:GetCameraRoll()
when entity is focused, this is the additional camera roll applied.
				</summary>
			</function>
			<function line="125" name="SetCameraRoll">
				<summary>function Entity:SetCameraRoll(roll)

				</summary>
				<parameter name="roll"/>
			</function>
			<function line="135" name="event">
				<summary>function Entity:event(event)
all kinds of custom user or game event, that is handled mostly by rule bag items.
Entity event is the only source of inputs to the containing rule bag items, which the user can customize using ItemCommand, ItemScript, etc. 
In the big picture, event forms a dynamic and user configurable network of connections among entities and rule bag items. 
Items in rule bags are executed in sequence, until one of them accept the event. 
Some events are system buildin events that is fired automatically by the system like like mousePressEvent, mouseReleaseEvent, worldLoadedEvent, blockTickEvent, timerEvent, etc. 
Custom events may be sent to any entity via /sendevent command to achieve any user defined world logics. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="161" name="GetType">
				<summary>function Entity:GetType()

				</summary>
			</function>
			<function line="165" name="Reset">
				<summary>function Entity:Reset()

				</summary>
			</function>
			<function line="174" name="IsRemote">
				<summary>function Entity:IsRemote()
return true if the entity is controlled remotely by the server. 
i.e. whether this entity is a client proxy of server entity. 
				</summary>
			</function>
			<function line="180" name="SetLocal">
				<summary>function Entity:SetLocal(bForceLocal)
set whether this entity is a local entity even the game logic is in remote mode.
   @sa self:IsRemote().
				</summary>
				<parameter name="bForceLocal"/>
			</function>
			<function line="185" name="GetEditModel">
				<summary>function Entity:GetEditModel()
created on demand for editors
				</summary>
			</function>
			<function line="197" name="SetPersistent">
				<summary>function Entity:SetPersistent(bIsPersistent)
whether the entity should be serialized to disk. 
				</summary>
				<parameter name="bIsPersistent"/>
			</function>
			<function line="203" name="EnableAnimation">
				<summary>function Entity:EnableAnimation(bEnable)
whether automatically advance local time of current animation id. true by default. 
Maybe set to false during movie actor action playback 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="210" name="IsBiped">
				<summary>function Entity:IsBiped()

				</summary>
			</function>
			<function line="214" name="SetDummy">
				<summary>function Entity:SetDummy(bIsDummy)
whether it will check for collision detection 
				</summary>
				<parameter name="bIsDummy"/>
			</function>
			<function line="219" name="IsDummy">
				<summary>function Entity:IsDummy()
whether it will check for collision detection 
				</summary>
			</function>
			<function line="225" name="FaceTarget">
				<summary>function Entity:FaceTarget(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="228" name="ToggleFly">
				<summary>function Entity:ToggleFly(bFly)

				</summary>
				<parameter name="bFly"/>
			</function>
			<function line="232" name="SetWorld">
				<summary>function Entity:SetWorld(world)
Sets the reference to the World object.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="237" name="LoadFromXMLNode">
				<summary>function Entity:LoadFromXMLNode(node)
load from an xml node. 
				</summary>
				<parameter name="node"/>
			</function>
			<function line="306" name="GetVariables">
				<summary>function Entity:GetVariables()
get the variable class. 
				</summary>
			</function>
			<function line="310" name="SaveToXMLNode">
				<summary>function Entity:SaveToXMLNode(node)

				</summary>
				<parameter name="node"/>
			</function>
			<function line="356" name="SetFocus">
				<summary>function Entity:SetFocus()
let the camera focus on this player and take control of it.
   @note: please note if this return nil, and does not call EntityManager.SetFocus(), OnFocusIn and OnFocusOut will never be called
   @return return true if focus can be set
				</summary>
				<returns>return true if focus can be set
				</returns>
			</function>
			<function line="359" name="HasFocus">
				<summary>function Entity:HasFocus()

				</summary>
			</function>
			<function line="364" name="OnFocusIn">
				<summary>function Entity:OnFocusIn()
called after focus is set
				</summary>
			</function>
			<function line="379" name="OnFocusOut">
				<summary>function Entity:OnFocusOut()
called before focus is lost
				</summary>
			</function>
			<function line="390" name="SetVisible">
				<summary>function Entity:SetVisible(bVisible)

				</summary>
				<parameter name="bVisible"/>
			</function>
			<function line="398" name="IsVisible">
				<summary>function Entity:IsVisible()

				</summary>
			</function>
			<function line="402" name="IsFlying">
				<summary>function Entity:IsFlying()

				</summary>
			</function>
			<function line="405" name="IsRunning">
				<summary>function Entity:IsRunning()

				</summary>
			</function>
			<function line="408" name="ToggleRunning">
				<summary>function Entity:ToggleRunning()

				</summary>
			</function>
			<function line="411" name="GetSpeedScale">
				<summary>function Entity:GetSpeedScale()

				</summary>
			</function>
			<function line="416" name="GetCurrentSpeedScale">
				<summary>function Entity:GetCurrentSpeedScale()
take running and flying into account. 
				</summary>
			</function>
			<function line="431" name="GetWalkSpeed">
				<summary>function Entity:GetWalkSpeed()

				</summary>
			</function>
			<function line="435" name="SetWalkSpeed">
				<summary>function Entity:SetWalkSpeed(speed)

				</summary>
				<parameter name="speed"/>
			</function>
			<function line="439" name="SetSpeedScale">
				<summary>function Entity:SetSpeedScale(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="443" name="GetJumpupSpeed">
				<summary>function Entity:GetJumpupSpeed()

				</summary>
			</function>
			<function line="447" name="CanReachBlockAt">
				<summary>function Entity:CanReachBlockAt(x,y,z, mode)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mode"/>
			</function>
			<function line="452" name="CanTeleport">
				<summary>function Entity:CanTeleport()
whether the entity can be teleported to another place, by teleport stone for instance. 
				</summary>
			</function>
			<function line="459" name="ToggleWalkRun">
				<summary>function Entity:ToggleWalkRun(bWalking)
usually holding shift key will toggle to walk mode.
   @param bWalking: if nil it will toggle. if true, it will force walk or run. 
				</summary>
				<parameter name="bWalking">if nil it will toggle. if true, it will force walk or run. 
				</parameter>
			</function>
			<function line="474" name="IsWalking">
				<summary>function Entity:IsWalking()
all entity default to running (not walking). 
				</summary>
			</function>
			<function line="487" name="SetAnimation">
				<summary>function Entity:SetAnimation(filenames)
build animation sequence table to be fed to entity.
   @param filenames: can be filename, animation name, animation id or array of above things. currently only two animation is supported. 
such as {4,0} 
				</summary>
				<parameter name="filenames">can be filename, animation name, animation id or array of above things. currently only two animation is supported. 
such as {4,0} 
				</parameter>
			</function>
			<function line="521" name="GetLastAnimId">
				<summary>function Entity:GetLastAnimId()
get last animation id. this may return nil, which usually mean 0.
				</summary>
			</function>
			<function line="527" name="ShowHeadOnDisplay">
				<summary>function Entity:ShowHeadOnDisplay(bShow)
enable headon display
				</summary>
				<parameter name="bShow"/>
			</function>
			<function line="530" name="IsShowHeadOnDisplay">
				<summary>function Entity:IsShowHeadOnDisplay()

				</summary>
			</function>
			<function line="534" name="AddStat">
				<summary>function Entity:AddStat(id, delta_count)
add stat
				</summary>
				<parameter name="id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="538" name="GetPortaitObjectParams">
				<summary>function Entity:GetPortaitObjectParams(bForceRefresh)
add stat
get object params table to create the portait in entity dialog.
   @param bForceRefresh: if true, it will fetch again from innerObject. 
				</summary>
				<parameter name="bForceRefresh">if true, it will fetch again from innerObject. 
				</parameter>
			</function>
			<function line="570" name="CreateInnerObject">
				<summary>function Entity:CreateInnerObject(filename, isCharacter, offsetY, scaling)
this is helper function that derived class can use to create an inner mesh or character object. 
				</summary>
				<parameter name="filename"/>
				<parameter name="isCharacter"/>
				<parameter name="offsetY"/>
				<parameter name="scaling"/>
			</function>
			<function line="601" name="DestroyInnerObject">
				<summary>function Entity:DestroyInnerObject()
this is helper function that derived class can use to destroy an inner mesh or character object. 
				</summary>
			</function>
			<function line="611" name="OnShiftKeyPressed">
				<summary>function Entity:OnShiftKeyPressed()
this is called on each tick, when this entity has focus and user is pressing and holding shift key. 
				</summary>
			</function>
			<function line="615" name="OnShiftKeyReleased">
				<summary>function Entity:OnShiftKeyReleased()
this is called, when this entity has focus and user is just released the shift key. 
				</summary>
			</function>
			<function line="618" name="Jump">
				<summary>function Entity:Jump()

				</summary>
			</function>
			<function line="634" name="SetGravity">
				<summary>function Entity:SetGravity(value)

   @param value: if nil, it will use the global gravity. 
				</summary>
				<parameter name="value">if nil, it will use the global gravity. 
				</parameter>
			</function>
			<function line="638" name="GetGravity">
				<summary>function Entity:GetGravity()

				</summary>
			</function>
			<function line="643" name="GetDataContainer">
				<summary>function Entity:GetDataContainer()
get data container. 
				</summary>
			</function>
			<function line="653" name="IsPersistent">
				<summary>function Entity:IsPersistent()
whether its persistent. 
				</summary>
			</function>
			<function line="659" name="OnActivated">
				<summary>function Entity:OnActivated(triggerEntity)
virtual function: handle some external input. 
default is do nothing. return true is something is processed. 
				</summary>
				<parameter name="triggerEntity"/>
			</function>
			<function line="667" name="IsRegional">
				<summary>function Entity:IsRegional()
if true, always serialize to 512*512 regional entity file
block based entity has this set to true. 
				</summary>
			</function>
			<function line="672" name="init">
				<summary>function Entity:init()
virtual function: 
				</summary>
			</function>
			<function line="677" name="OnCollideWithPlayer">
				<summary>function Entity:OnCollideWithPlayer(from_entity, bx,by,bz)
player entity collided with this entity
				</summary>
				<parameter name="from_entity"/>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="681" name="OnHit">
				<summary>function Entity:OnHit(attack_value, fromX, fromY, fromZ)
virtual function: when the entity is hit (attacked) by the missile
				</summary>
				<parameter name="attack_value"/>
				<parameter name="fromX"/>
				<parameter name="fromY"/>
				<parameter name="fromZ"/>
			</function>
			<function line="685" name="OnClick">
				<summary>function Entity:OnClick(x,y,z, mouse_button,entity,side)
virtual function:
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side"/>
			</function>
			<function line="688" name="GetBlockId">
				<summary>function Entity:GetBlockId()

				</summary>
			</function>
			<function line="693" name="GetCommandTable">
				<summary>function Entity:GetCommandTable()
return a table array containing all commands or comments. 
				</summary>
			</function>
			<function line="706" name="SetCommandTable">
				<summary>function Entity:SetCommandTable(commands)
set command table
				</summary>
				<parameter name="commands"/>
			</function>
			<function line="716" name="GetCommandList">
				<summary>function Entity:GetCommandList()
get latest command list. comments is empty line
it will cache last parsed result
				</summary>
			</function>
			<function line="729" name="HasCommand">
				<summary>function Entity:HasCommand()
bool: whether has command panel
				</summary>
			</function>
			<function line="734" name="GetCommandTitle">
				<summary>function Entity:GetCommandTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="738" name="HasRule">
				<summary>function Entity:HasRule()
bool: whether show the rule panel
				</summary>
			</function>
			<function line="743" name="GetRuleTitle">
				<summary>function Entity:GetRuleTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="748" name="ActivateCommands">
				<summary>function Entity:ActivateCommands(triggerEntity)
This function is called manually. Such as during OnActivated().
   @param triggerEntity: this is the triggering player or sometimes the entity itself if /activate self is used. 
				</summary>
				<parameter name="triggerEntity">this is the triggering player or sometimes the entity itself if /activate self is used. 
				</parameter>
			</function>
			<function line="768" name="ActivateRules">
				<summary>function Entity:ActivateRules()
this function is called automatically when this entity is activated. 
override this function to change behavior.
build, reload and activate all rules in the self.rulebag
				</summary>
			</function>
			<function line="785" name="HasBag">
				<summary>function Entity:HasBag()
bool: whether show the bag panel
				</summary>
			</function>
			<function line="790" name="GetBagTitle">
				<summary>function Entity:GetBagTitle()
the title text to display (can be mcml)
				</summary>
			</function>
			<function line="795" name="SetDisplayName">
				<summary>function Entity:SetDisplayName(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="799" name="GetDisplayName">
				<summary>function Entity:GetDisplayName()

				</summary>
			</function>
			<function line="804" name="SetName">
				<summary>function Entity:SetName(v)
internal name 
				</summary>
				<parameter name="v"/>
			</function>
			<function line="812" name="GetName">
				<summary>function Entity:GetName()

				</summary>
			</function>
			<function line="817" name="SetCommand">
				<summary>function Entity:SetCommand(cmd)
virtual function:
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="821" name="GetCommand">
				<summary>function Entity:GetCommand()

				</summary>
			</function>
			<function line="826" name="Refresh">
				<summary>function Entity:Refresh()
virtual function
				</summary>
			</function>
			<function line="830" name="CreateFromPool">
				<summary>function Entity:CreateFromPool()
static function: in the Destroy function, the entity are recollected
				</summary>
			</function>
			<function line="836" name="Create">
				<summary>function Entity:Create(o, xml_node)
factory class to create an instance of the entity 
				</summary>
				<parameter name="o"/>
				<parameter name="xml_node"/>
			</function>
			<function line="844" name="SetInnerObject">
				<summary>function Entity:SetInnerObject(obj)

				</summary>
				<parameter name="obj"/>
			</function>
			<function line="855" name="GetInnerObject">
				<summary>function Entity:GetInnerObject()
get the ParaObject from self.obj_id. 
performace optimized: since we will cache obj in self.obj on first call. 
and use ParaScene.CheckExist to check validity on subsequent calls, which is LuaJit optimized. 
thus calling this function each frame is fine. 
				</summary>
			</function>
			<function line="871" name="GetObjID">
				<summary>function Entity:GetObjID()

				</summary>
			</function>
			<function line="881" name="SetObjID">
				<summary>function Entity:SetObjID(id)
obsoleted, use SetInnerObject instead
				</summary>
				<parameter name="id"/>
			</function>
			<function line="887" name="GetOpacity">
				<summary>function Entity:GetOpacity()

				</summary>
			</function>
			<function line="891" name="SetOpacity">
				<summary>function Entity:SetOpacity(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="896" name="GetItemClass">
				<summary>function Entity:GetItemClass()
get the associated item class. 
				</summary>
			</function>
			<function line="903" name="GetBlock">
				<summary>function Entity:GetBlock()
get the associated block template class. 
				</summary>
			</function>
			<function line="913" name="SetDead">
				<summary>function Entity:SetDead()
set as dead and will be destroyed in the next framemove.
				</summary>
			</function>
			<function line="917" name="IsDead">
				<summary>function Entity:IsDead()

				</summary>
			</function>
			<function line="921" name="Destroy">
				<summary>function Entity:Destroy()

				</summary>
			</function>
			<function line="933" name="Detach">
				<summary>function Entity:Detach()
detach from entity manager
				</summary>
			</function>
			<function line="948" name="OnAddEntity">
				<summary>function Entity:OnAddEntity()

				</summary>
			</function>
			<function line="951" name="GetWorldServer">
				<summary>function Entity:GetWorldServer()

				</summary>
			</function>
			<function line="960" name="Say">
				<summary>function Entity:Say(text, duration, bAbove3D)
let the entity say something on top of its head for some seconds.
   @param text: text to show
   @param duration: in seconds. default to 4
   @param bAbove3D: default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. 
return true if we actually said something, otherwise nil.
				</summary>
				<parameter name="text">text to show
				</parameter>
				<parameter name="duration">in seconds. default to 4
				</parameter>
				<parameter name="bAbove3D">default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. 
return true if we actually said something, otherwise nil.
				</parameter>
			</function>
			<function line="975" name="Attach">
				<summary>function Entity:Attach()
attach to entity manager
				</summary>
			</function>
			<function line="985" name="canPlaceBlockAt">
				<summary>function Entity:canPlaceBlockAt(x,y,z, block)
virtual function: whether we can place a block where this entity stands in. 
in most cases, this is false, unless the entity is wise enough to move around to other free spaces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block"/>
			</function>
			<function line="990" name="OnBlockEvent">
				<summary>function Entity:OnBlockEvent(x,y,z, event_id, event_param)
when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="994" name="SetScaling">
				<summary>function Entity:SetScaling(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1002" name="GetScaling">
				<summary>function Entity:GetScaling(v)

				</summary>
				<parameter name="v"/>
			</function>
			<function line="1011" name="SetScalingDelta">
				<summary>function Entity:SetScalingDelta(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1016" name="SetFacingDelta">
				<summary>function Entity:SetFacingDelta(v)
virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1020" name="SetFacing">
				<summary>function Entity:SetFacing(facing)	
set facing of the lower object. 
				</summary>
				<parameter name="facing"/>
			</function>
			<function line="1028" name="GetFacing">
				<summary>function Entity:GetFacing()	

				</summary>
			</function>
			<function line="1033" name="PlaySound">
				<summary>function Entity:PlaySound(sound_name)

				</summary>
				<parameter name="sound_name"/>
			</function>
			<function line="1036" name="IsServerEntity">
				<summary>function Entity:IsServerEntity()

				</summary>
			</function>
			<function line="1041" name="OpenEditor">
				<summary>function Entity:OpenEditor(editor_name, entity)
virtual function: right click to edit. 
				</summary>
				<parameter name="editor_name"/>
				<parameter name="entity"/>
			</function>
			<function line="1058" name="UpdateBlockContainer">
				<summary>function Entity:UpdateBlockContainer()

				</summary>
			</function>
			<function line="1085" name="GetBlockPos">
				<summary>function Entity:GetBlockPos()

   @return bx, by, bz in block world. 
				</summary>
				<returns>return , by, bz in block world. 
				</returns>
			</function>
			<function line="1092" name="doesEntityTriggerPressurePlate">
				<summary>function Entity:doesEntityTriggerPressurePlate()

				</summary>
			</function>
			<function line="1097" name="SetBlockPos">
				<summary>function Entity:SetBlockPos(bx, by, bz)
update block position according to the associated object. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1118" name="GetDistanceSq">
				<summary>function Entity:GetDistanceSq(x,y,z)

   @sa DistanceSqTo() for block pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1125" name="SetLocationAndAngles">
				<summary>function Entity:SetLocationAndAngles(x,y,z, yaw, pitch)
Sets the location and Yaw/Pitch of an entity in the world. It will teleport the player at the exact location.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1135" name="SetPositionAndRotation">
				<summary>function Entity:SetPositionAndRotation(x,y,z,yaw, pitch)
Sets the entity's position and rotation. But it does not change last tick position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1140" name="SetRotation">
				<summary>function Entity:SetRotation(facing, pitch)

				</summary>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
			<function line="1148" name="SetPositionAndRotation2">
				<summary>function Entity:SetPositionAndRotation2(x,y,z,yaw, pitch, posRotIncrements)
Sets the entity's position and rotation. it will correct y so it will snap to ground.
   @param posRotIncrements: smoothed frames. we will move to x,y,z in this number of ticks. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
				<parameter name="posRotIncrements">smoothed frames. we will move to x,y,z in this number of ticks. 
				</parameter>
			</function>
			<function line="1155" name="SetPosition">
				<summary>function Entity:SetPosition(x, y, z)
set real world position for the object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1178" name="getPosition">
				<summary>function Entity:getPosition()

   @return a clone of {x,y,z}
				</summary>
				<returns>return clone of {x,y,z}
				</returns>
			</function>
			<function line="1183" name="setPosition">
				<summary>function Entity:setPosition(pos)

   @param pos: {x,y,z}
				</summary>
				<parameter name="pos">{x,y,z}
				</parameter>
			</function>
			<function line="1191" name="GetPosition">
				<summary>function Entity:GetPosition()
virtual function: Get real world position. if not exist, we will convert from block position. 
				</summary>
			</function>
			<function line="1204" name="GetNextPosition">
				<summary>function Entity:GetNextPosition(deltaTime)
get next position using its current speed with deltaTime
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1217" name="DistanceSqTo">
				<summary>function Entity:DistanceSqTo(x,y,z)
get block world distance to the give block position.
   @sa GetDistanceSq() for real pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1223" name="GetPickingDist">
				<summary>function Entity:GetPickingDist()
get the picking distance of this entity. 
				</summary>
			</function>
			<function line="1228" name="UpdateRotation">
				<summary>function Entity:UpdateRotation()
virtual function: only used by EntityPlayer to update Yaw,pitch from player controlled object. 
				</summary>
			</function>
			<function line="1235" name="UpdatePosition">
				<summary>function Entity:UpdatePosition(x,y,z)
virtual function: only used by EntityPlayer to update block position from player controlled object. 
do not call this if object is controlled completely from scripting interface.
   @param x,y,z: if nil, we will use the inner object's real position(NOT block position)
   @return inner object if x, y, z is not specified. 
				</summary>
				<parameter name="x">,y,z: if nil, we will use the inner object's real position(NOT block position)
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return object if x, y, z is not specified. 
				</returns>
			</function>
			<function line="1264" name="ApplyEntityCollision">
				<summary>function Entity:ApplyEntityCollision(fromEntity, deltaTime)
Applies a velocity to each of the entities pushing them away from each other. 
				</summary>
				<parameter name="fromEntity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1297" name="CanPushBlock">
				<summary>function Entity:CanPushBlock()
whether this entity can push block
				</summary>
			</function>
			<function line="1302" name="CanBePushedBy">
				<summary>function Entity:CanBePushedBy(fromEntity)
Returns true if this entity should push and be pushed by other entities when colliding.
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1307" name="CanBeCollidedWith">
				<summary>function Entity:CanBeCollidedWith()
Returns true if other Entities should be prevented from moving through this Entity.
				</summary>
			</function>
			<function line="1312" name="CanBeMounted">
				<summary>function Entity:CanBeMounted()
return true if this entity can be ridden by a player. 
				</summary>
			</function>
			<function line="1317" name="CollideWithEntity">
				<summary>function Entity:CollideWithEntity(fromEntity)
this function is called when this entity collide with another entity. 
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1320" name="GetPhysicsRadius">
				<summary>function Entity:GetPhysicsRadius()

				</summary>
			</function>
			<function line="1324" name="GetPhysicsHeight">
				<summary>function Entity:GetPhysicsHeight()

				</summary>
			</function>
			<function line="1329" name="GetCollisionAABB">
				<summary>function Entity:GetCollisionAABB()
in real world coordinates
				</summary>
			</function>
			<function line="1346" name="CheckGetCollisionBox">
				<summary>function Entity:CheckGetCollisionBox(entity)
returns a boundingBox used to collide the entity with other entities and blocks. 
This enables the entity to be pushable on contact
   @param entity: the entity to check against
				</summary>
				<parameter name="entity">the entity to check against
				</parameter>
			</function>
			<function line="1352" name="PushOutOfBlocks">
				<summary>function Entity:PushOutOfBlocks(x,y,z)
Adds velocity to push the entity out of blocks at the specified x, y, z position
   @return true if successfully pushed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return if successfully pushed
				</returns>
			</function>
			<function line="1388" name="CheckCollision">
				<summary>function Entity:CheckCollision(deltaTime)
virtual function: check if the entity collide with other entity or block. if so, we will fire event and adjust position.
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1431" name="CanMoveTo">
				<summary>function Entity:CanMoveTo(x,y,z)
whether the entity can move to the given side relative to its current location. 
it will automatically climb over one block height unless it is a fence
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1454" name="GetItemId">
				<summary>function Entity:GetItemId()

				</summary>
			</function>
			<function line="1458" name="GetItemClass">
				<summary>function Entity:GetItemClass()

				</summary>
			</function>
			<function line="1465" name="FallDown">
				<summary>function Entity:FallDown(deltaTime)
falls down immediately one block if not obstruction below. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1490" name="GetLifeTime">
				<summary>function Entity:GetLifeTime()
get the number of seconds left before the entity is dead. 
if return nil, the object has infinite life span. 
				</summary>
			</function>
			<function line="1496" name="SetLifeTime">
				<summary>function Entity:SetLifeTime(lifetime)
set the number of seconds left before the entity is dead. 
if return nil, the object has infinite life span. 
				</summary>
				<parameter name="lifetime"/>
			</function>
			<function line="1501" name="CreatePhysicsObject">
				<summary>function Entity:CreatePhysicsObject()
virtual function: overwrite to customize physical object
				</summary>
			</function>
			<function line="1506" name="GetPhysicsObject">
				<summary>function Entity:GetPhysicsObject()
create get physics object. 
				</summary>
			</function>
			<function line="1518" name="HasSpeed">
				<summary>function Entity:HasSpeed()
whether has speed
				</summary>
			</function>
			<function line="1522" name="HasMotion">
				<summary>function Entity:HasMotion()

				</summary>
			</function>
			<function line="1526" name="IsOnGround">
				<summary>function Entity:IsOnGround()

				</summary>
			</function>
			<function line="1538" name="IsTick">
				<summary>function Entity:IsTick(func_name, deltaTime, intervalSeconds)
check to see if we should tick. For example, some function may be called with deltaTime in 30fps, 
however, we only want to process at 20FPS, such as physics, we can use this function is easily limit function calling rate.
   @param func_name: default to "FrameMove". this can be any string.
   @param deltaTime: delta time in seconds, since last call
   @param intervalSeconds: default to 1/20
				</summary>
				<parameter name="func_name">default to "FrameMove". this can be any string.
				</parameter>
				<parameter name="deltaTime">delta time in seconds, since last call
				</parameter>
				<parameter name="intervalSeconds">default to 1/20
				</parameter>
			</function>
			<function line="1548" name="AddVelocity">
				<summary>function Entity:AddVelocity(x,y,z)
Adds to the current velocity of the entity.
   @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1558" name="SetVelocity">
				<summary>function Entity:SetVelocity(x,y,z)
Set current velocity of the entity.
   @param x,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1577" name="AddMotion">
				<summary>function Entity:AddMotion(dx,dy,dz)
Adds to the current motion of the entity.
   @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="1588" name="GetVelocity">
				<summary>function Entity:GetVelocity()
return x,y,z
				</summary>
			</function>
			<function line="1598" name="MoveEntity">
				<summary>function Entity:MoveEntity(deltaTime, bTryMove)
derived class can call this function to move the entity using its current speed.
   @param bTryMove: if true, we will always try move the entity even it does not have speed. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="bTryMove">if true, we will always try move the entity even it does not have speed. 
				</parameter>
			</function>
			<function line="1613" name="SetFrameMoveInterval">
				<summary>function Entity:SetFrameMoveInterval(framemove_interval)
set frame move interval
				</summary>
				<parameter name="framemove_interval"/>
			</function>
			<function line="1623" name="IsBlockEntity">
				<summary>function Entity:IsBlockEntity()

				</summary>
			</function>
			<function line="1628" name="GetDescriptionPacket">
				<summary>function Entity:GetDescriptionPacket()
Overriden in a sign to provide the text.
				</summary>
			</function>
			<function line="1632" name="OnUpdateFromPacket">
				<summary>function Entity:OnUpdateFromPacket(packet_UpdateEntitySign)

				</summary>
				<parameter name="packet_UpdateEntitySign"/>
			</function>
			<function line="1636" name="SetTickRate">
				<summary>function Entity:SetTickRate(tickRate)
how many framemove per seconds
				</summary>
				<parameter name="tickRate"/>
			</function>
			<function line="1642" name="SetAlwaysSentient">
				<summary>function Entity:SetAlwaysSentient(bSentient)
this will cause this entity to become always sentent. 
				</summary>
				<parameter name="bSentient"/>
			</function>
			<function line="1653" name="IsAlwaysSentient">
				<summary>function Entity:IsAlwaysSentient()

				</summary>
			</function>
			<function line="1658" name="GetTickRateInterval">
				<summary>function Entity:GetTickRateInterval()
1/tickRate
				</summary>
			</function>
			<function line="1667" name="CheckFrameMove">
				<summary>function Entity:CheckFrameMove(deltaTime, curTime, bForceFrameMove)
return true if EntityMob.framemove_interval is not nil and ready to frame move.
   @param deltaTime in seconds
   @param bForceFrameMove: if nil we will only check but does not do the framemove. If true, we will not check but do the framemove
true to run the framemove and increase the local time.
   @return nil or deltaTimeReal in seconds.
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="curTime"/>
				<parameter name="bForceFrameMove">if nil we will only check but does not do the framemove. If true, we will not check but do the framemove
true to run the framemove and increase the local time.
				</parameter>
				<returns>return or deltaTimeReal in seconds.
				</returns>
			</function>
			<function line="1704" name="GetTimeEvent">
				<summary>function Entity:GetTimeEvent()
continue;
time event list
				</summary>
			</function>
			<function line="1713" name="AddTimeEvent">
				<summary>function Entity:AddTimeEvent(scheduledTime, name, callbackFunc)
add a timed event to this entity
   @param callbackFunc: function(entity, timedEvent)
				</summary>
				<parameter name="scheduledTime"/>
				<parameter name="name"/>
				<parameter name="callbackFunc">function(entity, timedEvent)
				</parameter>
			</function>
			<function line="1746" name="GetSentientRadius">
				<summary>function Entity:GetSentientRadius()
radius (in blocks) that this entity will awake nearby entities. 
please note, it will only awake other entity if the distance between the two entities is the smaller 
than the smallest value of either entity's GetSentientChunkRadius().
   @return default value is 128
				</summary>
				<returns>return value is 128
				</returns>
			</function>
			<function line="1753" name="AdvanceTime">
				<summary>function Entity:AdvanceTime(delta_time)
advance time and fire all timed event that is smaller than current time. 
return true if there is still time event left.
   @param delta_time: if nil we will advance to next time event. In seconds
				</summary>
				<parameter name="delta_time">if nil we will advance to next time event. In seconds
				</parameter>
			</function>
			<function line="1789" name="IsInputDisabled">
				<summary>function Entity:IsInputDisabled()
whether the entity can receive activation or user input. 
				</summary>
			</function>
			<function line="1795" name="DisableInput">
				<summary>function Entity:DisableInput(bDisabled)
make the entity dummy, it will not respond to any activate command or user input, 
unless it is set to not dummy by command line. /disableinput false
				</summary>
				<parameter name="bDisabled"/>
			</function>
			<function line="1800" name="Pause">
				<summary>function Entity:Pause()
pause any scheduled time event 
				</summary>
			</function>
			<function line="1804" name="IsPaused">
				<summary>function Entity:IsPaused()

				</summary>
			</function>
			<function line="1808" name="Resume">
				<summary>function Entity:Resume()

				</summary>
			</function>
			<function line="1814" name="ClearTimeEvent">
				<summary>function Entity:ClearTimeEvent()
clear all time events in this entity
				</summary>
			</function>
			<function line="1824" name="SetTime">
				<summary>function Entity:SetTime(time)
set local time of this entity. this is only used in animated entity or entity with timed event. 
in seconds. 
				</summary>
				<parameter name="time"/>
			</function>
			<function line="1829" name="GetTime">
				<summary>function Entity:GetTime()
get local time of this entity. in seconds 
				</summary>
			</function>
			<function line="1834" name="SetTimeToNextEvent">
				<summary>function Entity:SetTimeToNextEvent()
set local time of this entity to the next time event in the queue.
				</summary>
			</function>
			<function line="1850" name="SetCharacterSlot">
				<summary>function Entity:SetCharacterSlot(slot_id, item_id)
set the character slot
				</summary>
				<parameter name="slot_id"/>
				<parameter name="item_id"/>
			</function>
			<function line="1858" name="IsControlledExternally">
				<summary>function Entity:IsControlledExternally()

				</summary>
			</function>
			<function line="1865" name="SetControlledExternally">
				<summary>function Entity:SetControlledExternally(bEnable)

				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="1872" name="GetMainAssetPath">
				<summary>function Entity:GetMainAssetPath()

				</summary>
			</function>
			<function line="1886" name="SetMainAssetPath">
				<summary>function Entity:SetMainAssetPath(name)
set main model
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1893" name="GetBoundRadius">
				<summary>function Entity:GetBoundRadius()

				</summary>
			</function>
			<function line="1903" name="SetSurfaceDecay">
				<summary>function Entity:SetSurfaceDecay(surface_decay)
set speed decay. percentage of motion lost per tick.
   @param surface_decay:  [0,1]. 0 means no speed lost, 1 will lost all speed.  default to 0.5
				</summary>
				<parameter name="surface_decay">[0,1]. 0 means no speed lost, 1 will lost all speed.  default to 0.5
				</parameter>
			</function>
			<function line="1907" name="GetSurfaceDecay">
				<summary>function Entity:GetSurfaceDecay()

				</summary>
			</function>
			<function line="1913" name="BeginEdit">
				<summary>function Entity:BeginEdit()
called when ever an editor like EditEntityPage is opened for this entity
if one wants to provide some basic undo/redo function, this is the place to go.
				</summary>
			</function>
			<function line="1921" name="EndEdit">
				<summary>function Entity:EndEdit()
called when ever an editor like EditEntityPage is closed for this entity
if one wants to provide some basic undo/redo function, this is the place to go.
one may also refresh the entity if any changes take place that is not updated automatically. 
				</summary>
			</function>
			<function line="1928" name="MarkForUpdate">
				<summary>function Entity:MarkForUpdate()
mark for update so that local changes are sent to client or server
				</summary>
			</function>
			<function line="1936" name="PickItem">
				<summary>function Entity:PickItem(itemStack, fromBlockX, fromBlockY, fromBlockZ)
pick the given item.
   @param fromBlockX, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromBlockX">, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</parameter>
				<parameter name="fromBlockY"/>
				<parameter name="fromBlockZ"/>
			</function>
			<function line="1956" name="SetRuleBagSize">
				<summary>function Entity:SetRuleBagSize(size)
create the rule bag if not exist.
   @param size: if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</summary>
				<parameter name="size">if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</parameter>
			</function>
			<function line="1968" name="FrameMoveRules">
				<summary>function Entity:FrameMoveRules(deltaTime)
virtual function: load rules and framemove rule items. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1980" name="FrameMove">
				<summary>function Entity:FrameMove(deltaTime)
virtual function: called every frame
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1994" name="NotifyBlockCollisions">
				<summary>function Entity:NotifyBlockCollisions()

				</summary>
			</function>
			<function line="2027" name="OnFallDown">
				<summary>function Entity:OnFallDown(distFallen)
virtual: Called when the entity has just fallen to ground. Calculates and applies fall damage.
   @param distFallen: distance fallen. 
				</summary>
				<parameter name="distFallen">distance fallen. 
				</parameter>
			</function>
			<function line="2034" name="IsEntityInvulnerable">
				<summary>function Entity:IsEntityInvulnerable()
Return whether this entity is invulnerable to damage.
				</summary>
			</function>
			<function line="2039" name="SetBeenAttacked">
				<summary>function Entity:SetBeenAttacked()
Sets that this entity has been attacked.
				</summary>
			</function>
			<function line="2046" name="AttackEntityFrom">
				<summary>function Entity:AttackEntityFrom(damageSource, amount)
Called when the entity is attacked.
   @param damageSource: what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.
   @param amount: such as 1. 
				</summary>
				<parameter name="damageSource">what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.
				</parameter>
				<parameter name="amount">such as 1. 
				</parameter>
			</function>
			<function line="2057" name="EntityDropItem">
				<summary>function Entity:EntityDropItem(itemStack, fOffsetY)
Drops an item at the position of the entity.
   @return the EntityItem
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fOffsetY"/>
				<returns>return EntityItem
				</returns>
			</function>
			<function line="2072" name="UpdateFallState">
				<summary>function Entity:UpdateFallState(distanceFallenThisTick, bIsOnGround)
Drops an item at the position of the entity.
   @return the EntityItem
Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
   @param distanceFallenThisTick
   @param bIsOnGround
				</summary>
				<parameter name="distanceFallenThisTick">
				</parameter>
				<parameter name="bIsOnGround">
				</parameter>
				<returns>return EntityItem
Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance
and deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
				</returns>
			</function>
			<function line="2083" name="IsSneaking">
				<summary>function Entity:IsSneaking()

				</summary>
			</function>
			<function line="2087" name="SetSneaking">
				<summary>function Entity:SetSneaking(bSneaking)

				</summary>
				<parameter name="bSneaking"/>
			</function>
			<function line="2095" name="MoveEntityByDisplacement">
				<summary>function Entity:MoveEntityByDisplacement(dx,dy,dz)
Tries to moves the entity by the passed in displacement. 
this function is usually used by entities which need to process physics all by itself 
(instead of relying on physicsObj or default low level c++).
   @param dx, dy, dz: dispacement
				</summary>
				<parameter name="dx">, dy, dz: dispacement
				</parameter>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="2244" name="GetMountedYOffset">
				<summary>function Entity:GetMountedYOffset()

				</summary>
			</function>
			<function line="2250" name="FrameMoveRidding">
				<summary>function Entity:FrameMoveRidding(deltaTime)
framemove this entity when it is riding (mounted) on another entity. 
we will update according to mounted entity's position. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2297" name="GetRidingOffsetY">
				<summary>function Entity:GetRidingOffsetY()

				</summary>
			</function>
			<function line="2301" name="UpdateRiderPosition">
				<summary>function Entity:UpdateRiderPosition()

				</summary>
			</function>
			<function line="2310" name="MountEntity">
				<summary>function Entity:MountEntity(targetEntity)
mount current entity to the target entity.
   @param targetEntity: nil to unmount
				</summary>
				<parameter name="targetEntity">nil to unmount
				</parameter>
			</function>
			<function line="2332" name="HasChanges">
				<summary>function Entity:HasChanges()
whether any trackable data is modified 
				</summary>
			</function>
			<function line="2337" name="SetChanged">
				<summary>function Entity:SetChanged(bChanged)
set changes
				</summary>
				<parameter name="bChanged"/>
			</function>
			<function line="2341" name="GetRotationYaw">
				<summary>function Entity:GetRotationYaw()

				</summary>
			</function>
			<function line="2345" name="GetRotationPitch">
				<summary>function Entity:GetRotationPitch()

				</summary>
			</function>
			<function line="2350" name="GetRotationYawHead">
				<summary>function Entity:GetRotationYawHead()

				</summary>
			</function>
			<function line="2355" name="SetRotationYawHead">
				<summary>function Entity:SetRotationYawHead(value)
Sets the head's yaw rotation of the entity.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="2362" name="GetDataWatcher">
				<summary>function Entity:GetDataWatcher(bCreateIfNotExist)
data in watcher are auto synced among clients by the server, without server validation. 
data in data watcher can be freely modified by both client and server, such as animation, skin, etc.
   @NOTE: do NOT put server-critical data here, use inventory for server verified data.
				</summary>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="2372" name="IsRiding">
				<summary>function Entity:IsRiding()
Returns true if the entity is riding another entity
				</summary>
			</function>
			<function line="2389" name="BeginTouchMove">
				<summary>function Entity:BeginTouchMove()
examples: 
local EntityManager = commonlib.gettable("MyCompany.Aries.Game.EntityManager");
local player = EntityManager.GetPlayer();
player:BeginTouchMove();
player:TouchMove(0);
local mytimer = commonlib.Timer:new({callbackFunc = function(timer)
	player:EndTouchMove();
end})
-- walk 1 seconds
mytimer:Change(1000, nil)
begin touch move towards a given position. 
				</summary>
			</function>
			<function line="2398" name="TouchMove">
				<summary>function Entity:TouchMove(screen_facing)
move according to a facing angle in screen space relative to current camera view. 
call this function between BeginTouchMove() and EndTouchMove(). 
Please note, it will walk forever until EndTouchMove() is called.
   @param screen_facing: [0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</summary>
				<parameter name="screen_facing">[0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</parameter>
			</function>
			<function line="2409" name="EndTouchMove">
				<summary>function Entity:EndTouchMove()
end touch move towards a given position. 
				</summary>
			</function>
			<function line="2422" name="GetNewItemsList">
				<summary>function Entity:GetNewItemsList()
virtual function: get array of item stacks that will be displayed to the user when user try to create a new item.
   @return nil or array of item stack.
				</summary>
				<returns>return or array of item stack.
				</returns>
			</function>
			<function line="2428" name="CreateItemOnSlot">
				<summary>function Entity:CreateItemOnSlot(slot)

   @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
			<function line="2448" name="OnClickEmptySlot">
				<summary>function Entity:OnClickEmptySlot(slot)
called when user click to create a new item in the slot
   @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
		</table>
		<table name="ItemClient" src="script/apps/Aries/Creator/Game/Items/ItemClient.lua">
			<function line="38" name="PreloadItemClass">
				<summary>function ItemClient.PreloadItemClass()
add new preloaded item class here. 
				</summary>
			</function>
			<function line="71" name="OnInit">
				<summary>function ItemClient.OnInit()

				</summary>
			</function>
			<function line="86" name="RegisterItemClass">
				<summary>function ItemClient.RegisterItemClass(name, class)
register a new class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="91" name="LoadFromCurrentWorld">
				<summary>function ItemClient.LoadFromCurrentWorld()
load both official block list as well as custom user defined block list. 
				</summary>
			</function>
			<function line="97" name="LoadGlobalBlockList">
				<summary>function ItemClient.LoadGlobalBlockList()
private: only load once the official block list. 
				</summary>
			</function>
			<function line="165" name="SaveToCurrentWorld">
				<summary>function ItemClient.SaveToCurrentWorld()

				</summary>
			</function>
			<function line="172" name="AddBlock">
				<summary>function ItemClient.AddBlock(block_id, index, category_name)
add a block at the given index.
   @param index: if nil, it will be added to last block.
   @param category_name: default to "static"
				</summary>
				<parameter name="block_id"/>
				<parameter name="index">if nil, it will be added to last block.
				</parameter>
				<parameter name="category_name">default to "static"
				</parameter>
			</function>
			<function line="186" name="SearchBlocks">
				<summary>function ItemClient.SearchBlocks(block_id_or_name, category_name, ds)
search a given block
   @return a table containing all matching blocks
				</summary>
				<parameter name="block_id_or_name"/>
				<parameter name="category_name"/>
				<parameter name="ds"/>
				<returns>return table containing all matching blocks
				</returns>
			</function>
			<function line="231" name="GetBlockDS">
				<summary>function ItemClient.GetBlockDS(category_name)
get data source by category name
				</summary>
				<parameter name="category_name"/>
			</function>
			<function line="244" name="GetItemCount">
				<summary>function ItemClient.GetItemCount(block_id)

				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="248" name="SetItemCount">
				<summary>function ItemClient.SetItemCount(block_id, count, diff_count)

				</summary>
				<parameter name="block_id"/>
				<parameter name="count"/>
				<parameter name="diff_count"/>
			</function>
			<function line="258" name="AddItem">
				<summary>function ItemClient.AddItem(block_id, item)
add item
				</summary>
				<parameter name="block_id"/>
				<parameter name="item"/>
			</function>
			<function line="279" name="GetItem">
				<summary>function ItemClient.GetItem(block_id)
get item by id
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="283" name="GetItemByName">
				<summary>function ItemClient.GetItemByName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="293" name="CreateGetByBlockID">
				<summary>function ItemClient.CreateGetByBlockID(block_id, item_class)
create get an item by block id. 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="302" name="CreateByBlockID">
				<summary>function ItemClient.CreateByBlockID(block_id, item_class)
create and overwrite 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="321" name="OnLeaveWorld">
				<summary>function ItemClient.OnLeaveWorld()

				</summary>
			</function>
			<function line="347" name="LoadCustomBlocks">
				<summary>function ItemClient.LoadCustomBlocks()
custom block is used defined blocks in the current world directory. 
				</summary>
			</function>
			<function line="374" name="SaveCustomBlocks">
				<summary>function ItemClient.SaveCustomBlocks()
custom block is used defined blocks in the current world directory. 
				</summary>
			</function>
			<function line="393" name="GetNextCustomBlockId">
				<summary>function ItemClient.GetNextCustomBlockId()
next custom block id
				</summary>
			</function>
			<function line="404" name="GetCustomBlockByTexture">
				<summary>function ItemClient.GetCustomBlockByTexture(filename)
return item or nil by texture filename. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="412" name="UnRegisterCustomItem">
				<summary>function ItemClient.UnRegisterCustomItem(block_id)

				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="418" name="RegisterCustomItem">
				<summary>function ItemClient.RegisterCustomItem(params)

   @param params: a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}
if params.id is not specified, we will generate an unused id instead.
please note the same texture filename will always generate the same id. 
				</summary>
				<parameter name="params">a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}
if params.id is not specified, we will generate an unused id instead.
please note the same texture filename will always generate the same id. 
				</parameter>
			</function>
		</table>
		<table name="Item" src="script/apps/Aries/Creator/Game/Items/Item.lua">
			<function line="57" name="ctor">
				<summary>function Item:ctor()

   @param template: icon
   @param icon:
   @param block_id:
				</summary>
			</function>
			<function line="64" name="GetMaxCount">
				<summary>function Item:GetMaxCount()

				</summary>
			</function>
			<function line="69" name="GetBlock">
				<summary>function Item:GetBlock()
get block template. 
				</summary>
			</function>
			<function line="75" name="OnItemRightClick">
				<summary>function Item:OnItemRightClick(itemStack, entityPlayer)
Called whenever this item is equipped and the right mouse button is pressed.
   @return itemStack, hasHandled:  the new item stack to put in the position. hasHandled is true if handled. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
				<returns>return , hasHandled:  the new item stack to put in the position. hasHandled is true if handled. 
				</returns>
			</function>
			<function line="80" name="OnLeaveWorld">
				<summary>function Item:OnLeaveWorld()
virtual function, called when world is closed. 
				</summary>
			</function>
			<function line="85" name="OnClickInHand">
				<summary>function Item:OnClickInHand(itemStack, entityPlayer)
called whenever this item is clicked on the user interface when it is holding in hand of a given player (current player). 
by default, if there is selected blocks, we will replace selection with current block in hand. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
			</function>
			<function line="99" name="OnClick">
				<summary>function Item:OnClick()
click from user interface
				</summary>
			</function>
			<function line="125" name="OnActivate">
				<summary>function Item:OnActivate(itemStack, entityContainer, entityTrigger)
called when this function is activated when the entity is activated. 
it will return false when the last trigger entity's inventory has more than itemStack.count items.
   @param itemStack: the containing itemStack
   @param entity: this is usually a command block or entity that contains this entity.
   @param entityPlayer: the triggering entity
   @return false if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="itemStack">the containing itemStack
				</parameter>
				<parameter name="entityContainer"/>
				<parameter name="entityTrigger"/>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="136" name="handleEntityEvent">
				<summary>function Item:handleEntityEvent(itemStack, entity, event)
called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="140" name="CanSpawn">
				<summary>function Item:CanSpawn()
whether the item can be spawned using spawn command. 
				</summary>
			</function>
			<function line="147" name="CanCreateItemAt">
				<summary>function Item:CanCreateItemAt(x,y,z)
whether we can create item at given block position.
only basic check is performed. such as:  
we allow any block(except liquid) to create on empty or liquid block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="156" name="GetMaxDamage">
				<summary>function Item:GetMaxDamage()
max durability. nil for infinite (not damagable). 
				</summary>
			</function>
			<function line="161" name="CanItemEditBlocks">
				<summary>function Item:CanItemEditBlocks()
Returns true if players can use this item to affect the world (e.g. placing blocks, placing ender eyes in portal)
				</summary>
			</function>
			<function line="166" name="OnUseItem">
				<summary>function Item:OnUseItem(itemStack, fromEntity)
called when this item is used and deal 2 damage to the item's durability. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="175" name="CanPlaceOnSide">
				<summary>function Item:CanPlaceOnSide(x,y,z,side, data, side_region, entityPlayer, itemStack)
Returns true if the given Entity can be placed on the given side of the given block position.
   @param x,y,z: this is the position where the block should be placed
   @param side: this is the OPPOSITE of the side of contact. 
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact. 
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<parameter name="entityPlayer"/>
				<parameter name="itemStack"/>
			</function>
			<function line="199" name="TryCreate">
				<summary>function Item:TryCreate(itemStack, entityPlayer, x,y,z, side, data, side_region)
Right clicking in 3d world with the block in hand will trigger this function. 
Alias: OnUseItem;
   @param itemStack: can be nil
   @param entityPlayer: can be nil
   @param side: this is OPPOSITE of the touching side
   @return isUsed, entityCreated: isUsed is true if something happens.
				</summary>
				<parameter name="itemStack">can be nil
				</parameter>
				<parameter name="entityPlayer">can be nil
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<returns>return , entityCreated: isUsed is true if something happens.
				</returns>
			</function>
			<function line="256" name="OnCreate">
				<summary>function Item:OnCreate(result)
virtual function:
   @param result: picking result. {block_id, blockX, blockY, blockZ}
   @return: return true if created
				</summary>
				<parameter name="result">picking result. {block_id, blockX, blockY, blockZ}
				</parameter>
				<returns>return return true if created
				</returns>
			</function>
			<function line="261" name="GetIconAtlas">
				<summary>function Item:GetIconAtlas()
static function
get Icon texture altas
				</summary>
			</function>
			<function line="273" name="GetIcon">
				<summary>function Item:GetIcon()

				</summary>
			</function>
			<function line="303" name="GetTexture">
				<summary>function Item:GetTexture()
get the primary texture file for this item. 
				</summary>
			</function>
			<function line="313" name="GetIconObject">
				<summary>function Item:GetIconObject()

   @return ParaAsset icon
				</summary>
				<returns>return icon
				</returns>
			</function>
			<function line="329" name="GetAssetFile">
				<summary>function Item:GetAssetFile()
get the primary asset file
				</summary>
			</function>
			<function line="338" name="GetSkinFile">
				<summary>function Item:GetSkinFile()
get skin 
				</summary>
			</function>
			<function line="346" name="GetTooltipFromItemStack">
				<summary>function Item:GetTooltipFromItemStack(itemStack)

				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="350" name="GetOffsetY">
				<summary>function Item:GetOffsetY()

				</summary>
			</function>
			<function line="359" name="GetScaling">
				<summary>function Item:GetScaling()

				</summary>
			</function>
			<function line="367" name="HasFacing">
				<summary>function Item:HasFacing()

				</summary>
			</function>
			<function line="370" name="GetTooltip">
				<summary>function Item:GetTooltip()

				</summary>
			</function>
			<function line="387" name="GetBlockData">
				<summary>function Item:GetBlockData(itemStack)
virtual function: try to get block date from itemStack. 
in most cases, this return nil
   @return nil or a number 
				</summary>
				<parameter name="itemStack"/>
				<returns>return or a number 
				</returns>
			</function>
			<function line="390" name="GetStatName">
				<summary>function Item:GetStatName()

				</summary>
			</function>
			<function line="395" name="GetSearchKey">
				<summary>function Item:GetSearchKey()
get a string containing search keys in lower case
				</summary>
			</function>
			<function line="409" name="GetDisplayName">
				<summary>function Item:GetDisplayName()

				</summary>
			</function>
			<function line="423" name="OnUse">
				<summary>function Item:OnUse()
virtual function: use the item. 
				</summary>
			</function>
			<function line="427" name="OnSelect">
				<summary>function Item:OnSelect()
virtual function: when selected in right hand
				</summary>
			</function>
			<function line="432" name="OnDeSelect">
				<summary>function Item:OnDeSelect()
virtual function: when deselected in right hand
				</summary>
			</function>
			<function line="437" name="OnLoadWorld">
				<summary>function Item:OnLoadWorld()
virtual function: called when loading world. 
				</summary>
			</function>
			<function line="445" name="UpdateInWorldCount">
				<summary>function Item:UpdateInWorldCount(nDiffCount, bIgnoreUpperConstraint)
update in world count
   @param bIgnoreUpperConstraint: true or nil to ignore self.max_count
   @return count the actual count diff. 
				</summary>
				<parameter name="nDiffCount"/>
				<parameter name="bIgnoreUpperConstraint">true or nil to ignore self.max_count
				</parameter>
				<returns>return the actual count diff. 
				</returns>
			</function>
			<function line="459" name="GetInWorldCount">
				<summary>function Item:GetInWorldCount()
get the number of items that is already used in the current world, such as collectables.
				</summary>
			</function>
			<function line="465" name="CreateBlockPieces">
				<summary>function Item:CreateBlockPieces(blockX, blockY, blockZ, granularity)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</parameter>
			</function>
			<function line="477" name="OnObtain">
				<summary>function Item:OnObtain()
called every frame
				</summary>
			</function>
			<function line="480" name="GetItemModel">
				<summary>function Item:GetItemModel()

				</summary>
			</function>
			<function line="488" name="GetItemModelScaling">
				<summary>function Item:GetItemModelScaling()
item scaling when hold in hand. 
				</summary>
			</function>
			<function line="498" name="GetItemModelInHandOffset">
				<summary>function Item:GetItemModelInHandOffset()
item offset when hold in hand.
   @return nil or {x,y,z}
				</summary>
				<returns>return or {x,y,z}
				</returns>
			</function>
			<function line="502" name="CreateItemModel">
				<summary>function Item:CreateItemModel(x,y,z, facing, scaling)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="facing"/>
				<parameter name="scaling"/>
			</function>
			<function line="507" name="setMouseTracking">
				<summary>function Item:setMouseTracking(enable)

				</summary>
				<parameter name="enable"/>
			</function>
			<function line="514" name="hasMouseTracking">
				<summary>function Item:hasMouseTracking()
if true, we will receive mouse move event even mouse down is not accepted by the item. 
if false, we will only receive mouse move event if mouse down is accepted. 
default to false. 
				</summary>
			</function>
			<function line="521" name="event">
				<summary>function Item:event(event)
called whenever an event comes. Subclass can overwrite this function.
   @param handlerName: "sizeEvent", "paintEvent", "mouseDownEvent", "mouseUpEvent", etc.
   @param event: the event object. 
				</summary>
				<parameter name="event">the event object. 
				</parameter>
			</function>
			<function line="529" name="mousePressEvent">
				<summary>function Item:mousePressEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="531" name="mouseMoveEvent">
				<summary>function Item:mouseMoveEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="533" name="mouseReleaseEvent">
				<summary>function Item:mouseReleaseEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="535" name="mouseWheelEvent">
				<summary>function Item:mouseWheelEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="537" name="keyReleaseEvent">
				<summary>function Item:keyReleaseEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="539" name="keyPressEvent">
				<summary>function Item:keyPressEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="544" name="PickItemFromPosition">
				<summary>function Item:PickItemFromPosition(x,y,z)
virtual:
when alt key is pressed to pick a block in edit mode. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="550" name="ConvertEntityToItem">
				<summary>function Item:ConvertEntityToItem(entity)
virtual: convert entity to item stack. 
such as when alt key is pressed to pick a entity in edit mode. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="558" name="CompareItems">
				<summary>function Item:CompareItems(left, right)
virtual:
compare two item stacks of the same item. 
return true if items are the same.
   @param left, right: type of ItemStack or nil. 
				</summary>
				<parameter name="left">, right: type of ItemStack or nil. 
				</parameter>
				<parameter name="right"/>
			</function>
			<function line="570" name="DrawIcon">
				<summary>function Item:DrawIcon(painter, width, height, itemStack)
virtual: draw icon with given size at current position (0,0)
this function is only called when IsOwnerDrawIcon property is true.
   @param width, height: size of the icon
   @param itemStack: this may be nil. or itemStack instance. 
				</summary>
				<parameter name="painter"/>
				<parameter name="width">, height: size of the icon
				</parameter>
				<parameter name="height"/>
				<parameter name="itemStack">this may be nil. or itemStack instance. 
				</parameter>
			</function>
		</table>
		<table name="ItemStack" src="script/apps/Aries/Creator/Game/Items/ItemStack.lua">
			<function line="32" name="ctor">
				<summary>function ItemStack:ctor()

   @param template: icon
   @param icon:
   @param block_id:
				</summary>
			</function>
			<function line="37" name="Init">
				<summary>function ItemStack:Init(id, count, serverdata)

   @param id: the underlying item id.
   @param serverdata: this should be xml node table or nil. 
				</summary>
				<parameter name="id">the underlying item id.
				</parameter>
				<parameter name="count"/>
				<parameter name="serverdata">this should be xml node table or nil. 
				</parameter>
			</function>
			<function line="44" name="GetItem">
				<summary>function ItemStack:GetItem()

				</summary>
			</function>
			<function line="49" name="GetData">
				<summary>function ItemStack:GetData()
get user data 
				</summary>
			</function>
			<function line="58" name="SetData">
				<summary>function ItemStack:SetData(data)
set user data 
				</summary>
				<parameter name="data"/>
			</function>
			<function line="71" name="GetScriptScope">
				<summary>function ItemStack:GetScriptScope()
create or get script scope
				</summary>
			</function>
			<function line="82" name="SetScript">
				<summary>function ItemStack:SetScript(filename)
set script and automatically reload if a different file is specified. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="98" name="SetCode">
				<summary>function ItemStack:SetCode(code)
set the raw code to run
				</summary>
				<parameter name="code"/>
			</function>
			<function line="114" name="RunCode">
				<summary>function ItemStack:RunCode(...)
run the entire script code again with given parameters. 
				</summary>
			</function>
			<function line="127" name="HasScript">
				<summary>function ItemStack:HasScript()
whether has script file or raw code
				</summary>
			</function>
			<function line="135" name="CheckLoadScript">
				<summary>function ItemStack:CheckLoadScript(bReload, bRunOnFirstLoad)
check load script code if any. It will only load on first call. Subsequent calls will be very fast. 
usually one do not need to call this function explicitly, unless one wants to preload or reload.
   @param bReload: default to nil.
   @param bRunOnFirstLoad: true to run on first load. if nil it means true
				</summary>
				<parameter name="bReload">default to nil.
				</parameter>
				<parameter name="bRunOnFirstLoad">true to run on first load. if nil it means true
				</parameter>
			</function>
			<function line="177" name="GetScriptFunction">
				<summary>function ItemStack:GetScriptFunction(func_name, bReload)
get script function if any.
   @param func_name: some known functions are "main"
   @return the function or nil is returned. 
				</summary>
				<parameter name="func_name">some known functions are "main"
				</parameter>
				<parameter name="bReload"/>
				<returns>return function or nil is returned. 
				</returns>
			</function>
			<function line="184" name="GetPosition">
				<summary>function ItemStack:GetPosition()

				</summary>
			</function>
			<function line="189" name="SetPosition">
				<summary>function ItemStack:SetPosition(x, y, z)
set block position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="195" name="ActivateScript">
				<summary>function ItemStack:ActivateScript(...)
activate script associated by SetScript() function.
   @param entity: the message to be passed to main function. 
				</summary>
			</function>
			<function line="211" name="OnActivate">
				<summary>function ItemStack:OnActivate(entityContainer, entityPlayer)
called when this function is activated when the entity is activated.
   @param entity: the container entity. this is usually a command block or entity.
   @param entityPlayer: the triggering entity
   @return true if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="entityContainer"/>
				<parameter name="entityPlayer">the triggering entity
				</parameter>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="219" name="handleEntityEvent">
				<summary>function ItemStack:handleEntityEvent(entity, event)
called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="227" name="LoadFromXMLNode">
				<summary>function ItemStack:LoadFromXMLNode(node)

				</summary>
				<parameter name="node"/>
			</function>
			<function line="242" name="SaveToXMLNode">
				<summary>function ItemStack:SaveToXMLNode(node)

				</summary>
				<parameter name="node"/>
			</function>
			<function line="269" name="SplitStack">
				<summary>function ItemStack:SplitStack(count)
Remove the count number of items from the stack. Return a new stack object with count size.
   @param count: if nil, it will be the total count. 
				</summary>
				<parameter name="count">if nil, it will be the total count. 
				</parameter>
			</function>
			<function line="282" name="GetMaxStackSize">
				<summary>function ItemStack:GetMaxStackSize()
returns max allowed size of the item.
				</summary>
			</function>
			<function line="291" name="IsStackable">
				<summary>function ItemStack:IsStackable()
if the ItemStack can hold 2 or more units of the item.
				</summary>
			</function>
			<function line="296" name="IsSameItem">
				<summary>function ItemStack:IsSameItem(itemStack)
return true if item is same, both id and serverdata mathes
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="308" name="Copy">
				<summary>function ItemStack:Copy()
return a copy of self. 
				</summary>
			</function>
			<function line="320" name="Swap">
				<summary>function ItemStack:Swap(itemStack)
swapping all content: id, count and data
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="329" name="GetIcon">
				<summary>function ItemStack:GetIcon()
get icon 
				</summary>
			</function>
			<function line="337" name="GetBlock">
				<summary>function ItemStack:GetBlock()
get block template. 
				</summary>
			</function>
			<function line="346" name="GetDataField">
				<summary>function ItemStack:GetDataField(fieldname)
get data field
   @param fieldname: "tooltip", "durability", etc
				</summary>
				<parameter name="fieldname">"tooltip", "durability", etc
				</parameter>
			</function>
			<function line="357" name="SetDataField">
				<summary>function ItemStack:SetDataField(fieldname, value)
set data field to be stored
   @param fieldname: "tooltip", "durability"
				</summary>
				<parameter name="fieldname">"tooltip", "durability"
				</parameter>
				<parameter name="value"/>
			</function>
			<function line="374" name="GetIconText">
				<summary>function ItemStack:GetIconText()
this is the text shown at the right bottom of the icon in pe:slot control. 
by default, this is count if bigger than 1, and "" if count is 1
if the displayname contains [XXX], text in square brackets will also be displayed. 
				</summary>
			</function>
			<function line="390" name="GetTooltip">
				<summary>function ItemStack:GetTooltip()
get tooltip
				</summary>
			</function>
			<function line="397" name="GetDisplayName">
				<summary>function ItemStack:GetDisplayName()

				</summary>
			</function>
			<function line="406" name="SetDisplayName">
				<summary>function ItemStack:SetDisplayName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="411" name="SetTooltip">
				<summary>function ItemStack:SetTooltip(value)
set user defined tooltip. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="417" name="SetDurability">
				<summary>function ItemStack:SetDurability(value)
durablity: do not call this function directly, call :AttemptDamageItem() instead. 
only call this function when you are setting an undurable item to become durable via command line, etc. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="422" name="GetDurability">
				<summary>function ItemStack:GetDurability()
nil means infinit.
				</summary>
			</function>
			<function line="434" name="IsItemStackDamageable">
				<summary>function ItemStack:IsItemStackDamageable()
true if this itemStack is damageable
				</summary>
			</function>
			<function line="442" name="IsItemDamaged">
				<summary>function ItemStack:IsItemDamaged()
returns true when a damageable item is damaged
				</summary>
			</function>
			<function line="447" name="GetMaxDamage">
				<summary>function ItemStack:GetMaxDamage()
Returns the max damage(durabilitt) an item in the stack can take.
				</summary>
			</function>
			<function line="457" name="AttemptDamageItem">
				<summary>function ItemStack:AttemptDamageItem(amount)
Attempts to damage the ItemStack with amount of damage. 
Returns true if it takes more damage than GetMaxDamage(). 
Returns false otherwise or if the ItemStack can't be damaged
				</summary>
				<parameter name="amount"/>
			</function>
			<function line="469" name="DamageItem">
				<summary>function ItemStack:DamageItem(amount, fromEntity)
Damages the item in the ItemStack
				</summary>
				<parameter name="amount"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="500" name="CanEditBlocks">
				<summary>function ItemStack:CanEditBlocks()

				</summary>
			</function>
			<function line="508" name="TryCreate">
				<summary>function ItemStack:TryCreate(entityPlayer, x,y,z, side, data, side_region)

   @param side: this is OPPOSITE of the touching side
				</summary>
				<parameter name="entityPlayer"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
			</function>
			<function line="521" name="OnItemRightClick">
				<summary>function ItemStack:OnItemRightClick(entityPlayer)
Called whenever this item is equipped and the right mouse button is pressed.
   @return the new item stack to put in the position.
				</summary>
				<parameter name="entityPlayer"/>
				<returns>return new item stack to put in the position.
				</returns>
			</function>
		</table>
		<table name="block_types" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="95" name="PreloadBlockClass">
				<summary>function block_types.PreloadBlockClass()
load known block type
				</summary>
			</function>
			<function line="145" name="init">
				<summary>function block_types.init()
block_types.register_basics
				</summary>
			</function>
			<function line="151" name="OnWorldLoaded">
				<summary>function block_types:OnWorldLoaded()
called when world is just loaded
				</summary>
			</function>
			<function line="160" name="RegisterBlockClass">
				<summary>function block_types.RegisterBlockClass(name, class)
register a new block class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="164" name="RegisterItemClass">
				<summary>function block_types.RegisterItemClass(name, class)

				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="169" name="GetBlockClass">
				<summary>function block_types.GetBlockClass(block_)
get block class
				</summary>
				<parameter name="block_"/>
			</function>
			<function line="179" name="GetItemClass">
				<summary>function block_types.GetItemClass(class_name)
get item class by name
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="184" name="IsAssociatedBlockID">
				<summary>function block_types.IsAssociatedBlockID(block_id1, block_id2)
such as the open door block and closed door block are associated. 
				</summary>
				<parameter name="block_id1"/>
				<parameter name="block_id2"/>
			</function>
			<function line="198" name="register_new_type">
				<summary>function block_types.register_new_type(block_, bCallRegister)
register a new block type. It will overwrite whatever is registered before.
   @param block_: the block template object or a pure table of {id, ...} which will be used to construct a block template object.
   @param bCallRegister: true to invoke the low level block registration with the game engine. 
				</summary>
				<parameter name="block_">the block template object or a pure table of {id, ...} which will be used to construct a block template object.
				</parameter>
				<parameter name="bCallRegister">true to invoke the low level block registration with the game engine. 
				</parameter>
			</function>
			<function line="217" name="create_get_type">
				<summary>function block_types.create_get_type(id, params_default)
create get the template params by template id.
				</summary>
				<parameter name="id"/>
				<parameter name="params_default"/>
			</function>
			<function line="226" name="GetAllBlocksWithTexture">
				<summary>function block_types.GetAllBlocksWithTexture(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="239" name="replace_texture">
				<summary>function block_types.replace_texture(id, filename, texture_index, bReplaceAllBlocks)
replace texture at runtime
   @param bReplaceAllBlocks: true to replace all blocks with the given texture filename.
				</summary>
				<parameter name="id"/>
				<parameter name="filename"/>
				<parameter name="texture_index"/>
				<parameter name="bReplaceAllBlocks">true to replace all blocks with the given texture filename.
				</parameter>
			</function>
			<function line="256" name="restore_texture_pack">
				<summary>function block_types.restore_texture_pack()
restore all textures to its default value. 
				</summary>
			</function>
			<function line="263" name="get">
				<summary>function block_types.get(id)
return a given block template
				</summary>
				<parameter name="id"/>
			</function>
			<function line="268" name="GetByNameOrID">
				<summary>function block_types.GetByNameOrID(id)

   @param id: string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</summary>
				<parameter name="id">string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</parameter>
			</function>
			<function line="284" name="GetTooltip">
				<summary>function block_types.GetTooltip(id)
return tooltip
				</summary>
				<parameter name="id"/>
			</function>
			<function line="372" name="add_mc_id">
				<summary>function block_types.add_mc_id(mc_id, block_id)

				</summary>
				<parameter name="mc_id"/>
				<parameter name="block_id"/>
			</function>
			<function line="393" name="LoadBlockTemplates">
				<summary>function block_types.LoadBlockTemplates(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="421" name="ApplyTemplate">
				<summary>function block_types.ApplyTemplate(name, dest_node, filename)
apply a given block template by name to the given xml node. 
				</summary>
				<parameter name="name"/>
				<parameter name="dest_node"/>
				<parameter name="filename"/>
			</function>
			<function line="454" name="LoadFromFile">
				<summary>function block_types.LoadFromFile(filename)
loading all block definition from file
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="619" name="register_basics">
				<summary>function block_types.register_basics()
basic types
				</summary>
			</function>
			<function line="632" name="GenerateFromDirFile">
				<summary>function block_types.GenerateFromDirFile(filename)
dev only function:
   @filename: type in cmd.exe "dir &gt;filename.txt" and then use this function. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="663" name="update_registered_templates">
				<summary>function block_types.update_registered_templates(blockWorld)
update the re-register all templates with the low level game engine.
   @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
		</table>
		<table name="block_model" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="295" name="ctor">
				<summary>function block_model:ctor()
------------------------
block_model class
------------------------
				</summary>
			</function>
			<function line="339" name="GetAssetObject">
				<summary>function block_model:GetAssetObject()
get the default asset object. 
				</summary>
			</function>
			<function line="346" name="NeedUpdateLayer">
				<summary>function block_model:NeedUpdateLayer(layer)
whether the model need to update layer one
whether the model need to update layer 1
				</summary>
				<parameter name="layer"/>
			</function>
			<function line="357" name="GetMainTextureFileName">
				<summary>function block_model:GetMainTextureFileName()
for breaking into pieces animation. 
				</summary>
			</function>
		</table>
		<table name="block" src="script/apps/Aries/Creator/Game/blocks/block.lua">
			<function line="85" name="ctor">
				<summary>function block:ctor()

   @param id: uint16 type. need to be larger than 1024 if not system type. 
				</summary>
			</function>
			<function line="130" name="LoadSound">
				<summary>function block:LoadSound(name, max_count, volume, pitch)
not used. allowing to specify "glass4", and "glass[1-4]" is used. 
				</summary>
				<parameter name="name"/>
				<parameter name="max_count"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="158" name="Init">
				<summary>function block:Init()

				</summary>
			</function>
			<function line="162" name="get_id">
				<summary>function block:get_id()

				</summary>
			</function>
			<function line="167" name="SetTexture">
				<summary>function block:SetTexture(filename, texture_index)

   @param texture_index: nil to default to 1
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="177" name="GetTexture">
				<summary>function block:GetTexture(texture_index)

   @param texture_index: nil to default to 1
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="187" name="GetTextureObj">
				<summary>function block:GetTextureObj(texture_index)

   @param texture_index: nil to default to 1
   @return nil, false or the texture asset object. 
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
				<returns>return , false or the texture asset object. 
				</returns>
			</function>
			<function line="228" name="ReplaceTexture">
				<summary>function block:ReplaceTexture(filename, texture_index)

   @param texture_index: nil to default to 1
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="276" name="RestoreTexture">
				<summary>function block:RestoreTexture()

				</summary>
			</function>
			<function line="304" name="GetIcon">
				<summary>function block:GetIcon()

				</summary>
			</function>
			<function line="320" name="SetAttribute">
				<summary>function block:SetAttribute(name, value)
set per template attribute
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="334" name="UpdateAttribute">
				<summary>function block:UpdateAttribute(name, value)
update attribute. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="344" name="SetSpeedReduction">
				<summary>function block:SetSpeedReduction(value)
set speed reduction percentage of current block type.
   @param value : [0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</summary>
				<parameter name="value">[0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</parameter>
			</function>
			<function line="348" name="GetSpeedReduction">
				<summary>function block:GetSpeedReduction()

				</summary>
			</function>
			<function line="352" name="RecomputeAttribute">
				<summary>function block:RecomputeAttribute()

				</summary>
			</function>
			<function line="372" name="GetAttribute">
				<summary>function block:GetAttribute(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="378" name="Highlight">
				<summary>function block:Highlight()

				</summary>
			</function>
			<function line="383" name="Register">
				<summary>function block:Register(blockWorld)
register this block template
   @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
			<function line="400" name="getMobilityFlag">
				<summary>function block:getMobilityFlag()
Returns the mobility information of the block, 0 = free, 1 = can't push but can move over, 2 = total immobility and stop pistons
				</summary>
			</function>
			<function line="405" name="setHardness">
				<summary>function block:setHardness(value)
Sets how many hits it takes to break a block.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="413" name="setBlockUnbreakable">
				<summary>function block:setBlockUnbreakable()
This method will make the hardness of the block equals to -1, and the block is indestructible.
				</summary>
			</function>
			<function line="418" name="getBlockHardness">
				<summary>function block:getBlockHardness(x,y,z)
Returns the block hardness at a location. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="426" name="GetMetaDataFromEnv">
				<summary>function block:GetMetaDataFromEnv(blockX, blockY, blockZ, side, side_region, camx,camy,camz, lookat_x,lookat_y,lookat_z)
get sub meta data according to current player or camera position.
   @param side: user clicked which side. this is *opposite* of the internal side.
   @param side_region: the user clicked which side. can be "upper" or "lower"
   @return metadata, force_condition:  metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="side">user clicked which side. this is *opposite* of the internal side.
				</parameter>
				<parameter name="side_region">the user clicked which side. can be "upper" or "lower"
				</parameter>
				<parameter name="camx"/>
				<parameter name="camy"/>
				<parameter name="camz"/>
				<parameter name="lookat_x"/>
				<parameter name="lookat_y"/>
				<parameter name="lookat_z"/>
				<returns>return , force_condition:  metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</returns>
			</function>
			<function line="446" name="OnBlockPlacedBy">
				<summary>function block:OnBlockPlacedBy(x,y,z, entity)
Called when the block is placed in the world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
			</function>
			<function line="461" name="Create">
				<summary>function block:Create(x, y, z, bCheckCanCreate, data, side, condition, serverdata)
virtual function: create a new block at the given position. 
TODO: move to game logic, and spawn other blocks if required
   @param x, y, z: block position.
   @param bCheckCanCreate: true to check if the player is inside the block and prevent creation.
   @param data: block data
   @param side: usually a hint for on which block side this block is created on.
   @param condition: a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom.   
0(numerical): block must not be of the same type;  
1(numerical): block must be of the same type  -1(numerical): block should be empty  
'solid':block should be solid  'obstruction':block should be obstruction
   @result: return the number of blocks created. if nil, no blocks are created
				</summary>
				<parameter name="x">, y, z: block position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCheckCanCreate">true to check if the player is inside the block and prevent creation.
				</parameter>
				<parameter name="data">block data
				</parameter>
				<parameter name="side">usually a hint for on which block side this block is created on.
				</parameter>
				<parameter name="condition">a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom.   
0(numerical): block must not be of the same type;  
1(numerical): block must be of the same type  -1(numerical): block should be empty  
'solid':block should be solid  'obstruction':block should be obstruction
				</parameter>
				<parameter name="serverdata"/>
			</function>
			<function line="476" name="NearTerrainHole">
				<summary>function block.NearTerrainHole(x, z)
whether the given real world point is near a terrain hole.
   @param cx,cz: center of the block in real coordinates
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="483" name="GetTooltip">
				<summary>function block:GetTooltip()

				</summary>
			</function>
			<function line="493" name="GetDisplayName">
				<summary>function block:GetDisplayName()

				</summary>
			</function>
			<function line="499" name="AutoFillUndergroundColumn">
				<summary>function block.AutoFillUndergroundColumn(blockX, blockY, blockZ, bIgnoreThisBlock)
automatically generate blocks in column x,z. where the block at x,y,z must be a valid block either empty or solid.
   @return true, number_blocks_modifed. the first params is true if the current block is not destructible
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="bIgnoreThisBlock"/>
				<returns>return , number_blocks_modifed. the first params is true if the current block is not destructible
				</returns>
			</function>
			<function line="598" name="GetModelByBlockData">
				<summary>function block:GetModelByBlockData(blockData)

				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="606" name="GetBestModel">
				<summary>function block:GetBestModel(blockX, blockY, blockZ, blockData, side, force_condition)
get the best model object according to nearby blocks.
   @param side: usually a hint for on which block side this block is created on. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
				<parameter name="side">usually a hint for on which block side this block is created on. 
				</parameter>
				<parameter name="force_condition"/>
			</function>
			<function line="745" name="PreloadAsset">
				<summary>function block:PreloadAsset()
preload asset model. 
				</summary>
			</function>
			<function line="777" name="OnBlockAdded">
				<summary>function block:OnBlockAdded(blockX, blockY, blockZ, block_data, serverdata)
virtual function
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_data"/>
				<parameter name="serverdata"/>
			</function>
			<function line="782" name="OnBlockEvent">
				<summary>function block:OnBlockEvent(x,y,z, event_id, event_param)
when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="787" name="GetDroppedItemStack">
				<summary>function block:GetDroppedItemStack(x,y,z, bForceDrop)
get the item stack when this block is broken &amp; dropped. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop"/>
			</function>
			<function line="794" name="OnUserBreakItem">
				<summary>function block:OnUserBreakItem(x,y,z, entityPlayer)
only called when user clicks to break an item 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entityPlayer"/>
			</function>
			<function line="803" name="DropBlockAsItem">
				<summary>function block:DropBlockAsItem(x,y,z, bForceDrop)
when ever this block is about to be destroyed and one may call this function to drop as an item first.
   @Note: this function should always be called before item is removed.
   @param bForceDrop: if true, we will drop regardless of game mode
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop">if true, we will drop regardless of game mode
				</parameter>
			</function>
			<function line="817" name="OnNeighborChanged">
				<summary>function block:OnNeighborChanged(x,y,z,neighbor_block_id)
virtual function: Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are their own) 
called when neighbour has changed. be careful of recursive calls.
   @param x, y, z:
   @param neighbor_block_id:
				</summary>
				<parameter name="x">, y, z:
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="neighbor_block_id">
				</parameter>
			</function>
			<function line="827" name="updateTick">
				<summary>function block:updateTick(x,y,z)
called on framemove.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="832" name="IsAssociatedBlockID">
				<summary>function block:IsAssociatedBlockID(block_id)
return true if the block_id is associated block, such as an open door and closed door. 
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="837" name="CanDestroyBlockAt">
				<summary>function block:CanDestroyBlockAt(x,y,z)
default to return true, unless there is an can destroy rule. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="849" name="SetRule_CanDestroy">
				<summary>function block:SetRule_CanDestroy(rule)
set whether a given block can be placed onto another block.
   @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="855" name="canPlaceBlockAt">
				<summary>function block:canPlaceBlockAt(x,y,z)
virtual: Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="869" name="SetRule_CanPlace">
				<summary>function block:SetRule_CanPlace(rule)
set whether a given block can be placed onto another block.
   @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="876" name="canPlaceBlockOnSide">
				<summary>function block:canPlaceBlockOnSide(x,y,z,side)
checks to see if you can place this block can be placed on that side of a block: BlockLever overrides
   @param x,y,z: this is the position where the block should be placed
   @param side: this is the OPPOSITE of the side of contact.
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact.
				</parameter>
			</function>
			<function line="884" name="GetBlockEntity">
				<summary>function block:GetBlockEntity(x,y,z)
get the block entity at the given block position that matches the block's entity class
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="894" name="UpdateModel">
				<summary>function block:UpdateModel(blockX, blockY, blockZ, blockData)
update a block's custom model according to user data. this function is called whenever the block data changes or on load. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
			</function>
			<function line="940" name="isProvidingWeakPower">
				<summary>function block:isProvidingWeakPower(x, y, z, direction)
Returns true if the block is emitting indirect/weak redstone power on the specified side. If isBlockNormalCube
returns true, standard redstone propagation rules will apply instead and this will not be called.
   @param direction: Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="946" name="isProvidingStrongPower">
				<summary>function block:isProvidingStrongPower(x, y, z, direction)
Returns true if the block is emitting direct/strong redstone power on the specified side.
   @param direction: Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed.  eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="951" name="canProvidePower">
				<summary>function block:canProvidePower()
Can this block provide power. 
				</summary>
			</function>
			<function line="957" name="OnBlockLoaded">
				<summary>function block:OnBlockLoaded(x,y,z, block_data)
called when block is first loaded from disk file to memory
only customModel has this function called. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="964" name="GetEntityClass">
				<summary>function block:GetEntityClass()
get entity class if any. 
				</summary>
			</function>
			<function line="973" name="DeleteModel">
				<summary>function block:DeleteModel(blockX, blockY, blockZ)

				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="985" name="OnBlockRemoved">
				<summary>function block:OnBlockRemoved(blockX, blockY, blockZ, last_id, last_data)
on block removed
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="last_id"/>
				<parameter name="last_data"/>
			</function>
			<function line="992" name="GetSlipperiness">
				<summary>function block:GetSlipperiness()
this decides the acceleration distance when entity is moving on the block. 
0 means no acceleration distance and player stops immediately when it stops moving. 
bigger value means that the player will slide this certain distance before comming to a complete stop. 
				</summary>
			</function>
			<function line="999" name="Remove">
				<summary>function block:Remove(blockX, blockY, blockZ)
virtual function: remove a block at the given position. 
it will automatically generate terrain blocks if necessary
   @result: return the number of blocks modified. this number may be nil or 1 or larger than one. if some other blocks are auto generated. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1045" name="FillTerrainBlock">
				<summary>function block.FillTerrainBlock(blockX, blockY, blockZ, block_id)
static function: Fill blocks according to current terrain height and its surroundings.
   @param block_id: if nil it defaults to block_types.names.underground_shell
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it defaults to block_types.names.underground_shell
				</parameter>
			</function>
			<function line="1088" name="RemoveTerrainBlock">
				<summary>function block.RemoveTerrainBlock(blockX, blockY, blockZ)
static function: remove the terrain block, we will set holes
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1149" name="GenerateUndergroundBlock">
				<summary>function block.GenerateUndergroundBlock(blockX, blockY, blockZ, block_id)
static function:
auto fill a random underground terrain block at given position.
   @param block_id: if nil it is a random block. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it is a random block. 
				</parameter>
			</function>
			<function line="1155" name="play_break_sound">
				<summary>function block:play_break_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1162" name="play_create_sound">
				<summary>function block:play_create_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1168" name="play_step_sound">
				<summary>function block:play_step_sound(volume)

				</summary>
				<parameter name="volume"/>
			</function>
			<function line="1174" name="play_click_sound">
				<summary>function block:play_click_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1180" name="play_toggle_sound">
				<summary>function block:play_toggle_sound(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1188" name="CreateBlockPieces">
				<summary>function block:CreateBlockPieces(blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
   @param cx, cy, cz: center of break point. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point. 
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
			</function>
			<function line="1242" name="GetCustomModel">
				<summary>function block:GetCustomModel(blockX, blockY, blockZ)
get the custom model at the given position.
   @return the paraobject or nil. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<returns>return paraobject or nil. 
				</returns>
			</function>
			<function line="1256" name="AddToSelection">
				<summary>function block:AddToSelection(blockX, blockY, blockZ, index)
add the custom model to selection.
   @param index: the selection group id, default to 2.
   @return true if selected
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="index">the selection group id, default to 2.
				</parameter>
				<returns>return if selected
				</returns>
			</function>
			<function line="1267" name="GetInternalStateNumber">
				<summary>function block:GetInternalStateNumber(x,y,z)
some block like command blocks, may has an internal state number(like its last output result)
and some block may use its nearby blocks' state number to generate redstone output or other behaviors.
   @return nil or a number between [0-15]
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return or a number between [0-15]
				</returns>
			</function>
			<function line="1274" name="OnClick">
				<summary>function block:OnClick(bx, by, bz, mouse_button, entity, side)
called when the user clicks on the block
   @param side: on which side the block is clicked.
   @return: return true if it is an action block and processed . 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side">on which side the block is clicked.
				</parameter>
				<returns>return return true if it is an action block and processed . 
				</returns>
			</function>
			<function line="1286" name="OnEntityCollided">
				<summary>function block:OnEntityCollided(x,y,z, entity, deltaTime)
Triggered whenever an entity collides with this block (enters into the block). Args: world, x, y, z, entity
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1291" name="OnMouseDown">
				<summary>function block:OnMouseDown(x,y,z, mouse_button)
call when use press mouse down button over the block
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
			</function>
			<function line="1300" name="OnActivated">
				<summary>function block:OnActivated(bx, by, bz, entity)
virtual function: some signal is received, such as user click
the default behavior is to activate the neuron block.
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1311" name="OnToggle">
				<summary>function block:OnToggle(bx, by, bz)
some blocks can be toggled to another block. and may event have a toggle function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1322" name="OnStep">
				<summary>function block:OnStep(bx, by, bz, entity)
when the player steps on the top surface of the block
some block may have an on step function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1327" name="tickRate">
				<summary>function block:tickRate()
How many simulation steps 
				</summary>
			</function>
			<function line="1332" name="isNormalCube">
				<summary>function block:isNormalCube()
whether block is normal solid cube model that can not provide power. 
				</summary>
			</function>
			<function line="1354" name="GetItemModel">
				<summary>function block:GetItemModel()
get model file for item display
				</summary>
			</function>
			<function line="1381" name="GetOffsetY">
				<summary>function block:GetOffsetY()

				</summary>
			</function>
			<function line="1392" name="GetItemModelScaling">
				<summary>function block:GetItemModelScaling()
model scaling for GetItemModel() as handheld item. 
				</summary>
			</function>
			<function line="1397" name="OnWorldLoaded">
				<summary>function block:OnWorldLoaded()
called when world is loaded
				</summary>
			</function>
			<function line="1402" name="UpdateBlockBounds">
				<summary>function block:UpdateBlockBounds()
set the block bounds and collision AABB. 
				</summary>
			</function>
			<function line="1407" name="SetBlockBounds">
				<summary>function block:SetBlockBounds(minX, minY, minZ, maxX, maxY, maxZ)
input is in local block pos which is scaled by block_size internally. 
				</summary>
				<parameter name="minX"/>
				<parameter name="minY"/>
				<parameter name="minZ"/>
				<parameter name="maxX"/>
				<parameter name="maxY"/>
				<parameter name="maxZ"/>
			</function>
			<function line="1414" name="GetCollisionBoundingBoxFromPool">
				<summary>function block:GetCollisionBoundingBoxFromPool(x,y,z)
Returns a bounding box from the pool of bounding boxes.
this box can change after the pool has been cleared to be reused
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1422" name="AddCollisionBoxesToList">
				<summary>function block:AddCollisionBoxesToList(x,y,z, aabb, list, entity)
Adds all intersecting collision boxes representing this block to a list.
   @param list: in|out array list to hold the output
   @param aabb: only add if collide with this aabb.
   @param entity: 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="aabb">only add if collide with this aabb.
				</parameter>
				<parameter name="list">in|out array list to hold the output
				</parameter>
				<parameter name="entity">
				</parameter>
			</function>
			<function line="1437" name="RotateBlockData">
				<summary>function block:RotateBlockData(blockData, angle, axis)
rotate the block data by the given angle and axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.
   @param blockData: current block data
   @param angle: usually 1.57, -1.57, 3.14, -3.14, 0.
   @param axis: "x|y|z", if nil, it should default to "y" axis
   @return the rotated block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="angle">usually 1.57, -1.57, 3.14, -3.14, 0.
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return rotated block data. 
				</returns>
			</function>
			<function line="1445" name="RotateBlockDataUsingModelFacing">
				<summary>function block:RotateBlockDataUsingModelFacing(blockData, angle, axis)
helper function: can be used by RotateBlockData() to automatically calculate rotated block facing. 
please note, it will cache last search result to accelerate subsequent calls.
				</summary>
				<parameter name="blockData"/>
				<parameter name="angle"/>
				<parameter name="axis"/>
			</function>
			<function line="1484" name="MirrorBlockData">
				<summary>function block:MirrorBlockData(blockData, axis)
mirror the block data along the given axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.
   @param blockData: current block data
   @param axis: "x|y|z", if nil, it should default to "y" axis
   @return the mirrored block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return mirrored block data. 
				</returns>
			</function>
			<function line="1489" name="GetBlockColor">
				<summary>function block:GetBlockColor(x,y,z)
return color in RGB, without alpha
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
		</table>
		<table name="Files" src="script/apps/Aries/Creator/Game/Common/Files.lua">
			<function line="34" name="GetWorldFilePath">
				<summary>function Files.GetWorldFilePath(any_filename, search_folder, bCache)

   @param filename: the filename maybe relative to the current world or the SDK root. 
in case it is relative to the world, we will return a path relative to SDK root.
   @param search_folder: if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. 
such as "Texture/blocks/human/"
   @return return file relative to SDK root. or nil, if no file is found. 
				</summary>
				<parameter name="any_filename"/>
				<parameter name="search_folder">if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. 
such as "Texture/blocks/human/"
				</parameter>
				<parameter name="bCache"/>
				<returns>return file relative to SDK root. or nil, if no file is found. 
				</returns>
			</function>
			<function line="62" name="FileExists">
				<summary>function Files.FileExists(filename)
check if file exists.
   @param filename: can be relative to current world or sdk root. 
				</summary>
				<parameter name="filename">can be relative to current world or sdk root. 
				</parameter>
			</function>
			<function line="69" name="WorldPathToFullPath">
				<summary>function Files.WorldPathToFullPath(filename, bCheckExist)
this function is mostly used to locate a local file resource.
   @param filename: must be relative to world.
   @param bCheckExist: if true, we will only return non-nil filename if the file exist on disk.
				</summary>
				<parameter name="filename">must be relative to world.
				</parameter>
				<parameter name="bCheckExist">if true, we will only return non-nil filename if the file exist on disk.
				</parameter>
			</function>
			<function line="88" name="ClearFindFileCache">
				<summary>function Files:ClearFindFileCache()
call this function when world is loaded. 
				</summary>
			</function>
			<function line="93" name="GetFileCache">
				<summary>function Files:GetFileCache()

				</summary>
			</function>
			<function line="98" name="AddFileToCache">
				<summary>function Files:AddFileToCache(filename, filepath)
cache all existing filename
				</summary>
				<parameter name="filename"/>
				<parameter name="filepath"/>
			</function>
			<function line="109" name="GetFileFromCache">
				<summary>function Files:GetFileFromCache(filename)
get the full filename from cache of existing files.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="114" name="GetShortFileFromLongFile">
				<summary>function Files:GetShortFileFromLongFile(filename)
get short filename from cache of existing files to their long file path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="120" name="GetRelativePath">
				<summary>function Files.GetRelativePath(filename)
get file path that is relative to current world directory. if not, it will return as it is. 
in most cases, we will store filenames using relative file path. But we have to pass to game engine the real path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="135" name="GetFilePath">
				<summary>function Files.GetFilePath(filename)
we will try to find a file in world directory or global directory at all cost and save the result to cache 
so that the next time the same file is requeried, we will return fast for both exist or non-exist ones. 
see also Files.FindFile() it differs with it for non-exist files, this function will also cache non-exist files. 
Files.FindFile does not cache non-exist files.
   @return it will return the file path or false if not found
				</summary>
				<parameter name="filename"/>
				<returns>return will return the file path or false if not found
				</returns>
			</function>
			<function line="154" name="FindFile">
				<summary>function Files.FindFile(filename, searchpaths)
find a given file by its file path. 
see also: Files.GetCachedFilePath()
it will search filename, [worldpath]/filename,  replace [worlds/DesignHouse/last] with current one. 
internally it will use a cache which only last for the current world, to accelerate for repeated calls.
   @param searchpaths: nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"
   @return the real file or nil if not exist 
				</summary>
				<parameter name="filename"/>
				<parameter name="searchpaths">nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"
				</parameter>
				<returns>return real file or nil if not exist 
				</returns>
			</function>
			<function line="192" name="ResolveFilePath">
				<summary>function Files.ResolveFilePath(filename)
resolve filename and return some information. 
&lt;verbatim&gt;
   @param filename: any file path such as an absolute path during a drag &amp; drop event.
   @return {
isExternalFile,  -- boolean: if file is external to SDK
isInWorldDirectory, -- boolean: if file is inside the current world directory. 
relativeToWorldPath, 
relativeToRootPath, -- only valid if isExternalFile is nil.  
isAbsoluteFilepath, -- boolean relativeToRootPath, 
filename, -- no directory 
}&lt;/verbatim&gt;
				</summary>
				<parameter name="filename">any file path such as an absolute path during a drag &amp; drop event.
				</parameter>
				<returns>return {
isExternalFile,  -- boolean: if file is external to SDK
isInWorldDirectory, -- boolean: if file is inside the current world directory. 
relativeToWorldPath, 
relativeToRootPath, -- only valid if isExternalFile is nil.  
isAbsoluteFilepath, -- boolean relativeToRootPath, 
filename, -- no directory 
}&lt;/verbatim&gt;
				</returns>
			</function>
		</table>
		<table name="World" src="script/apps/Aries/Creator/Game/World/World.lua">
			<function line="32" name="ctor">
				<summary>function World:ctor()

				</summary>
			</function>
			<function line="41" name="Init">
				<summary>function World:Init(server_manager, saveHandler)

   @param server_manager: can be nil for client or standalone
   @param saveHandler: can be nil for WorldClient
				</summary>
				<parameter name="server_manager">can be nil for client or standalone
				</parameter>
				<parameter name="saveHandler">can be nil for WorldClient
				</parameter>
			</function>
			<function line="57" name="CreateChunkProvider">
				<summary>function World:CreateChunkProvider()
virtual function: Creates the chunk provider for this world. Called in the constructor. 
				</summary>
			</function>
			<function line="63" name="GetChunkProvider">
				<summary>function World:GetChunkProvider()

				</summary>
			</function>
			<function line="67" name="GetServerManager">
				<summary>function World:GetServerManager()

				</summary>
			</function>
			<function line="71" name="GetPlayer">
				<summary>function World:GetPlayer()

				</summary>
			</function>
			<function line="75" name="OnPreloadWorld">
				<summary>function World:OnPreloadWorld()

				</summary>
			</function>
			<function line="79" name="GetWorldPath">
				<summary>function World:GetWorldPath()

				</summary>
			</function>
			<function line="87" name="InitBlockGenerator">
				<summary>function World:InitBlockGenerator()
world tag "world_generator", "seed"
				</summary>
			</function>
			<function line="140" name="ReplaceWorld">
				<summary>function World:ReplaceWorld(oldWorld)

				</summary>
				<parameter name="oldWorld"/>
			</function>
			<function line="148" name="OnWeaklyDestroyWorld">
				<summary>function World:OnWeaklyDestroyWorld()
this function is called when the world is possibly replaced by another world object
thus as toggling from client world to server world, without leaving the world.
				</summary>
			</function>
			<function line="152" name="OnExit">
				<summary>function World:OnExit()

				</summary>
			</function>
			<function line="158" name="EnableWorldTracker">
				<summary>function World:EnableWorldTracker(bEnabled)
world trackers may be temporily disabled and then enabled again, for example when client receives
block change packet and updates the local world. The updated blocks should not be tracked. 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="165" name="IsClient">
				<summary>function World:IsClient()

				</summary>
			</function>
			<function line="170" name="AddWorldTracker">
				<summary>function World:AddWorldTracker(worldTracker)

				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="176" name="RemoveWorldTracker">
				<summary>function World:RemoveWorldTracker(worldTracker)

				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="180" name="ClearWorldTrackers">
				<summary>function World:ClearWorldTrackers()

				</summary>
			</function>
			<function line="184" name="FrameMove">
				<summary>function World:FrameMove(deltaTime)

				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="189" name="SetWorldSize">
				<summary>function World:SetWorldSize(x, y, z, dx, dy, dz)
set world size by center and extend. 
mostly used on 32/64bits server to prevent running out of memory. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="204" name="GetSpawnPoint">
				<summary>function World:GetSpawnPoint()
get player home spawn position. 
				</summary>
			</function>
			<function line="218" name="SetSpawnPoint">
				<summary>function World:SetSpawnPoint(x,y,z)
set player home position.
   @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="235" name="GetWorldInfo">
				<summary>function World:GetWorldInfo()

				</summary>
			</function>
			<function line="240" name="SpawnEntityInWorld">
				<summary>function World:SpawnEntityInWorld(entity)
Called to place all entities as part of a world
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="244" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()

				</summary>
			</function>
			<function line="248" name="GetWorldTime">
				<summary>function World:GetWorldTime()

				</summary>
			</function>
			<function line="252" name="GetGameRules">
				<summary>function World:GetGameRules()

				</summary>
			</function>
			<function line="257" name="GetSaveHandler">
				<summary>function World:GetSaveHandler()
Returns this world's current save handler
				</summary>
			</function>
			<function line="263" name="GetPlayer">
				<summary>function World:GetPlayer(name)
get player
   @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="267" name="GetEntityByID">
				<summary>function World:GetEntityByID(id)

				</summary>
				<parameter name="id"/>
			</function>
			<function line="273" name="MarkBlockForUpdate">
				<summary>function World:MarkBlockForUpdate(x, y, z)
On the client, re-renders the block. On the server, sends the block to the client (which will re-render it),
including the tile entity description packet if applicable. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="280" name="OnChunkGenerated">
				<summary>function World:OnChunkGenerated(chunkX, chunkZ)
on client does nothing, on server broadcase to observing client
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="287" name="MarkBlockForRenderUpdate">
				<summary>function World:MarkBlockForRenderUpdate(x,y,z)
On the client, re-renders this block. On the server, does nothing. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="294" name="MarkBlockRangeForRenderUpdate">
				<summary>function World:MarkBlockRangeForRenderUpdate(min_x, min_y, min_z, max_x, max_y, max_z)
On the client, re-renders all blocks in this range, inclusive. On the server, does nothing.
				</summary>
				<parameter name="min_x"/>
				<parameter name="min_y"/>
				<parameter name="min_z"/>
				<parameter name="max_x"/>
				<parameter name="max_y"/>
				<parameter name="max_z"/>
			</function>
			<function line="300" name="OnEntityAdded">
				<summary>function World:OnEntityAdded(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="306" name="OnEntityRemoved">
				<summary>function World:OnEntityRemoved(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="312" name="OnPlaySound">
				<summary>function World:OnPlaySound(soundName, x, y, z, volume, pitch)

				</summary>
				<parameter name="soundName"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="320" name="DestroyBlockPartially">
				<summary>function World:DestroyBlockPartially(entityId, x,y,z, damage)
virtual: set new damage to a given block
   @param damage: [1-10), other values will remove it. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="damage">[1-10), other values will remove it. 
				</parameter>
			</function>
			<function line="326" name="GetChunkFromChunkCoords">
				<summary>function World:GetChunkFromChunkCoords(chunkX, chunkZ)

				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="331" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()
total number of world ticks since the world is created. 
				</summary>
			</function>
			<function line="336" name="GetWorldTime">
				<summary>function World:GetWorldTime()
current world time in day-light cycle (repeat in a day).
				</summary>
			</function>
			<function line="340" name="Tick">
				<summary>function World:Tick()

				</summary>
			</function>
			<function line="346" name="UpdateEntity">
				<summary>function World:UpdateEntity(entity, bForceUpdate)
update the entity in the world
   @param bForceUpdate: default to true. if true, the entity's framemove function will be called.
				</summary>
				<parameter name="entity"/>
				<parameter name="bForceUpdate">default to true. if true, the entity's framemove function will be called.
				</parameter>
			</function>
			<function line="381" name="GetCollidingBoundingBoxes">
				<summary>function World:GetCollidingBoundingBoxes(aabb, entity)
Returns a list of bounding boxes that collide with aabb including the passed in entity's collision.
   @param aabb: 
return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</summary>
				<parameter name="aabb">return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</parameter>
				<parameter name="entity"/>
			</function>
			<function line="385" name="RemoveEntity">
				<summary>function World:RemoveEntity(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="390" name="RemovePlayerEntityDangerously">
				<summary>function World:RemovePlayerEntityDangerously(entity)
Do NOT use this method to remove normal entities- use normal RemoveEntity
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="394" name="GetBlockEntityList">
				<summary>function World:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)

				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="399" name="GetEntityListInChunk">
				<summary>function World:GetEntityListInChunk(chunkX, chunkZ)
this is a faster way to interate all entities in the chunk. please note that it may contain non-block entities. 
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="406" name="CreateBlockPieces">
				<summary>function World:CreateBlockPieces(block_template, blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz)

   @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
   @param cx, cy, cz: center of break point. 
				</summary>
				<parameter name="block_template"/>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point. 
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
			</function>
			<function line="414" name="DoPreChunk">
				<summary>function World:DoPreChunk(chunkX, chunkZ, bLoad)
this function is called when chunk is loaded or unloaded for the first time.
   @param bLoad: true to create, false to unload
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="bLoad">true to create, false to unload
				</parameter>
			</function>
			<function line="424" name="InvalidateBlockReceiveRegion">
				<summary>function World:InvalidateBlockReceiveRegion(from_x,from_y,from_z, to_x, to_y, to_z)
this function is called before we apply new chunk data over existing chunks
				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
		</table>
		<table name="SelectionManager" src="script/apps/Aries/Creator/Game/SceneContext/SelectionManager.lua">
			<function line="34" name="ctor">
				<summary>function SelectionManager:ctor()

				</summary>
			</function>
			<function line="42" name="GetPickingResult">
				<summary>function SelectionManager:GetPickingResult()
get the current mouse picking result. 
				</summary>
			</function>
			<function line="46" name="SetPickingDist">
				<summary>function SelectionManager:SetPickingDist(dist)

				</summary>
				<parameter name="dist"/>
			</function>
			<function line="50" name="GetPickingDist">
				<summary>function SelectionManager:GetPickingDist()

				</summary>
			</function>
			<function line="54" name="Clear">
				<summary>function SelectionManager:Clear()

				</summary>
			</function>
			<function line="59" name="ClearPickingResult">
				<summary>function SelectionManager:ClearPickingResult()

				</summary>
			</function>
			<function line="65" name="MousePickBlock">
				<summary>function SelectionManager:MousePickBlock(bPickBlocks, bPickPoint, bPickObjects, picking_dist)

   @param bPickBlocks, bPickPoint, bPickObjects: default to true
return result;
				</summary>
				<parameter name="bPickBlocks">, bPickPoint, bPickObjects: default to true
return result;
				</parameter>
				<parameter name="bPickPoint"/>
				<parameter name="bPickObjects"/>
				<parameter name="picking_dist"/>
			</function>
			<function line="142" name="GetSelectedBlocks">
				<summary>function SelectionManager:GetSelectedBlocks()

   @return nil of a table of selected blocks.
				</summary>
				<returns>return of a table of selected blocks.
				</returns>
			</function>
			<function line="154" name="GetSelectedActor">
				<summary>function SelectionManager:GetSelectedActor()
get selected movie actor
				</summary>
			</function>
			<function line="159" name="GetLastSelectedActor">
				<summary>function SelectionManager:GetLastSelectedActor()
get the previously selected actor. 
				</summary>
			</function>
			<function line="163" name="SetSelectedActor">
				<summary>function SelectionManager:SetSelectedActor(actor)

				</summary>
				<parameter name="actor"/>
			</function>
		</table>
		<table name="BaseContext" src="script/apps/Aries/Creator/Game/SceneContext/BaseContext.lua">
			<function line="71" name="ctor">
				<summary>function BaseContext:ctor()

				</summary>
			</function>
			<function line="78" name="OnSelect">
				<summary>function BaseContext:OnSelect()

				</summary>
			</function>
			<function line="85" name="OnUnselect">
				<summary>function BaseContext:OnUnselect()
virtual function: 
return true if we are not in the middle of any operation and fire unselected signal. 
or false, if we can not unselect the scene tool context at the moment. 
				</summary>
			</function>
			<function line="94" name="GetClickData">
				<summary>function BaseContext:GetClickData()

				</summary>
			</function>
			<function line="100" name="handleDropFile">
				<summary>function BaseContext:handleDropFile(filename, fileType)
user has drag and dropped an existing file to the context
   @param fileType: "model", "blocktemplate"
				</summary>
				<parameter name="filename"/>
				<parameter name="fileType">"model", "blocktemplate"
				</parameter>
			</function>
			<function line="111" name="EnableMouseDownTimer">
				<summary>function BaseContext:EnableMouseDownTimer(bEnable)
enable mouse down timer to repeatedly receive OnMouseDownTimer callback. 
mouse down timer is automatically stopped when there is no mouse event. so one only need to enable it in mouse press event. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="124" name="EnableMousePickTimer">
				<summary>function BaseContext:EnableMousePickTimer(bEnable)

				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="139" name="OnMouseDownTimer">
				<summary>function BaseContext:OnMouseDownTimer(timer)
virtual function: called repeatedly whenever mouse button is down. 
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="153" name="handleHookedMouseEvent">
				<summary>function BaseContext:handleHookedMouseEvent(event)
return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="167" name="handleItemMouseEvent">
				<summary>function BaseContext:handleItemMouseEvent(event)
if item accept mousePressEvent, it will also handle mouseMove and mouseRelease on its own. 
if item does not accept mousePressEvent, it will not receive any mouseMove or mouseRelease event, and the default handler is used. 
return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="200" name="CheckMousePick">
				<summary>function BaseContext:CheckMousePick()
this function is called repeatedly if MousePickTimer is enabled. 
it can also be called independently.
   @return the picking result table
				</summary>
				<returns>return picking result table
				</returns>
			</function>
			<function line="235" name="HighlightPickBlock">
				<summary>function BaseContext:HighlightPickBlock(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="272" name="HighlightPickEntity">
				<summary>function BaseContext:HighlightPickEntity(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="283" name="ClearBlockPickDisplay">
				<summary>function BaseContext:ClearBlockPickDisplay()

				</summary>
			</function>
			<function line="288" name="ClearPickDisplay">
				<summary>function BaseContext:ClearPickDisplay()

				</summary>
			</function>
			<function line="298" name="OnLeftMouseHold">
				<summary>function BaseContext:OnLeftMouseHold(fDelta)
called every 30 seconds, when user is holding the left button without releasing it.
   @param fDelta: 
				</summary>
				<parameter name="fDelta">
				</parameter>
			</function>
			<function line="331" name="OnLeftLongHoldBreakBlock">
				<summary>function BaseContext:OnLeftLongHoldBreakBlock()
virtual function: when user is holding the left button for long enough. 
				</summary>
			</function>
			<function line="334" name="OnRightMouseHold">
				<summary>function BaseContext:OnRightMouseHold(fDelta)

				</summary>
				<parameter name="fDelta"/>
			</function>
			<function line="338" name="UpdateClickStrength">
				<summary>function BaseContext:UpdateClickStrength(fDelta, result)

				</summary>
				<parameter name="fDelta"/>
				<parameter name="result"/>
			</function>
			<function line="418" name="BeginMouseClickCheck">
				<summary>function BaseContext:BeginMouseClickCheck()
call this function in mouse down event and then call EndMouseClickCheck() in mouse up event. 
if the latter return true, it is a mouse click, otherwise the camera has moved during begin/end pair. 
				</summary>
			</function>
			<function line="427" name="EndMouseClickCheck">
				<summary>function BaseContext:EndMouseClickCheck(event)

   @param event: mouse release event
return true if it is a mouse click
				</summary>
				<parameter name="event">mouse release event
return true if it is a mouse click
				</parameter>
			</function>
			<function line="456" name="mousePressEvent">
				<summary>function BaseContext:mousePressEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="473" name="mouseMoveEvent">
				<summary>function BaseContext:mouseMoveEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="480" name="mouseReleaseEvent">
				<summary>function BaseContext:mouseReleaseEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="494" name="handleCameraWheelEvent">
				<summary>function BaseContext:handleCameraWheelEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="502" name="mouseWheelEvent">
				<summary>function BaseContext:mouseWheelEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="518" name="handleHookedKeyEvent">
				<summary>function BaseContext:handleHookedKeyEvent(event)
virtual: return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="533" name="handleItemKeyEvent">
				<summary>function BaseContext:handleItemKeyEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="541" name="keyPressEvent">
				<summary>function BaseContext:keyPressEvent(event)
virtual: actually means key stroke. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="551" name="HandleEscapeKey">
				<summary>function BaseContext:HandleEscapeKey()
virtual function handle escape key
				</summary>
			</function>
			<function line="579" name="TryDestroyBlock">
				<summary>function BaseContext:TryDestroyBlock(result, is_allow_delete_terrain)
try to destroy the block at picking result
if the terrain block is hit, click_data.strength must be larger than max_break_time
   @param is_allow_delete_terrain: true 
				</summary>
				<parameter name="result"/>
				<parameter name="is_allow_delete_terrain">true 
				</parameter>
			</function>
			<function line="602" name="OnCreateSingleBlock">
				<summary>function BaseContext:OnCreateSingleBlock(x,y,z, block_id, result)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="result"/>
			</function>
			<function line="625" name="OnCreateBlock">
				<summary>function BaseContext:OnCreateBlock(result)

				</summary>
				<parameter name="result"/>
			</function>
			<function line="679" name="HandleQuickSelectKey">
				<summary>function BaseContext:HandleQuickSelectKey(event)
for Numeric key 1-9
				</summary>
				<parameter name="event"/>
			</function>
			<function line="682" name="handleLeftClickScene">
				<summary>function BaseContext:handleLeftClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="685" name="handleMiddleClickScene">
				<summary>function BaseContext:handleMiddleClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="705" name="handleRightClickScene">
				<summary>function BaseContext:handleRightClickScene(event, result)

				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="737" name="handleHistoryKeyEvent">
				<summary>function BaseContext:handleHistoryKeyEvent(event)
virtual: undo/redo related key events, such as ctrl+Z/Y
return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="742" name="handlePlayerKeyEvent">
				<summary>function BaseContext:handlePlayerKeyEvent(event)
virtual function: handle player controller key event
return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="789" name="close">
				<summary>function BaseContext:close()
deactivate this context and switch back to default scene context with the current game mode. 
				</summary>
			</function>
			<function line="795" name="HandleGlobalKey">
				<summary>function BaseContext:HandleGlobalKey(event)
handle all global key events that should always be available to the user regardless of whatever scene context. 
return true if key is handled. 
				</summary>
				<parameter name="event"/>
			</function>
		</table>
		<table name="ChatMessage" src="script\apps\Aries\Creator\Game\Network\ChatMessage.lua">
			<function line="18" name="ctor">
				<summary>function ChatMessage:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function ChatMessage:Init(text, data)

				</summary>
				<parameter name="text"/>
				<parameter name="data"/>
			</function>
			<function line="26" name="SetText">
				<summary>function ChatMessage:SetText(text, data)

				</summary>
				<parameter name="text"/>
				<parameter name="data"/>
			</function>
			<function line="32" name="ToString">
				<summary>function ChatMessage:ToString()

				</summary>
			</function>
		</table>
		<table name="ChunkObserver" src="script\apps\Aries\Creator\Game\Network\ChunkObserver.lua">
			<function line="31" name="ctor">
				<summary>function ChunkObserver:ctor()

				</summary>
			</function>
			<function line="39" name="Init">
				<summary>function ChunkObserver:Init(playerManager, chunkX, chunkZ)

				</summary>
				<parameter name="playerManager"/>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="47" name="GetChunkLocation">
				<summary>function ChunkObserver:GetChunkLocation()

				</summary>
			</function>
			<function line="51" name="GetPlayerCount">
				<summary>function ChunkObserver:GetPlayerCount()

				</summary>
			</function>
			<function line="56" name="FlagChunkForUpdate">
				<summary>function ChunkObserver:FlagChunkForUpdate(x, y, z)

   @param x, y, z: relative to chunk x,z in [0,max_uncompressed_blocks). if nil, the entire chunk is flagged to be updated, rather than individual chunk. 
				</summary>
				<parameter name="x">, y, z: relative to chunk x,z in [0,max_uncompressed_blocks). if nil, the entire chunk is flagged to be updated, rather than individual chunk. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="79" name="AddPlayer">
				<summary>function ChunkObserver:AddPlayer(playerMP)

				</summary>
				<parameter name="playerMP"/>
			</function>
			<function line="93" name="GetMyChunk">
				<summary>function ChunkObserver:GetMyChunk()
get the associated chunk object
				</summary>
			</function>
			<function line="97" name="UpdateChunkTime">
				<summary>function ChunkObserver:UpdateChunkTime(chunk)

				</summary>
				<parameter name="chunk"/>
			</function>
			<function line="106" name="RemovePlayer">
				<summary>function ChunkObserver:RemovePlayer(playerMP)

				</summary>
				<parameter name="playerMP"/>
			</function>
			<function line="134" name="SendPacketToPlayersInChunk">
				<summary>function ChunkObserver:SendPacketToPlayersInChunk(packet, excludingEntityMP)
sends the packet to all players in the current instance
   @param excludingEntityMP: excluding the given player, can be nil. 
				</summary>
				<parameter name="packet"/>
				<parameter name="excludingEntityMP">excluding the given player, can be nil. 
				</parameter>
			</function>
			<function line="146" name="UpdateBlockEntity">
				<summary>function ChunkObserver:UpdateBlockEntity(blockEntity)
send block entities
				</summary>
				<parameter name="blockEntity"/>
			</function>
			<function line="156" name="SendChunkUpdate">
				<summary>function ChunkObserver:SendChunkUpdate()
called by periodically
				</summary>
			</function>
		</table>
		<table name="ChunkObserverClient" src="script\apps\Aries\Creator\Game\Network\ChunkObserverClient.lua">
			<function line="28" name="ctor">
				<summary>function ChunkObserverClient:ctor()

				</summary>
			</function>
			<function line="35" name="Init">
				<summary>function ChunkObserverClient:Init(playerManager, chunkX, chunkZ)

				</summary>
				<parameter name="playerManager"/>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="41" name="GetChunkLocation">
				<summary>function ChunkObserverClient:GetChunkLocation()

				</summary>
			</function>
			<function line="46" name="FlagChunkForUpdate">
				<summary>function ChunkObserverClient:FlagChunkForUpdate(x, y, z)

   @param x, y, z: relative to chunk x,z in [0,64)
				</summary>
				<parameter name="x">, y, z: relative to chunk x,z in [0,64)
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="55" name="GetMyChunk">
				<summary>function ChunkObserverClient:GetMyChunk()
get the associated chunk object
				</summary>
			</function>
			<function line="59" name="UpdateChunkTime">
				<summary>function ChunkObserverClient:UpdateChunkTime(chunk)

				</summary>
				<parameter name="chunk"/>
			</function>
			<function line="69" name="SendPacketToServer">
				<summary>function ChunkObserverClient:SendPacketToServer(packet)
sends the packet to all players in the current instance
				</summary>
				<parameter name="packet"/>
			</function>
			<function line="74" name="UpdateBlockEntity">
				<summary>function ChunkObserverClient:UpdateBlockEntity(blockEntity)
send block entities
				</summary>
				<parameter name="blockEntity"/>
			</function>
			<function line="83" name="IsEmpty">
				<summary>function ChunkObserverClient:IsEmpty()

				</summary>
			</function>
			<function line="87" name="GetLastSendTime">
				<summary>function ChunkObserverClient:GetLastSendTime()

				</summary>
			</function>
			<function line="92" name="SendChunkUpdate">
				<summary>function ChunkObserverClient:SendChunkUpdate()
called by periodically
				</summary>
			</function>
		</table>
		<table name="ConnectionBase" src="script\apps\Aries\Creator\Game\Network\ConnectionBase.lua">
			<function line="22" name="ctor">
				<summary>function ConnectionBase:ctor()

				</summary>
			</function>
			<function line="27" name="SetNetHandler">
				<summary>function ConnectionBase:SetNetHandler(net_handler)
Sets the NetHandler. Server-only.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="32" name="OnConnectionLost">
				<summary>function ConnectionBase:OnConnectionLost(reason)
called when connection is lost
				</summary>
				<parameter name="reason"/>
			</function>
			<function line="38" name="GetIPAddress">
				<summary>function ConnectionBase:GetIPAddress()
get ip address. return nil or ip address
				</summary>
			</function>
			<function line="48" name="Send">
				<summary>function ConnectionBase:Send(msg, neuronfile)
send message immediately to c++ queue
   @param msg: the raw message table {id=packet_id, .. }.
   @param neuronfile: should be nil. By default, it is this file. 
				</summary>
				<parameter name="msg">the raw message table {id=packet_id, .. }.
				</parameter>
				<parameter name="neuronfile">should be nil. By default, it is this file. 
				</parameter>
			</function>
			<function line="61" name="AddRawMsgToSendQueue">
				<summary>function ConnectionBase:AddRawMsgToSendQueue(msg, neuronfile)
Adds msg to the correct send queue according to data types (chunk data packets go to a separate queue).
				</summary>
				<parameter name="msg"/>
				<parameter name="neuronfile"/>
			</function>
			<function line="66" name="AddPacketToSendQueue">
				<summary>function ConnectionBase:AddPacketToSendQueue(packet)
send a packet to send queue
				</summary>
				<parameter name="packet"/>
			</function>
			<function line="76" name="Connect">
				<summary>function ConnectionBase:Connect(timeout, callback_func)
this function is only called for a client to establish a connection with remote server.
on the server side, accepted connections never need to call this function.
   @param timeout: the number of seconds to timeout. if 0, it will just ping once.
   @param callback_func: a function(bSuccess) end.  If this function is provided, this function is asynchronous. 
				</summary>
				<parameter name="timeout">the number of seconds to timeout. if 0, it will just ping once.
				</parameter>
				<parameter name="callback_func">a function(bSuccess) end.  If this function is provided, this function is asynchronous. 
				</parameter>
			</function>
			<function line="121" name="ProcessReadPackets">
				<summary>function ConnectionBase:ProcessReadPackets()
Checks timeouts and processes all pending read packets.
				</summary>
			</function>
			<function line="125" name="GetNid">
				<summary>function ConnectionBase:GetNid()
get the virtual nid(address) of the remote endpoint
				</summary>
			</function>
			<function line="130" name="UpdateCache">
				<summary>function ConnectionBase:UpdateCache()
this function is called, whenever nid, or default neuron file is changed. 
				</summary>
			</function>
			<function line="136" name="SetNid">
				<summary>function ConnectionBase:SetNid(nid)
set nid of the remote endpoint. 
				</summary>
				<parameter name="nid"/>
			</function>
			<function line="146" name="SetDefaultNeuronFile">
				<summary>function ConnectionBase:SetDefaultNeuronFile(filename)
default file to which all messages will be sent. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="153" name="GetRemoteAddress">
				<summary>function ConnectionBase:GetRemoteAddress(neuronfile)
get remote address to which we will send message
   @param neuronfile: if nil, a default one will be used. 
				</summary>
				<parameter name="neuronfile">if nil, a default one will be used. 
				</parameter>
			</function>
			<function line="161" name="SetRemoteAddress">
				<summary>function ConnectionBase:SetRemoteAddress()

				</summary>
			</function>
			<function line="166" name="ServerShutdown">
				<summary>function ConnectionBase:ServerShutdown()
Shuts down the connection on the server side. 
				</summary>
			</function>
			<function line="171" name="NetworkShutdown">
				<summary>function ConnectionBase:NetworkShutdown(reason)
Shuts down the network with the specified reason. 
				</summary>
				<parameter name="reason"/>
			</function>
			<function line="175" name="CloseConnection">
				<summary>function ConnectionBase:CloseConnection()

				</summary>
			</function>
			<function line="184" name="OnError">
				<summary>function ConnectionBase:OnError(text)
inform the netServerHandler about an error.
   @param text: this is usually "OnConnectionLost" from ServerListener. or "ConnectionNotEstablished" from client
				</summary>
				<parameter name="text">this is usually "OnConnectionLost" from ServerListener. or "ConnectionNotEstablished" from client
				</parameter>
			</function>
			<function line="190" name="OnNetReceive">
				<summary>function ConnectionBase:OnNetReceive(msg)

				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="Connections" src="script\apps\Aries\Creator\Game\Network\Connections.lua">
			<function line="22" name="GetNextConnectionId">
				<summary>function Connections:GetNextConnectionId()

				</summary>
			</function>
			<function line="27" name="AddConnection">
				<summary>function Connections:AddConnection(nid, connection)

				</summary>
				<parameter name="nid"/>
				<parameter name="connection"/>
			</function>
			<function line="33" name="GetConnection">
				<summary>function Connections:GetConnection(nid)

				</summary>
				<parameter name="nid"/>
			</function>
			<function line="37" name="RemoveConnection">
				<summary>function Connections:RemoveConnection(nid)

				</summary>
				<parameter name="nid"/>
			</function>
			<function line="43" name="Init">
				<summary>function Connections:Init()

				</summary>
			</function>
			<function line="48" name="OnNetworkEvent">
				<summary>function Connections.OnNetworkEvent()
c++ callback function. 
				</summary>
			</function>
			<function line="57" name="OnConnectionLost">
				<summary>function Connections:OnConnectionLost(nid)
connection lost
				</summary>
				<parameter name="nid"/>
			</function>
		</table>
		<table name="ConnectionTCP" src="script\apps\Aries\Creator\Game\Network\ConnectionTCP.lua">
			<function line="20" name="ctor">
				<summary>function ConnectionTCP:ctor()

				</summary>
			</function>
			<function line="23" name="ConnectByIP">
				<summary>function ConnectionTCP:ConnectByIP(ip, port)

				</summary>
				<parameter name="ip"/>
				<parameter name="port"/>
			</function>
			<function line="30" name="Init">
				<summary>function ConnectionTCP:Init(nid, thread, net_handler, tunnelClient)

   @param thread: NPL state name, default to "gl"
				</summary>
				<parameter name="nid"/>
				<parameter name="thread">NPL state name, default to "gl"
				</parameter>
				<parameter name="net_handler"/>
				<parameter name="tunnelClient"/>
			</function>
			<function line="42" name="OnConnectionLost">
				<summary>function ConnectionTCP:OnConnectionLost(reason)
called when connection is lost
				</summary>
				<parameter name="reason"/>
			</function>
			<function line="46" name="AddToSendQueue">
				<summary>function ConnectionTCP:AddToSendQueue(msg, neuronfile)

				</summary>
				<parameter name="msg"/>
				<parameter name="neuronfile"/>
			</function>
			<function line="50" name="OnNetReceive">
				<summary>function ConnectionTCP:OnNetReceive(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="54" name="Connect">
				<summary>function ConnectionTCP:Connect(timeout, callback_func)

				</summary>
				<parameter name="timeout"/>
				<parameter name="callback_func"/>
			</function>
			<function line="64" name="Send">
				<summary>function ConnectionTCP:Send(msg, neuronfile)

				</summary>
				<parameter name="msg"/>
				<parameter name="neuronfile"/>
			</function>
		</table>
		<table name="EntityTracker" src="script\apps\Aries\Creator\Game\Network\EntityTracker.lua">
			<function line="22" name="ctor">
				<summary>function EntityTracker:ctor()

				</summary>
			</function>
			<function line="27" name="Init">
				<summary>function EntityTracker:Init(worldserver)

				</summary>
				<parameter name="worldserver"/>
			</function>
			<function line="34" name="AddEntityToTracker">
				<summary>function EntityTracker:AddEntityToTracker(entity, viewdistance, updateRate, bSendVelocityUpdate)
add an entity that should be synchronized among all players. 
				</summary>
				<parameter name="entity"/>
				<parameter name="viewdistance"/>
				<parameter name="updateRate"/>
				<parameter name="bSendVelocityUpdate"/>
			</function>
			<function line="50" name="RemoveEntityFromAllTrackingPlayers">
				<summary>function EntityTracker:RemoveEntityFromAllTrackingPlayers(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="68" name="UpdateTrackedEntities">
				<summary>function EntityTracker:UpdateTrackedEntities()
send all entity locations, and all tracked events of tracked MP players. 
This function is called per tick in WorldServer. 
				</summary>
			</function>
			<function line="93" name="SendPacketToAllPlayersTrackingEntity">
				<summary>function EntityTracker:SendPacketToAllPlayersTrackingEntity(entity, packet)
send the packet to all players tracking the entity, excluding the entity player itself, if the entity is a player.
				</summary>
				<parameter name="entity"/>
				<parameter name="packet"/>
			</function>
			<function line="101" name="SendPacketToAllAssociatedPlayers">
				<summary>function EntityTracker:SendPacketToAllAssociatedPlayers(entity, packet)
sends to the entity if the entity is a player
				</summary>
				<parameter name="entity"/>
				<parameter name="packet"/>
			</function>
			<function line="108" name="RemovePlayerFromTrackers">
				<summary>function EntityTracker:RemovePlayerFromTrackers(entityPlayerMP)

				</summary>
				<parameter name="entityPlayerMP"/>
			</function>
			<function line="117" name="TrySendEventInChunkToPlayer">
				<summary>function EntityTracker:TrySendEventInChunkToPlayer(entityPlayerMP, chunkX, chunkZ)
send all tracked entity events in the given chunk to player, automatically remove the player in tracked entities if out of view distance. 
				</summary>
				<parameter name="entityPlayerMP"/>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="130" name="AutoAddEntityToTracker">
				<summary>function EntityTracker:AutoAddEntityToTracker(entity)
add an entity that should be synchronized among all players. 
if entity is a remote player, we send all tracked events to the player, otherwise, adds with a visibility and update rate based on the class type
   @paran entity: please note entity.isServerEntity must be true in order to be automatically tracked here.
				</summary>
				<parameter name="entity"/>
			</function>
		</table>
		<table name="EntityTrackerEntry" src="script\apps\Aries\Creator\Game\Network\EntityTrackerEntry.lua">
			<function line="24" name="ctor">
				<summary>function EntityTrackerEntry:ctor()

				</summary>
			</function>
			<function line="31" name="Init">
				<summary>function EntityTrackerEntry:Init(entity, viewdistance, updateFrequency, bSendVelocityUpdates)

				</summary>
				<parameter name="entity"/>
				<parameter name="viewdistance"/>
				<parameter name="updateFrequency"/>
				<parameter name="bSendVelocityUpdates"/>
			</function>
			<function line="52" name="SendLocationToAllClients">
				<summary>function EntityTrackerEntry:SendLocationToAllClients(playerEntityList)
ticks and sends position, velocity, rotation, watched data and riding info at given rate.
this function is called per tick for each tracker entry with all entityMP on the server.
   @param playerEntityList: usually all entityMP list on the server side. 
				</summary>
				<parameter name="playerEntityList">usually all entityMP list on the server side. 
				</parameter>
			</function>
			<function line="156" name="SendPacketToAllTrackingPlayers">
				<summary>function EntityTrackerEntry:SendPacketToAllTrackingPlayers(Packet)
if this is a MP entity player, then it is not informed
				</summary>
				<parameter name="Packet"/>
			</function>
			<function line="163" name="SendPacketToAllAssociatedPlayers">
				<summary>function EntityTrackerEntry:SendPacketToAllAssociatedPlayers(Packet)
if this is a MP entity player, then it receives the message too
				</summary>
				<parameter name="Packet"/>
			</function>
			<function line="171" name="InformAllAssociatedPlayersOfItemDestruction">
				<summary>function EntityTrackerEntry:InformAllAssociatedPlayersOfItemDestruction()

				</summary>
			</function>
			<function line="182" name="TrySendEventToPlayer">
				<summary>function EntityTrackerEntry:TrySendEventToPlayer(entityMP)
Responsible for handle enter/leave visible range packet for player. 
Send the entity's spawn event to player just ONCE if player is in range. 
if the player is more than the view distance (typically 64) then the player is removed instead.
Subsequent location updates (if entity moves) are sent via SendLocationToAllClients. 
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="237" name="IsPlayerWatchingThisChunk">
				<summary>function EntityTrackerEntry:IsPlayerWatchingThisChunk(entityMP)

				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="241" name="SendEventsToPlayers">
				<summary>function EntityTrackerEntry:SendEventsToPlayers(playerList)

				</summary>
				<parameter name="playerList"/>
			</function>
			<function line="247" name="RemovePlayerFromTracker">
				<summary>function EntityTrackerEntry:RemovePlayerFromTracker(entityMP)

				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="254" name="SendWatchedData">
				<summary>function EntityTrackerEntry:SendWatchedData()

				</summary>
			</function>
			<function line="274" name="SendPacketToAllAssociatedPlayers">
				<summary>function EntityTrackerEntry:SendPacketToAllAssociatedPlayers(packet)
if this is a player, then it recieves the message also
				</summary>
				<parameter name="packet"/>
			</function>
			<function line="284" name="GetPacketForThisEntity">
				<summary>function EntityTrackerEntry:GetPacketForThisEntity()
private: add any packet here. 
				</summary>
			</function>
		</table>
		<table name="NetClientHandler" src="script\apps\Aries\Creator\Game\Network\NetClientHandler.lua">
			<function line="35" name="ctor">
				<summary>function NetClientHandler:ctor()

				</summary>
			</function>
			<function line="39" name="Init">
				<summary>function NetClientHandler:Init(ip, port, username, password, worldClient, tunnelClient)
create a tcp connection to server. 
				</summary>
				<parameter name="ip"/>
				<parameter name="port"/>
				<parameter name="username"/>
				<parameter name="password"/>
				<parameter name="worldClient"/>
				<parameter name="tunnelClient"/>
			</function>
			<function line="62" name="SendLoginPacket">
				<summary>function NetClientHandler:SendLoginPacket(username, password)

				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="68" name="GetNid">
				<summary>function NetClientHandler:GetNid()

				</summary>
			</function>
			<function line="73" name="AddToSendQueue">
				<summary>function NetClientHandler:AddToSendQueue(packet)
Adds the packet to the send queue
				</summary>
				<parameter name="packet"/>
			</function>
			<function line="80" name="Cleanup">
				<summary>function NetClientHandler:Cleanup()
clean up connection. 
				</summary>
			</function>
			<function line="89" name="handleErrorMessage">
				<summary>function NetClientHandler:handleErrorMessage(text)

				</summary>
				<parameter name="text"/>
			</function>
			<function line="118" name="GetEntityByID">
				<summary>function NetClientHandler:GetEntityByID(id)

				</summary>
				<parameter name="id"/>
			</function>
			<function line="126" name="handleAuthUser">
				<summary>function NetClientHandler:handleAuthUser(packet_AuthUser)

				</summary>
				<parameter name="packet_AuthUser"/>
			</function>
			<function line="195" name="handleLogin">
				<summary>function NetClientHandler:handleLogin(packet_login)

				</summary>
				<parameter name="packet_login"/>
			</function>
			<function line="200" name="handleSpawnPosition">
				<summary>function NetClientHandler:handleSpawnPosition(packet_SpawnPosition)

				</summary>
				<parameter name="packet_SpawnPosition"/>
			</function>
			<function line="205" name="handleChat">
				<summary>function NetClientHandler:handleChat(packet_Chat)

				</summary>
				<parameter name="packet_Chat"/>
			</function>
			<function line="210" name="handleAnimation">
				<summary>function NetClientHandler:handleAnimation(packet_Animation)

				</summary>
				<parameter name="packet_Animation"/>
			</function>
			<function line="217" name="handlePlayerInfo">
				<summary>function NetClientHandler:handlePlayerInfo(packet_PlayerInfo)

				</summary>
				<parameter name="packet_PlayerInfo"/>
			</function>
			<function line="221" name="handleMove">
				<summary>function NetClientHandler:handleMove(packet_Move)
the server tells us to teleport to this location. 
				</summary>
				<parameter name="packet_Move"/>
			</function>
			<function line="245" name="handleEntityPlayerSpawn">
				<summary>function NetClientHandler:handleEntityPlayerSpawn(packet_EntityPlayerSpawn)

				</summary>
				<parameter name="packet_EntityPlayerSpawn"/>
			</function>
			<function line="277" name="handleEntityHeadRotation">
				<summary>function NetClientHandler:handleEntityHeadRotation(packet_entity_head_rotation)

				</summary>
				<parameter name="packet_entity_head_rotation"/>
			</function>
			<function line="290" name="handleRelEntity">
				<summary>function NetClientHandler:handleRelEntity(packet_RelEntity)
when entity of other entityMP moves relatively. 
				</summary>
				<parameter name="packet_RelEntity"/>
			</function>
			<function line="314" name="handleEntityTeleport">
				<summary>function NetClientHandler:handleEntityTeleport(packet_EntityTeleport)
called periodially in addition to RelEntity, to force a complete position update. 
				</summary>
				<parameter name="packet_EntityTeleport"/>
			</function>
			<function line="336" name="handleEntityMetadata">
				<summary>function NetClientHandler:handleEntityMetadata(packet_EntityMetadata)

				</summary>
				<parameter name="packet_EntityMetadata"/>
			</function>
			<function line="350" name="handleDestroyEntity">
				<summary>function NetClientHandler:handleDestroyEntity(packet_DestroyEntity)

				</summary>
				<parameter name="packet_DestroyEntity"/>
			</function>
			<function line="356" name="handleBlockChange">
				<summary>function NetClientHandler:handleBlockChange(packet_BlockChange)

				</summary>
				<parameter name="packet_BlockChange"/>
			</function>
			<function line="364" name="handleBlockMultiChange">
				<summary>function NetClientHandler:handleBlockMultiChange(packet_BlockMultiChange)

				</summary>
				<parameter name="packet_BlockMultiChange"/>
			</function>
			<function line="387" name="handleBlockPieces">
				<summary>function NetClientHandler:handleBlockPieces(packet_BlockPieces)

				</summary>
				<parameter name="packet_BlockPieces"/>
			</function>
			<function line="395" name="handleMapChunk">
				<summary>function NetClientHandler:handleMapChunk(packet_MapChunk)
full chunk update of blocks, metadata
				</summary>
				<parameter name="packet_MapChunk"/>
			</function>
			<function line="424" name="handleMapChunks">
				<summary>function NetClientHandler:handleMapChunks(packet_MapChunks)
initial chunk updates
				</summary>
				<parameter name="packet_MapChunks"/>
			</function>
			<function line="440" name="handleKickDisconnect">
				<summary>function NetClientHandler:handleKickDisconnect(packet_KickDisconnect)

				</summary>
				<parameter name="packet_KickDisconnect"/>
			</function>
			<function line="444" name="handleUpdateEntitySign">
				<summary>function NetClientHandler:handleUpdateEntitySign(packet_UpdateEntitySign)

				</summary>
				<parameter name="packet_UpdateEntitySign"/>
			</function>
			<function line="451" name="handleMobSpawn">
				<summary>function NetClientHandler:handleMobSpawn(packet_MobSpawn)

				</summary>
				<parameter name="packet_MobSpawn"/>
			</function>
			<function line="491" name="handleMovableSpawn">
				<summary>function NetClientHandler:handleMovableSpawn(packet_EntityMovableSpawn)

				</summary>
				<parameter name="packet_EntityMovableSpawn"/>
			</function>
			<function line="519" name="handleAttachEntity">
				<summary>function NetClientHandler:handleAttachEntity(packet_AttachEntity)

				</summary>
				<parameter name="packet_AttachEntity"/>
			</function>
			<function line="527" name="handleUpdateEnv">
				<summary>function NetClientHandler:handleUpdateEnv(packet_env)

				</summary>
				<parameter name="packet_env"/>
			</function>
			<function line="536" name="handleEntityFunction">
				<summary>function NetClientHandler:handleEntityFunction(packet_EntityFunction)

				</summary>
				<parameter name="packet_EntityFunction"/>
			</function>
			<function line="549" name="handlePlayerInventory">
				<summary>function NetClientHandler:handlePlayerInventory(packet_PlayerInventory)

				</summary>
				<parameter name="packet_PlayerInventory"/>
			</function>
		</table>
		<table name="NetHandler" src="script\apps\Aries\Creator\Game\Network\NetHandler.lua">
			<function line="22" name="ctor">
				<summary>function NetHandler:ctor()

				</summary>
			</function>
			<function line="26" name="CheckGetNidFromIPAddress">
				<summary>function NetHandler:CheckGetNidFromIPAddress(ip, port)
static function
				</summary>
				<parameter name="ip"/>
				<parameter name="port"/>
			</function>
			<function line="39" name="Init">
				<summary>function NetHandler:Init(worldclient, host, ip)

				</summary>
				<parameter name="worldclient"/>
				<parameter name="host"/>
				<parameter name="ip"/>
			</function>
			<function line="44" name="handleMsg">
				<summary>function NetHandler:handleMsg(msg)
virtual function: handle ordinary messages
				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="NetLoginHandler" src="script\apps\Aries\Creator\Game\Network\NetLoginHandler.lua">
			<function line="21" name="ctor">
				<summary>function NetLoginHandler:ctor()

				</summary>
			</function>
			<function line="26" name="Init">
				<summary>function NetLoginHandler:Init(tid, tunnelClient)

   @param tid: this is temporary identifier of the socket connnection
				</summary>
				<parameter name="tid">this is temporary identifier of the socket connnection
				</parameter>
				<parameter name="tunnelClient"/>
			</function>
			<function line="32" name="Tick">
				<summary>function NetLoginHandler:Tick()
called periodically by ServerListener:ProcessPendingConnections()
				</summary>
			</function>
			<function line="39" name="SendPacketToPlayer">
				<summary>function NetLoginHandler:SendPacketToPlayer(packet)

				</summary>
				<parameter name="packet"/>
			</function>
			<function line="44" name="IsFinishedProcessing">
				<summary>function NetLoginHandler:IsFinishedProcessing()
either succeed or error. 
				</summary>
			</function>
			<function line="48" name="GetServerManager">
				<summary>function NetLoginHandler:GetServerManager()

				</summary>
			</function>
			<function line="53" name="InitializePlayerConnection">
				<summary>function NetLoginHandler:InitializePlayerConnection()
transfer connection to NetServerHandler
				</summary>
			</function>
			<function line="68" name="KickUser">
				<summary>function NetLoginHandler:KickUser(reason)
Disconnects the user with the given reason.
				</summary>
				<parameter name="reason"/>
			</function>
			<function line="75" name="GetUsernameAndAddress">
				<summary>function NetLoginHandler:GetUsernameAndAddress()

				</summary>
			</function>
			<function line="83" name="SetAuthenticated">
				<summary>function NetLoginHandler:SetAuthenticated()

				</summary>
			</function>
			<function line="87" name="IsAuthenticated">
				<summary>function NetLoginHandler:IsAuthenticated()

				</summary>
			</function>
			<function line="91" name="handleAuthUser">
				<summary>function NetLoginHandler:handleAuthUser(packet_AuthUser)

				</summary>
				<parameter name="packet_AuthUser"/>
			</function>
			<function line="110" name="handleLoginClient">
				<summary>function NetLoginHandler:handleLoginClient(packet_loginclient)

				</summary>
				<parameter name="packet_loginclient"/>
			</function>
			<function line="118" name="InitializeEnvironment">
				<summary>function NetLoginHandler:InitializeEnvironment()
one time sync for texture pack, weather condition, etc. 
				</summary>
			</function>
		</table>
		<table name="NetServerHandler" src="script\apps\Aries\Creator\Game\Network\NetServerHandler.lua">
			<function line="32" name="ctor">
				<summary>function NetServerHandler:ctor()

				</summary>
			</function>
			<function line="38" name="Init">
				<summary>function NetServerHandler:Init(playerConnection, playerEntity, server_manager)

				</summary>
				<parameter name="playerConnection"/>
				<parameter name="playerEntity"/>
				<parameter name="server_manager"/>
			</function>
			<function line="50" name="GetEntityByID">
				<summary>function NetServerHandler:GetEntityByID(id)

				</summary>
				<parameter name="id"/>
			</function>
			<function line="60" name="KickPlayerFromServer">
				<summary>function NetServerHandler:KickPlayerFromServer(reason)

				</summary>
				<parameter name="reason"/>
			</function>
			<function line="71" name="SendPacketToPlayer">
				<summary>function NetServerHandler:SendPacketToPlayer(packet)

				</summary>
				<parameter name="packet"/>
			</function>
			<function line="77" name="SetPlayerLocation">
				<summary>function NetServerHandler:SetPlayerLocation(x,y,z, yaw, pitch)
Moves the player to the specified destination and rotation
This function is only called during login, or when server detects that client pos and server server differs too much. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="87" name="NetworkTick">
				<summary>function NetServerHandler:NetworkTick()
run once each game tick
				</summary>
			</function>
			<function line="92" name="GetServerManager">
				<summary>function NetServerHandler:GetServerManager()

				</summary>
			</function>
			<function line="96" name="handleErrorMessage">
				<summary>function NetServerHandler:handleErrorMessage(text, data)

				</summary>
				<parameter name="text"/>
				<parameter name="data"/>
			</function>
			<function line="104" name="handleMove">
				<summary>function NetServerHandler:handleMove(packet_move)
this function actually framemoves the playerMP and applies all physics if any. 
				</summary>
				<parameter name="packet_move"/>
			</function>
			<function line="232" name="handleEntityAction">
				<summary>function NetServerHandler:handleEntityAction(packet_entity_action)

				</summary>
				<parameter name="packet_entity_action"/>
			</function>
			<function line="248" name="handleEntityHeadRotation">
				<summary>function NetServerHandler:handleEntityHeadRotation(packet_entity_head_rotation)

				</summary>
				<parameter name="packet_entity_head_rotation"/>
			</function>
			<function line="264" name="handleBlockChange">
				<summary>function NetServerHandler:handleBlockChange(packet_BlockChange)

				</summary>
				<parameter name="packet_BlockChange"/>
			</function>
			<function line="269" name="handleBlockMultiChange">
				<summary>function NetServerHandler:handleBlockMultiChange(packet_BlockMultiChange)

				</summary>
				<parameter name="packet_BlockMultiChange"/>
			</function>
			<function line="288" name="handleBlockPieces">
				<summary>function NetServerHandler:handleBlockPieces(packet_BlockPieces)

				</summary>
				<parameter name="packet_BlockPieces"/>
			</function>
			<function line="296" name="handleClickBlock">
				<summary>function NetServerHandler:handleClickBlock(packet_ClickBlock)

				</summary>
				<parameter name="packet_ClickBlock"/>
			</function>
			<function line="301" name="handleClickEntity">
				<summary>function NetServerHandler:handleClickEntity(packet_ClickEntity)

				</summary>
				<parameter name="packet_ClickEntity"/>
			</function>
			<function line="307" name="handleEntityMetadata">
				<summary>function NetServerHandler:handleEntityMetadata(packet_EntityMetadata)

				</summary>
				<parameter name="packet_EntityMetadata"/>
			</function>
			<function line="317" name="handleChat">
				<summary>function NetServerHandler:handleChat(packet_Chat)

				</summary>
				<parameter name="packet_Chat"/>
			</function>
			<function line="326" name="handleUpdateEntitySign">
				<summary>function NetServerHandler:handleUpdateEntitySign(packet_UpdateEntitySign)

				</summary>
				<parameter name="packet_UpdateEntitySign"/>
			</function>
			<function line="333" name="handleClientCommand">
				<summary>function NetServerHandler:handleClientCommand(packet_ClientCommand)

				</summary>
				<parameter name="packet_ClientCommand"/>
			</function>
			<function line="343" name="handleUpdateEnv">
				<summary>function NetServerHandler:handleUpdateEnv(packet_env)

				</summary>
				<parameter name="packet_env"/>
			</function>
			<function line="347" name="handleEntityFunction">
				<summary>function NetServerHandler:handleEntityFunction(packet_EntityFunction)

				</summary>
				<parameter name="packet_EntityFunction"/>
			</function>
		</table>
		<table name="NetworkMain" src="script\apps\Aries\Creator\Game\Network\NetworkMain.lua">
			<function line="30" name="StartServer">
				<summary>function NetworkMain:StartServer(host, port)
restart the server on ip:port for the currently loaded world
   @param host: default to "0.0.0.0" which is listening all local ips
   @param port: default to "8099". if port is "0", we will not listen for incoming connection
				</summary>
				<parameter name="host">default to "0.0.0.0" which is listening all local ips
				</parameter>
				<parameter name="port">default to "8099". if port is "0", we will not listen for incoming connection
				</parameter>
			</function>
			<function line="45" name="StartServerViaTunnel">
				<summary>function NetworkMain:StartServerViaTunnel(host, port, room_key, username, password)
start server using tunnel service
				</summary>
				<parameter name="host"/>
				<parameter name="port"/>
				<parameter name="room_key"/>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="86" name="GetServerManager">
				<summary>function NetworkMain:GetServerManager()

				</summary>
			</function>
			<function line="90" name="IsServerStarted">
				<summary>function NetworkMain:IsServerStarted()

				</summary>
			</function>
			<function line="96" name="InitCommon">
				<summary>function NetworkMain:InitCommon()

				</summary>
			</function>
			<function line="113" name="StartServerFromConfigFile">
				<summary>function NetworkMain:StartServerFromConfigFile(filename)
start listening on ip and port.
   @param filename: config file name, default to "config/private_server.config.xml"
				</summary>
				<parameter name="filename">config file name, default to "config/private_server.config.xml"
				</parameter>
			</function>
			<function line="123" name="GetClient">
				<summary>function NetworkMain:GetClient(name)
create get the client interface by name address.
   @param name: if nil, it is default. 
				</summary>
				<parameter name="name">if nil, it is default. 
				</parameter>
			</function>
			<function line="131" name="AddClient">
				<summary>function NetworkMain:AddClient(client)

				</summary>
				<parameter name="client"/>
			</function>
			<function line="138" name="CheckLoadClient">
				<summary>function NetworkMain:CheckLoadClient()

				</summary>
			</function>
			<function line="151" name="SanitizeUsername">
				<summary>function NetworkMain:SanitizeUsername(username)

				</summary>
				<parameter name="username"/>
			</function>
			<function line="157" name="ConnectViaTunnel">
				<summary>function NetworkMain:ConnectViaTunnel(ip, port, room_key, username, password)
call this function to establish a connection to a given server via tunnel server
				</summary>
				<parameter name="ip"/>
				<parameter name="port"/>
				<parameter name="room_key"/>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="180" name="Connect">
				<summary>function NetworkMain:Connect(ip, port, username, password, tunnelClient)
call this function to establish a connection to a given server
				</summary>
				<parameter name="ip"/>
				<parameter name="port"/>
				<parameter name="username"/>
				<parameter name="password"/>
				<parameter name="tunnelClient"/>
			</function>
			<function line="193" name="Disconnect">
				<summary>function NetworkMain:Disconnect()

				</summary>
			</function>
			<function line="201" name="Stop">
				<summary>function NetworkMain:Stop()
stop all servers.
				</summary>
			</function>
			<function line="206" name="AddWorld">
				<summary>function NetworkMain:AddWorld(world)
add a world
				</summary>
				<parameter name="world"/>
			</function>
			<function line="211" name="RunCommand">
				<summary>function NetworkMain:RunCommand(cmd)
run a command on all servers. 
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="217" name="TickServer">
				<summary>function NetworkMain:TickServer()

				</summary>
			</function>
		</table>
		<table name="PlayerManager" src="script\apps\Aries\Creator\Game\Network\PlayerManager.lua">
			<function line="30" name="ctor">
				<summary>function PlayerManager:ctor()

				</summary>
			</function>
			<function line="42" name="Init">
				<summary>function PlayerManager:Init(worldserver, view_distance)

				</summary>
				<parameter name="worldserver"/>
				<parameter name="view_distance"/>
			</function>
			<function line="48" name="GetWorldServer">
				<summary>function PlayerManager:GetWorldServer()

				</summary>
			</function>
			<function line="52" name="IsPlayerWatchingChunk">
				<summary>function PlayerManager:IsPlayerWatchingChunk(entityMP, chunkX, chunkZ)

				</summary>
				<parameter name="entityMP"/>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="56" name="GetChunkObservers">
				<summary>function PlayerManager:GetChunkObservers()

				</summary>
			</function>
			<function line="61" name="GetChunkObserversWithPlayers">
				<summary>function PlayerManager:GetChunkObserversWithPlayers()
retrun chunk observers that has changes since last tick
				</summary>
			</function>
			<function line="65" name="GetOrCreateChunkObserver">
				<summary>function PlayerManager:GetOrCreateChunkObserver(chunkX, chunkZ, bCreateIfNotExist)

				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="78" name="MarkBlockForUpdate">
				<summary>function PlayerManager:MarkBlockForUpdate(x,y,z)
Called by WorldManager:MarkBlockForUpdate; marks a block to be resent to clients.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="89" name="OnChunkGenerated">
				<summary>function PlayerManager:OnChunkGenerated(chunkX, chunkZ)
a chunk is regenerated, we need to send it to all observing clients
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="97" name="SendAllChunkUpdates">
				<summary>function PlayerManager:SendAllChunkUpdates()
call this function on server tick to send chunk updates to all observing players
				</summary>
			</function>
			<function line="120" name="AddPlayer">
				<summary>function PlayerManager:AddPlayer(entityPlayer)
Adds an EntityPlayerMP to the PlayerManager.
				</summary>
				<parameter name="entityPlayer"/>
			</function>
			<function line="138" name="RemovePlayer">
				<summary>function PlayerManager:RemovePlayer(entityPlayer)
remove EntityPlayerMP when it disconnects
				</summary>
				<parameter name="entityPlayer"/>
			</function>
			<function line="155" name="IsRectOverlap">
				<summary>function PlayerManager:IsRectOverlap(x1, z1, x2, z2, radius)
Determine if two rectangles centered at the given points overlap for the provided radius. 
				</summary>
				<parameter name="x1"/>
				<parameter name="z1"/>
				<parameter name="x2"/>
				<parameter name="z2"/>
				<parameter name="radius"/>
			</function>
			<function line="163" name="UpdateMovingPlayer">
				<summary>function PlayerManager:UpdateMovingPlayer(entityMP)
update chunks around a EntityMP player being moved by server logic
only update when player has moved enough distance from last update. 
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="204" name="SendToObservingPlayers">
				<summary>function PlayerManager:SendToObservingPlayers(x,y,z, packet, excludingEntityMP)
send a packet to all players watching the chunk containing the given position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="packet"/>
				<parameter name="excludingEntityMP"/>
			</function>
			<function line="214" name="FilterChunkLoadQueue">
				<summary>function PlayerManager:FilterChunkLoadQueue(entityMP)
Removes all chunks from the given player's chunk load queue that are not in viewing range of the player.
				</summary>
				<parameter name="entityMP"/>
			</function>
		</table>
		<table name="PlayerManagerClient" src="script\apps\Aries\Creator\Game\Network\PlayerManagerClient.lua">
			<function line="30" name="ctor">
				<summary>function PlayerManagerClient:ctor()

				</summary>
			</function>
			<function line="36" name="Init">
				<summary>function PlayerManagerClient:Init(worldclient)

				</summary>
				<parameter name="worldclient"/>
			</function>
			<function line="41" name="GetWorldClient">
				<summary>function PlayerManagerClient:GetWorldClient()

				</summary>
			</function>
			<function line="45" name="GetChunkObservers">
				<summary>function PlayerManagerClient:GetChunkObservers()

				</summary>
			</function>
			<function line="49" name="GetOrCreateChunkObserver">
				<summary>function PlayerManagerClient:GetOrCreateChunkObserver(chunkX, chunkZ, bCreateIfNotExist)

				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="62" name="MarkBlockForUpdate">
				<summary>function PlayerManagerClient:MarkBlockForUpdate(x,y,z)
Called by WorldManager:MarkBlockForUpdate; marks a block to be resent to clients.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="72" name="AreChunksDirty">
				<summary>function PlayerManagerClient:AreChunksDirty()

				</summary>
			</function>
			<function line="82" name="SendAllChunkUpdates">
				<summary>function PlayerManagerClient:SendAllChunkUpdates(bForceSend)
call this function on client tick to send all chunks updates to server
   @param bForceSend: if true chunk update is sent, otherwise only send at fixed interval.
				</summary>
				<parameter name="bForceSend">if true chunk update is sent, otherwise only send at fixed interval.
				</parameter>
			</function>
		</table>
		<table name="ServerListener" src="script\apps\Aries\Creator\Game\Network\ServerListener.lua">
			<function line="30" name="OnAcceptIncomingConnection">
				<summary>function ServerListener:OnAcceptIncomingConnection(msg, tunnelClient)
whenever an unknown pending message is received. 
				</summary>
				<parameter name="msg"/>
				<parameter name="tunnelClient"/>
			</function>
			<function line="46" name="ProcessPendingConnections">
				<summary>function ServerListener:ProcessPendingConnections()
this function is called periodically to remove any timed-out pending connections
				</summary>
			</function>
			<function line="68" name="AddPendingConnection">
				<summary>function ServerListener:AddPendingConnection(tid, login_handler)

				</summary>
				<parameter name="tid"/>
				<parameter name="login_handler"/>
			</function>
		</table>
		<table name="ServerManager" src="script\apps\Aries\Creator\Game\Network\ServerManager.lua">
			<function line="37" name="ctor">
				<summary>function ServerManager:ctor()

				</summary>
			</function>
			<function line="62" name="GetSingleton">
				<summary>function ServerManager.GetSingleton()

				</summary>
			</function>
			<function line="72" name="GameMode">
				<summary>function ServerManager:GameMode()
get the gamemode object
				</summary>
			</function>
			<function line="76" name="CreateWorldServer">
				<summary>function ServerManager:CreateWorldServer(worldpath)

				</summary>
				<parameter name="worldpath"/>
			</function>
			<function line="87" name="Init">
				<summary>function ServerManager:Init(host, port, username, tunnelClient)

				</summary>
				<parameter name="host"/>
				<parameter name="port"/>
				<parameter name="username"/>
				<parameter name="tunnelClient"/>
			</function>
			<function line="108" name="LoadNetworkSettings">
				<summary>function ServerManager:LoadNetworkSettings()

				</summary>
			</function>
			<function line="121" name="IsStarted">
				<summary>function ServerManager:IsStarted()

				</summary>
			</function>
			<function line="126" name="GetWorldServerForDimension">
				<summary>function ServerManager:GetWorldServerForDimension(nIndex)

   @param nIndex: default to 1
				</summary>
				<parameter name="nIndex">default to 1
				</parameter>
			</function>
			<function line="130" name="Cleanup">
				<summary>function ServerManager:Cleanup()

				</summary>
			</function>
			<function line="138" name="Shutdown">
				<summary>function ServerManager:Shutdown()

				</summary>
			</function>
			<function line="151" name="TickServerWorlds">
				<summary>function ServerManager:TickServerWorlds()

				</summary>
			</function>
			<function line="181" name="Tick">
				<summary>function ServerManager:Tick()
this function is called periodically. 
				</summary>
			</function>
			<function line="186" name="GetBannedIPs">
				<summary>function ServerManager:GetBannedIPs()

				</summary>
			</function>
			<function line="191" name="AddAdmin">
				<summary>function ServerManager:AddAdmin(username)
This adds a username to the admin list, then saves the op list
				</summary>
				<parameter name="username"/>
			</function>
			<function line="196" name="RemoveAdmin">
				<summary>function ServerManager:RemoveAdmin(username)
This removes a username from the admin list, then saves the op list
				</summary>
				<parameter name="username"/>
			</function>
			<function line="201" name="IsAllowedToLogin">
				<summary>function ServerManager:IsAllowedToLogin(name)
Determine if the player is allowed to connect based on current server settings.
				</summary>
				<parameter name="name"/>
			</function>
			<function line="208" name="IsUserAllowedToConnect">
				<summary>function ServerManager:IsUserAllowedToConnect(ip, username)
checks ban-lists, then white-lists, then space for the server. 
Returns nil on success, or an error message
				</summary>
				<parameter name="ip"/>
				<parameter name="username"/>
			</function>
			<function line="226" name="ReadPlayerDataFromFile">
				<summary>function ServerManager:ReadPlayerDataFromFile(entityMP)
called during player login. reads the player information from disk.
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="245" name="CreatePlayerForUser">
				<summary>function ServerManager:CreatePlayerForUser(username)
also checks for multiple logins
   @return server side player entity
				</summary>
				<parameter name="username"/>
				<returns>return side player entity
				</returns>
			</function>
			<function line="274" name="InitializeConnectionToPlayer">
				<summary>function ServerManager:InitializeConnectionToPlayer(playerConnection, entityMP)
initialize connection and handler for the given player. 
				</summary>
				<parameter name="playerConnection"/>
				<parameter name="entityMP"/>
			</function>
			<function line="303" name="GetEntityViewDistance">
				<summary>function ServerManager:GetEntityViewDistance()

				</summary>
			</function>
			<function line="309" name="SendChatMsg">
				<summary>function ServerManager:SendChatMsg(chatmsg, chatdata)
Sends the given string to every player as chat message.
   @param chatmsg: ChatMessage or string. 
				</summary>
				<parameter name="chatmsg">ChatMessage or string. 
				</parameter>
				<parameter name="chatdata"/>
			</function>
			<function line="320" name="GetViewDistance">
				<summary>function ServerManager:GetViewDistance()

				</summary>
			</function>
			<function line="325" name="WritePlayerData">
				<summary>function ServerManager:WritePlayerData(entityMP)
Writes player data to disk
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="329" name="GetMaxPlayers">
				<summary>function ServerManager:GetMaxPlayers()

				</summary>
			</function>
			<function line="334" name="SendPacketToAllPlayers">
				<summary>function ServerManager:SendPacketToAllPlayers(packet)
sends a packet to all players
				</summary>
				<parameter name="packet"/>
			</function>
			<function line="342" name="PlayerLoggedIn">
				<summary>function ServerManager:PlayerLoggedIn(entityMP)
Called when a player successfully logs in. Reads player data from disk and inserts the player into the world.
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="357" name="PlayerLoggedOut">
				<summary>function ServerManager:PlayerLoggedOut(entityMP)
Called when a player disconnects from the game. Writes player data to disk and removes them from the world.
				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="371" name="VerifyUserNamePassword">
				<summary>function ServerManager:VerifyUserNamePassword(username, password)

				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
		</table>
		<table name="ServerManagerDedicated" src="script\apps\Aries\Creator\Game\Network\ServerManagerDedicated.lua">
			<function line="23" name="ctor">
				<summary>function ServerManagerDedicated:ctor()

				</summary>
			</function>
		</table>
		<table name="WorldClient" src="script\apps\Aries\Creator\Game\Network\WorldClient.lua">
			<function line="25" name="ctor">
				<summary>function WorldClient:ctor()

				</summary>
			</function>
			<function line="29" name="Init">
				<summary>function WorldClient:Init(name)

   @param name: must be a unique name, the client side server defaults to "default"
				</summary>
				<parameter name="name">must be a unique name, the client side server defaults to "default"
				</parameter>
			</function>
			<function line="47" name="PrepareNetWorkWorld">
				<summary>function WorldClient:PrepareNetWorkWorld()
create empty local disk path. 
				</summary>
			</function>
			<function line="56" name="GetWorldPath">
				<summary>function WorldClient:GetWorldPath()

				</summary>
			</function>
			<function line="60" name="InitBlockGenerator">
				<summary>function WorldClient:InitBlockGenerator()

				</summary>
			</function>
			<function line="69" name="OnPreloadWorld">
				<summary>function WorldClient:OnPreloadWorld()

				</summary>
			</function>
			<function line="80" name="SetName">
				<summary>function WorldClient:SetName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="84" name="GetName">
				<summary>function WorldClient:GetName(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="88" name="OnWeaklyDestroyWorld">
				<summary>function WorldClient:OnWeaklyDestroyWorld()

				</summary>
			</function>
			<function line="93" name="OnExit">
				<summary>function WorldClient:OnExit()

				</summary>
			</function>
			<function line="99" name="CreateChunkProvider">
				<summary>function WorldClient:CreateChunkProvider()
virtual function: Creates the chunk provider for this world. Called in the constructor. 
				</summary>
			</function>
			<function line="105" name="GetPlayerManager">
				<summary>function WorldClient:GetPlayerManager()

				</summary>
			</function>
			<function line="110" name="Login">
				<summary>function WorldClient:Login(params)

   @param params: {ip, port, thread, username, password, name, tunnelClient}
				</summary>
				<parameter name="params">{ip, port, thread, username, password, name, tunnelClient}
				</parameter>
			</function>
			<function line="136" name="EnableAdvancedWorldEditing">
				<summary>function WorldClient:EnableAdvancedWorldEditing(bEnabled)
whether we will edit remote world in any way we like. 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="145" name="Disconnect">
				<summary>function WorldClient:Disconnect()

				</summary>
			</function>
			<function line="151" name="IsClient">
				<summary>function WorldClient:IsClient()

				</summary>
			</function>
			<function line="155" name="Tick">
				<summary>function WorldClient:Tick()

				</summary>
			</function>
			<function line="161" name="CreateClientPlayer">
				<summary>function WorldClient:CreateClientPlayer(clientEntityId, netClientHandler)

				</summary>
				<parameter name="clientEntityId"/>
				<parameter name="netClientHandler"/>
			</function>
			<function line="167" name="GetPlayer">
				<summary>function WorldClient:GetPlayer()

				</summary>
			</function>
			<function line="171" name="RemoveEntityFromWorld">
				<summary>function WorldClient:RemoveEntityFromWorld(entityId)

				</summary>
				<parameter name="entityId"/>
			</function>
			<function line="179" name="CreateBlockPieces">
				<summary>function WorldClient:CreateBlockPieces(block_template, blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz)

				</summary>
				<parameter name="block_template"/>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity"/>
				<parameter name="texture_filename"/>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
			</function>
		</table>
		<table name="WorldServer" src="script\apps\Aries\Creator\Game\Network\WorldServer.lua">
			<function line="33" name="ctor">
				<summary>function WorldServer:ctor()

				</summary>
			</function>
			<function line="38" name="Init">
				<summary>function WorldServer:Init(name, worldpath, server_manager, save_handler)

   @param name: must be a unique name, the client side server defaults to "default"
				</summary>
				<parameter name="name">must be a unique name, the client side server defaults to "default"
				</parameter>
				<parameter name="worldpath"/>
				<parameter name="server_manager"/>
				<parameter name="save_handler"/>
			</function>
			<function line="57" name="OnTexturePackChanged">
				<summary>function WorldServer:OnTexturePackChanged()

				</summary>
			</function>
			<function line="70" name="ReplaceWorld">
				<summary>function WorldServer:ReplaceWorld(oldWorld)

				</summary>
				<parameter name="oldWorld"/>
			</function>
			<function line="77" name="OnExit">
				<summary>function WorldServer:OnExit()

				</summary>
			</function>
			<function line="87" name="OnPreloadWorld">
				<summary>function WorldServer:OnPreloadWorld()

				</summary>
			</function>
			<function line="93" name="CreateAdminPlayer">
				<summary>function WorldServer:CreateAdminPlayer()
the server world will spawn a admin MP player on behalf of itself and assign it to PlayerController. 
this is the case, where the server process is a on private server with 3D rendering.  
				</summary>
			</function>
			<function line="107" name="GetEntityTracker">
				<summary>function WorldServer:GetEntityTracker()

				</summary>
			</function>
			<function line="111" name="GetServerManager">
				<summary>function WorldServer:GetServerManager()

				</summary>
			</function>
			<function line="115" name="GetPlayerManager">
				<summary>function WorldServer:GetPlayerManager()

				</summary>
			</function>
			<function line="120" name="Flush">
				<summary>function WorldServer:Flush()
clear in-memory data and flush to disk.  FlushToDisk is disabled on GSL lite server. 
				</summary>
			</function>
			<function line="124" name="Load">
				<summary>function WorldServer:Load()
Always load empty world for GSL lite server. For full server, this will load from BlockWorldProvider. 
				</summary>
			</function>
			<function line="128" name="Login">
				<summary>function WorldServer:Login(user, baseworld_md5)
if baseworld md5 is same as the current one on the server, it is used.  otherwise ignored. 
				</summary>
				<parameter name="user"/>
				<parameter name="baseworld_md5"/>
			</function>
			<function line="132" name="Rebase">
				<summary>function WorldServer:Rebase(md5)
rebase the md5
				</summary>
				<parameter name="md5"/>
			</function>
			<function line="136" name="Destroy">
				<summary>function WorldServer:Destroy()
called externally when this server is just stoped. 
				</summary>
			</function>
			<function line="141" name="RunCommand">
				<summary>function WorldServer:RunCommand(cmd)
run a given command
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="150" name="IsRemoved">
				<summary>function WorldServer:IsRemoved()
return true to remove this world server from server list. 
				</summary>
			</function>
			<function line="155" name="SetDead">
				<summary>function WorldServer:SetDead()
remove this world server
				</summary>
			</function>
			<function line="160" name="Tick">
				<summary>function WorldServer:Tick()

				</summary>
			</function>
			<function line="166" name="AddPlayerEntity">
				<summary>function WorldServer:AddPlayerEntity(entityMP)

				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="170" name="RemovePlayerEntity">
				<summary>function WorldServer:RemovePlayerEntity(entityMP)

				</summary>
				<parameter name="entityMP"/>
			</function>
			<function line="174" name="GetPlayerEntities">
				<summary>function WorldServer:GetPlayerEntities()

				</summary>
			</function>
			<function line="178" name="CreateBlockPieces">
				<summary>function WorldServer:CreateBlockPieces(block_template, blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz)

				</summary>
				<parameter name="block_template"/>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity"/>
				<parameter name="texture_filename"/>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
			</function>
		</table>
		<table name="AuthUserList" src="script\apps\Aries\Creator\Game\Network\Config\AuthUserList.lua">
			<function line="17" name="ctor">
				<summary>function AuthUserList:ctor()

				</summary>
			</function>
			<function line="23" name="Init">
				<summary>function AuthUserList:Init(filename)
Sets the NetHandler. Server-only.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="30" name="isListActive">
				<summary>function AuthUserList:isListActive()

				</summary>
			</function>
			<function line="34" name="isBanned">
				<summary>function AuthUserList:isBanned(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="43" name="RemoveExpiredBans">
				<summary>function AuthUserList:RemoveExpiredBans()

				</summary>
			</function>
			<function line="48" name="LoadAuthUserList">
				<summary>function AuthUserList:LoadAuthUserList()
Loads the ban list from the file (adds every entry, does not clear the current list).
				</summary>
			</function>
			<function line="52" name="SaveToFile">
				<summary>function AuthUserList:SaveToFile()

				</summary>
			</function>
		</table>
		<table name="BanList" src="script\apps\Aries\Creator\Game\Network\Config\BanList.lua">
			<function line="17" name="ctor">
				<summary>function BanList:ctor()

				</summary>
			</function>
			<function line="23" name="Init">
				<summary>function BanList:Init(filename)
Sets the NetHandler. Server-only.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="30" name="isListActive">
				<summary>function BanList:isListActive()

				</summary>
			</function>
			<function line="34" name="isBanned">
				<summary>function BanList:isBanned(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="43" name="RemoveExpiredBans">
				<summary>function BanList:RemoveExpiredBans()

				</summary>
			</function>
			<function line="48" name="LoadBanList">
				<summary>function BanList:LoadBanList()
Loads the ban list from the file (adds every entry, does not clear the current list).
				</summary>
			</function>
			<function line="52" name="SaveToFile">
				<summary>function BanList:SaveToFile()

				</summary>
			</function>
		</table>
		<table name="PasswordList" src="script\apps\Aries\Creator\Game\Network\Config\PasswordList.lua">
			<function line="22" name="ctor">
				<summary>function PasswordList:ctor()

				</summary>
			</function>
			<function line="30" name="Init">
				<summary>function PasswordList:Init(filename)
Sets the NetHandler. Server-only.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="36" name="IsEmpty">
				<summary>function PasswordList:IsEmpty()

				</summary>
			</function>
			<function line="41" name="CheckUser">
				<summary>function PasswordList:CheckUser(username, password)
return true if user and password match. 
				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="48" name="HasUser">
				<summary>function PasswordList:HasUser(username)
return true if user exist
				</summary>
				<parameter name="username"/>
			</function>
			<function line="55" name="AddUser">
				<summary>function PasswordList:AddUser(username, password)
it will add user or change password of existing user. 
				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="63" name="SetModified">
				<summary>function PasswordList:SetModified()

				</summary>
			</function>
			<function line="75" name="RemoveUser">
				<summary>function PasswordList:RemoveUser(username)
it will add user or change password of existing user. 
				</summary>
				<parameter name="username"/>
			</function>
			<function line="83" name="LoadPasswordList">
				<summary>function PasswordList:LoadPasswordList()

				</summary>
			</function>
			<function line="112" name="SaveToFile">
				<summary>function PasswordList:SaveToFile()
only save when modified. 
				</summary>
			</function>
		</table>
		<table name="ServerConfig" src="script\apps\Aries\Creator\Game\Network\Config\ServerConfig.lua">
			<function line="17" name="ctor">
				<summary>function ServerConfig:ctor()

				</summary>
			</function>
			<function line="23" name="Init">
				<summary>function ServerConfig:Init(filename)
Sets the NetHandler. Server-only.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="30" name="isListActive">
				<summary>function ServerConfig:isListActive()

				</summary>
			</function>
			<function line="34" name="isBanned">
				<summary>function ServerConfig:isBanned(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="43" name="RemoveExpiredBans">
				<summary>function ServerConfig:RemoveExpiredBans()

				</summary>
			</function>
			<function line="48" name="LoadServerConfig">
				<summary>function ServerConfig:LoadServerConfig()
Loads the ban list from the file (adds every entry, does not clear the current list).
				</summary>
			</function>
			<function line="52" name="SaveToFile">
				<summary>function ServerConfig:SaveToFile()

				</summary>
			</function>
		</table>
		<table name="Packet" src="script\apps\Aries\Creator\Game\Network\Packets\Packet.lua">
			<function line="17" name="ctor">
				<summary>function Packet:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function Packet:Init(msg)
initialize packet
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="27" name="GetInstance">
				<summary>function Packet:GetInstance()
static function: create a new instance, just in case it is a singleton. it may return self. 
				</summary>
			</function>
			<function line="32" name="GetPacketId">
				<summary>function Packet:GetPacketId()
Returns the ID of this packet. A faster way is to access the self.id. 
				</summary>
			</function>
			<function line="37" name="ReadPacket">
				<summary>function Packet:ReadPacket(msg)
virtual: read packet from network msg data
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="43" name="WritePacket">
				<summary>function Packet:WritePacket()
virtual: By default, the packet itself is used as the raw message.
   @return a packet to be send. 
				</summary>
				<returns>return packet to be send. 
				</returns>
			</function>
			<function line="48" name="ProcessPacket">
				<summary>function Packet:ProcessPacket(net_handler)
virtual: Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="54" name="Send">
				<summary>function Packet:Send(connection)
virtual: send packet immediately to c++ queue
sometimes, we do data compression here and then send the raw messages out. 
By default, the packet itself is used as the raw message. 
				</summary>
				<parameter name="connection"/>
			</function>
		</table>
		<table name="PacketAnimation" src="script\apps\Aries\Creator\Game\Network\Packets\PacketAnimation.lua">
			<function line="16" name="ctor">
				<summary>function PacketAnimation:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketAnimation:Init(entity, anim_id)

				</summary>
				<parameter name="entity"/>
				<parameter name="anim_id"/>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketAnimation:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketAttachEntity" src="script\apps\Aries\Creator\Game\Network\Packets\PacketAttachEntity.lua">
			<function line="18" name="ctor">
				<summary>function PacketAttachEntity:ctor()

				</summary>
			</function>
			<function line="22" name="Init">
				<summary>function PacketAttachEntity:Init(type, fromEntity, vehicleEntity)

   @param vehicleEntity: nil means unmount
				</summary>
				<parameter name="type"/>
				<parameter name="fromEntity"/>
				<parameter name="vehicleEntity">nil means unmount
				</parameter>
			</function>
			<function line="34" name="ProcessPacket">
				<summary>function PacketAttachEntity:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketAuthUser" src="script\apps\Aries\Creator\Game\Network\Packets\PacketAuthUser.lua">
			<function line="16" name="ctor">
				<summary>function PacketAuthUser:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketAuthUser:Init(username, password, result, serverInfo)

				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
				<parameter name="result"/>
				<parameter name="serverInfo"/>
			</function>
			<function line="28" name="ProcessPacket">
				<summary>function PacketAuthUser:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketBlockChange" src="script\apps\Aries\Creator\Game\Network\Packets\PacketBlockChange.lua">
			<function line="17" name="ctor">
				<summary>function PacketBlockChange:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketBlockChange:Init(x,y,z, id, world)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="id"/>
				<parameter name="world"/>
			</function>
			<function line="30" name="ProcessPacket">
				<summary>function PacketBlockChange:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketBlockDestroy" src="script\apps\Aries\Creator\Game\Network\Packets\PacketBlockDestroy.lua">
			<function line="16" name="ctor">
				<summary>function PacketBlockDestroy:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketBlockDestroy:Init(entityId, x,y,z,destroyedStage)

				</summary>
				<parameter name="entityId"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="destroyedStage"/>
			</function>
			<function line="24" name="ProcessPacket">
				<summary>function PacketBlockDestroy:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketBlockMultiChange" src="script\apps\Aries\Creator\Game\Network\Packets\PacketBlockMultiChange.lua">
			<function line="22" name="ctor">
				<summary>function PacketBlockMultiChange:ctor()

				</summary>
			</function>
			<function line="25" name="Init">
				<summary>function PacketBlockMultiChange:Init(chunkX, chunkZ, blockList, count)

				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="blockList"/>
				<parameter name="count"/>
			</function>
			<function line="49" name="ProcessPacket">
				<summary>function PacketBlockMultiChange:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketBlockPieces" src="script\apps\Aries\Creator\Game\Network\Packets\PacketBlockPieces.lua">
			<function line="17" name="ctor">
				<summary>function PacketBlockPieces:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketBlockPieces:Init(blockid, x,y,z, granularity)

				</summary>
				<parameter name="blockid"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="granularity"/>
			</function>
			<function line="30" name="ProcessPacket">
				<summary>function PacketBlockPieces:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketChat" src="script\apps\Aries\Creator\Game\Network\Packets\PacketChat.lua">
			<function line="18" name="ctor">
				<summary>function PacketChat:ctor()

				</summary>
			</function>
			<function line="22" name="Init">
				<summary>function PacketChat:Init(chatmsg, chatdata)

   @param chatmsg: must be a ChatMessage object or text. 
				</summary>
				<parameter name="chatmsg">must be a ChatMessage object or text. 
				</parameter>
				<parameter name="chatdata"/>
			</function>
			<function line="34" name="ProcessPacket">
				<summary>function PacketChat:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="41" name="ToChatMessage">
				<summary>function PacketChat:ToChatMessage()
create a chat message class object from this object. 
				</summary>
			</function>
		</table>
		<table name="PacketClickBlock" src="script\apps\Aries\Creator\Game\Network\Packets\PacketClickBlock.lua">
			<function line="17" name="ctor">
				<summary>function PacketClickBlock:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketClickBlock:Init(block_id, x, y, z, mouse_button, entity, side)

				</summary>
				<parameter name="block_id"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side"/>
			</function>
			<function line="34" name="ProcessPacket">
				<summary>function PacketClickBlock:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketClickEntity" src="script\apps\Aries\Creator\Game\Network\Packets\PacketClickEntity.lua">
			<function line="17" name="ctor">
				<summary>function PacketClickEntity:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketClickEntity:Init(playerEntity, targetEntity, mouse_button, x, y, z)

				</summary>
				<parameter name="playerEntity"/>
				<parameter name="targetEntity"/>
				<parameter name="mouse_button"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="35" name="ProcessPacket">
				<summary>function PacketClickEntity:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketClientCommand" src="script\apps\Aries\Creator\Game\Network\Packets\PacketClientCommand.lua">
			<function line="17" name="ctor">
				<summary>function PacketClientCommand:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketClientCommand:Init(cmd)

				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketClientCommand:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketCustomPayload" src="script\apps\Aries\Creator\Game\Network\Packets\PacketCustomPayload.lua">
			<function line="16" name="ctor">
				<summary>function PacketCustomPayload:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketCustomPayload:Init(name, data)

				</summary>
				<parameter name="name"/>
				<parameter name="data"/>
			</function>
			<function line="25" name="ProcessPacket">
				<summary>function PacketCustomPayload:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketDestroyEntity" src="script\apps\Aries\Creator\Game\Network\Packets\PacketDestroyEntity.lua">
			<function line="18" name="ctor">
				<summary>function PacketDestroyEntity:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketDestroyEntity:Init(entity_ids)

				</summary>
				<parameter name="entity_ids"/>
			</function>
			<function line="27" name="ProcessPacket">
				<summary>function PacketDestroyEntity:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityAction" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityAction.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityAction:ctor()

				</summary>
			</function>
			<function line="23" name="Init">
				<summary>function PacketEntityAction:Init(state, entity, param1)

   @param state: 0 is play action animation. 
1 is mount on the given entity. 
				</summary>
				<parameter name="state">0 is play action animation. 
1 is mount on the given entity. 
				</parameter>
				<parameter name="entity"/>
				<parameter name="param1"/>
			</function>
			<function line="35" name="ProcessPacket">
				<summary>function PacketEntityAction:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityEffect" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityEffect.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityEffect:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketEntityEffect:Init()

				</summary>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketEntityEffect:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityHeadRotation" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityHeadRotation.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityHeadRotation:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketEntityHeadRotation:Init(entityId, rot, pitch)

				</summary>
				<parameter name="entityId"/>
				<parameter name="rot"/>
				<parameter name="pitch"/>
			</function>
			<function line="29" name="ProcessPacket">
				<summary>function PacketEntityHeadRotation:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityMetadata" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityMetadata.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityMetadata:ctor()

				</summary>
			</function>
			<function line="23" name="Init">
				<summary>function PacketEntityMetadata:Init(entityId, dataWatcher, bAllObject)

   @param bAllObject: if true, we will send all objects regardless of changes, which is the case when an entity is first tracked. 
if false, we will only send changed data and set all data to be unmodified, which is the case for normal update tick updates. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="dataWatcher"/>
				<parameter name="bAllObject">if true, we will send all objects regardless of changes, which is the case when an entity is first tracked. 
if false, we will only send changed data and set all data to be unmodified, which is the case for normal update tick updates. 
				</parameter>
			</function>
			<function line="34" name="ReadPacket">
				<summary>function PacketEntityMetadata:ReadPacket(msg)
virtual: read packet from network msg data
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="40" name="GetMetadata">
				<summary>function PacketEntityMetadata:GetMetadata()
the list of watcheble objects
				</summary>
			</function>
			<function line="46" name="WritePacket">
				<summary>function PacketEntityMetadata:WritePacket()
virtual: By default, the packet itself is used as the raw message.
   @return a packet to be send. 
				</summary>
				<returns>return packet to be send. 
				</returns>
			</function>
			<function line="55" name="ProcessPacket">
				<summary>function PacketEntityMetadata:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityMobSpawn" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityMobSpawn.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityMobSpawn:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketEntityMobSpawn:Init(entity, entity_type)

				</summary>
				<parameter name="entity"/>
				<parameter name="entity_type"/>
			</function>
			<function line="41" name="ReadPacket">
				<summary>function PacketEntityMobSpawn:ReadPacket(msg)
virtual: read packet from network msg data
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="50" name="GetMetadata">
				<summary>function PacketEntityMobSpawn:GetMetadata()
the list of watcheble objects
				</summary>
			</function>
			<function line="56" name="WritePacket">
				<summary>function PacketEntityMobSpawn:WritePacket()
virtual: By default, the packet itself is used as the raw message.
   @return a packet to be send. 
				</summary>
				<returns>return packet to be send. 
				</returns>
			</function>
			<function line="65" name="ProcessPacket">
				<summary>function PacketEntityMobSpawn:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityMovableSpawn" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityMovableSpawn.lua">
			<function line="16" name="ctor">
				<summary>function PacketEntityMovableSpawn:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketEntityMovableSpawn:Init(entity, entity_type)

				</summary>
				<parameter name="entity"/>
				<parameter name="entity_type"/>
			</function>
			<function line="31" name="ProcessPacket">
				<summary>function PacketEntityMovableSpawn:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityPlayerSpawn" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityPlayerSpawn.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityPlayerSpawn:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketEntityPlayerSpawn:Init(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="40" name="ReadPacket">
				<summary>function PacketEntityPlayerSpawn:ReadPacket(msg)
virtual: read packet from network msg data
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="49" name="GetMetadata">
				<summary>function PacketEntityPlayerSpawn:GetMetadata()
the list of watcheble objects
				</summary>
			</function>
			<function line="56" name="WritePacket">
				<summary>function PacketEntityPlayerSpawn:WritePacket()
virtual: By default, the packet itself is used as the raw message.
   @return a packet to be send. 
				</summary>
				<returns>return packet to be send. 
				</returns>
			</function>
			<function line="65" name="ProcessPacket">
				<summary>function PacketEntityPlayerSpawn:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketEntityTeleport" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityTeleport.lua">
			<function line="16" name="ctor">
				<summary>function PacketEntityTeleport:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketEntityTeleport:Init(entityOrId, scaledX, scaledY, scaledZ, facing, pitch)

				</summary>
				<parameter name="entityOrId"/>
				<parameter name="scaledX"/>
				<parameter name="scaledY"/>
				<parameter name="scaledZ"/>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
			<function line="27" name="Init1">
				<summary>function PacketEntityTeleport:Init1(entity)

				</summary>
				<parameter name="entity"/>
			</function>
			<function line="37" name="Init2">
				<summary>function PacketEntityTeleport:Init2(entityId, scaledX, scaledY, scaledZ, facing, pitch)

				</summary>
				<parameter name="entityId"/>
				<parameter name="scaledX"/>
				<parameter name="scaledY"/>
				<parameter name="scaledZ"/>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
			<function line="48" name="ProcessPacket">
				<summary>function PacketEntityTeleport:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="54" name="ContainsSameEntityIDAs">
				<summary>function PacketEntityTeleport:ContainsSameEntityIDAs(packet)

				</summary>
				<parameter name="packet"/>
			</function>
		</table>
		<table name="PacketEntityVelocity" src="script\apps\Aries\Creator\Game\Network\Packets\PacketEntityVelocity.lua">
			<function line="18" name="ctor">
				<summary>function PacketEntityVelocity:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketEntityVelocity:Init()

				</summary>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketEntityVelocity:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketKickDisconnect" src="script\apps\Aries\Creator\Game\Network\Packets\PacketKickDisconnect.lua">
			<function line="16" name="ctor">
				<summary>function PacketKickDisconnect:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketKickDisconnect:Init(reason)

				</summary>
				<parameter name="reason"/>
			</function>
			<function line="25" name="ProcessPacket">
				<summary>function PacketKickDisconnect:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketLevelSound" src="script\apps\Aries\Creator\Game\Network\Packets\PacketLevelSound.lua">
			<function line="16" name="ctor">
				<summary>function PacketLevelSound:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketLevelSound:Init(soundName, x, y, z, volume, pitch)

				</summary>
				<parameter name="soundName"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="25" name="ProcessPacket">
				<summary>function PacketLevelSound:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketLogin" src="script\apps\Aries\Creator\Game\Network\Packets\PacketLogin.lua">
			<function line="16" name="ctor">
				<summary>function PacketLogin:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketLogin:Init(clientEntityId, gameType, maxPlayers)

				</summary>
				<parameter name="clientEntityId"/>
				<parameter name="gameType"/>
				<parameter name="maxPlayers"/>
			</function>
			<function line="26" name="ReadPacket">
				<summary>function PacketLogin:ReadPacket(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="32" name="Send">
				<summary>function PacketLogin:Send(connection)

				</summary>
				<parameter name="connection"/>
			</function>
			<function line="38" name="ProcessPacket">
				<summary>function PacketLogin:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketLoginClient" src="script\apps\Aries\Creator\Game\Network\Packets\PacketLoginClient.lua">
			<function line="16" name="ctor">
				<summary>function PacketLoginClient:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketLoginClient:Init(username, password)

				</summary>
				<parameter name="username"/>
				<parameter name="password"/>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketLoginClient:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketMapChunk" src="script\apps\Aries\Creator\Game\Network\Packets\PacketMapChunk.lua">
			<function line="17" name="ctor">
				<summary>function PacketMapChunk:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketMapChunk:Init(chunk, bIncludeInit, filter)

   @param chatmsg: must be a ChatMessage object. 
				</summary>
				<parameter name="chunk"/>
				<parameter name="bIncludeInit"/>
				<parameter name="filter"/>
			</function>
			<function line="34" name="ProcessPacket">
				<summary>function PacketMapChunk:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="41" name="GetMapChunkData">
				<summary>function PacketMapChunk:GetMapChunkData(chunk, bIncludeInit, filter)
static function. 
				</summary>
				<parameter name="chunk"/>
				<parameter name="bIncludeInit"/>
				<parameter name="filter"/>
			</function>
			<function line="50" name="GetCompressedChunkData">
				<summary>function PacketMapChunk:GetCompressedChunkData()

				</summary>
			</function>
		</table>
		<table name="PacketMapChunkData" src="script\apps\Aries\Creator\Game\Network\Packets\PacketMapChunkData.lua">
			<function line="16" name="ctor">
				<summary>function PacketMapChunkData:ctor()

				</summary>
			</function>
			<function line="22" name="GetCompressedChunkData">
				<summary>function PacketMapChunkData:GetCompressedChunkData()

				</summary>
			</function>
		</table>
		<table name="PacketMapChunks" src="script\apps\Aries\Creator\Game\Network\Packets\PacketMapChunks.lua">
			<function line="17" name="ctor">
				<summary>function PacketMapChunks:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketMapChunks:Init(chunkList)

				</summary>
				<parameter name="chunkList"/>
			</function>
			<function line="42" name="ProcessPacket">
				<summary>function PacketMapChunks:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="48" name="GetNumberOfChunks">
				<summary>function PacketMapChunks:GetNumberOfChunks()

				</summary>
			</function>
			<function line="56" name="GetChunkPosX">
				<summary>function PacketMapChunks:GetChunkPosX(nIndex)

				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="60" name="GetChunkPosZ">
				<summary>function PacketMapChunks:GetChunkPosZ(nIndex)

				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="64" name="GetCompressedChunkData">
				<summary>function PacketMapChunks:GetCompressedChunkData(nIndex)

				</summary>
				<parameter name="nIndex"/>
			</function>
		</table>
		<table name="PacketMove" src="script\apps\Aries\Creator\Game\Network\Packets\PacketMove.lua">
			<function line="16" name="ctor">
				<summary>function PacketMove:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketMove:Init(bOnGround)

				</summary>
				<parameter name="bOnGround"/>
			</function>
			<function line="24" name="ReadPacket">
				<summary>function PacketMove:ReadPacket(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="31" name="ProcessPacket">
				<summary>function PacketMove:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketPing" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPing.lua">
			<function line="14" name="ctor">
				<summary>function PacketPing:ctor()

				</summary>
			</function>
		</table>
		<table name="PacketPlayerInfo" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPlayerInfo.lua">
			<function line="16" name="ctor">
				<summary>function PacketPlayerInfo:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketPlayerInfo:Init(username, isConnected, ping)

   @param isConnected: whether connected or disconnected
   @param ping: ping value of connection speed. the larger the slower the connection is. 
				</summary>
				<parameter name="username"/>
				<parameter name="isConnected">whether connected or disconnected
				</parameter>
				<parameter name="ping">ping value of connection speed. the larger the slower the connection is. 
				</parameter>
			</function>
			<function line="29" name="ProcessPacket">
				<summary>function PacketPlayerInfo:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketPlayerInventory" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPlayerInventory.lua">
			<function line="18" name="ctor">
				<summary>function PacketPlayerInventory:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketPlayerInventory:Init(entityId, slot_index, itemStack)

				</summary>
				<parameter name="entityId"/>
				<parameter name="slot_index"/>
				<parameter name="itemStack"/>
			</function>
			<function line="31" name="ProcessPacket">
				<summary>function PacketPlayerInventory:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketPlayerLook" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPlayerLook.lua">
			<function line="17" name="ctor">
				<summary>function PacketPlayerLook:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketPlayerLook:Init(yaw, pitch, bOnGround)

   @param moving: boolean whether player is in motion. 
				</summary>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
				<parameter name="bOnGround"/>
			</function>
		</table>
		<table name="PacketPlayerLookMove" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPlayerLookMove.lua">
			<function line="17" name="ctor">
				<summary>function PacketPlayerLookMove:ctor()

				</summary>
			</function>
			<function line="22" name="Init">
				<summary>function PacketPlayerLookMove:Init(x,y, stance, z, yaw, pitch, bOnGround)

   @param stance: the on ground y position
   @param moving: boolean whether player is in motion. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="stance">the on ground y position
				</parameter>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
				<parameter name="bOnGround"/>
			</function>
		</table>
		<table name="PacketPlayerPosition" src="script\apps\Aries\Creator\Game\Network\Packets\PacketPlayerPosition.lua">
			<function line="17" name="ctor">
				<summary>function PacketPlayerPosition:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketPlayerPosition:Init(x,y, stance, z, bOnGround)

   @param moving: boolean whether player is in motion. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="stance"/>
				<parameter name="z"/>
				<parameter name="bOnGround"/>
			</function>
		</table>
		<table name="PacketRelEntity" src="script\apps\Aries\Creator\Game\Network\Packets\PacketRelEntity.lua">
			<function line="16" name="ctor">
				<summary>function PacketRelEntity:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketRelEntity:Init(entityId)
x,y,z, facing, pitch, ...
				</summary>
				<parameter name="entityId"/>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketRelEntity:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
			<function line="32" name="ContainsSameEntityIDAs">
				<summary>function PacketRelEntity:ContainsSameEntityIDAs(packet)

				</summary>
				<parameter name="packet"/>
			</function>
		</table>
		<table name="PacketRelEntityLook" src="script\apps\Aries\Creator\Game\Network\Packets\PacketRelEntityLook.lua">
			<function line="16" name="ctor">
				<summary>function PacketRelEntityLook:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketRelEntityLook:Init(entityId, facing, pitch)

				</summary>
				<parameter name="entityId"/>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
		</table>
		<table name="PacketRelEntityMove" src="script\apps\Aries\Creator\Game\Network\Packets\PacketRelEntityMove.lua">
			<function line="16" name="ctor">
				<summary>function PacketRelEntityMove:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketRelEntityMove:Init(entityId, x, y, z)

   @param x,y,z: scaled by 32 integer position. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="x">,y,z: scaled by 32 integer position. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
		</table>
		<table name="PacketRelEntityMoveLook" src="script\apps\Aries\Creator\Game\Network\Packets\PacketRelEntityMoveLook.lua">
			<function line="16" name="ctor">
				<summary>function PacketRelEntityMoveLook:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketRelEntityMoveLook:Init(entityId, x, y, z, facing, pitch)

   @param x,y,z: scaled by 32 integer position. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="x">,y,z: scaled by 32 integer position. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
		</table>
		<table name="PacketSleep" src="script\apps\Aries\Creator\Game\Network\Packets\PacketSleep.lua">
			<function line="18" name="ctor">
				<summary>function PacketSleep:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketSleep:Init()

				</summary>
			</function>
			<function line="26" name="ProcessPacket">
				<summary>function PacketSleep:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketSpawnPosition" src="script\apps\Aries\Creator\Game\Network\Packets\PacketSpawnPosition.lua">
			<function line="16" name="ctor">
				<summary>function PacketSpawnPosition:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketSpawnPosition:Init(x,y,z)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="25" name="ProcessPacket">
				<summary>function PacketSpawnPosition:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketUpdateAttributes" src="script\apps\Aries\Creator\Game\Network\Packets\PacketUpdateAttributes.lua">
			<function line="18" name="ctor">
				<summary>function PacketUpdateAttributes:ctor()

				</summary>
			</function>
			<function line="21" name="Init">
				<summary>function PacketUpdateAttributes:Init(entityId, dataWatcher)

				</summary>
				<parameter name="entityId"/>
				<parameter name="dataWatcher"/>
			</function>
			<function line="27" name="ProcessPacket">
				<summary>function PacketUpdateAttributes:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketUpdateEntitySign" src="script\apps\Aries\Creator\Game\Network\Packets\PacketUpdateEntitySign.lua">
			<function line="17" name="ctor">
				<summary>function PacketUpdateEntitySign:ctor()

				</summary>
			</function>
			<function line="20" name="Init">
				<summary>function PacketUpdateEntitySign:Init(x, y, z, text, data)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="text"/>
				<parameter name="data"/>
			</function>
			<function line="30" name="ProcessPacket">
				<summary>function PacketUpdateEntitySign:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="PacketUpdateTime" src="script\apps\Aries\Creator\Game\Network\Packets\PacketUpdateTime.lua">
			<function line="16" name="ctor">
				<summary>function PacketUpdateTime:ctor()

				</summary>
			</function>
			<function line="19" name="Init">
				<summary>function PacketUpdateTime:Init(totalTime, curTime)

				</summary>
				<parameter name="totalTime"/>
				<parameter name="curTime"/>
			</function>
			<function line="25" name="ProcessPacket">
				<summary>function PacketUpdateTime:ProcessPacket(net_handler)
Passes this Packet on to the NetHandler for processing.
				</summary>
				<parameter name="net_handler"/>
			</function>
		</table>
		<table name="Packet_Types" src="script\apps\Aries\Creator\Game\Network\Packets\Packet_Types.lua">
			<function line="29" name="StaticInit">
				<summary>function Packet_Types:StaticInit()

				</summary>
			</function>
			<function line="134" name="AddIdClassMapping">
				<summary>function Packet_Types:AddIdClassMapping(packet_id, bIsClientPacket, bIsServerPacket, packet_class)
Adds a two way mapping between the packet ID and packet class. and assign the packet id. 
				</summary>
				<parameter name="packet_id"/>
				<parameter name="bIsClientPacket"/>
				<parameter name="bIsServerPacket"/>
				<parameter name="packet_class"/>
			</function>
			<function line="155" name="GetPacketId">
				<summary>function Packet_Types:GetPacketId(packet_class)

				</summary>
				<parameter name="packet_class"/>
			</function>
			<function line="161" name="GetNewPacket">
				<summary>function Packet_Types:GetNewPacket(packet_id)
Create/Get a new instance of the specified Packet class.
it may create a new intance or a singleton is returned depending on packet type. 
				</summary>
				<parameter name="packet_id"/>
			</function>
		</table>
		<table name="RoomInfo" src="script\apps\Aries\Creator\Game\Network\TunnelService\RoomInfo.lua">
			<function line="15" name="ctor">
				<summary>function RoomInfo:ctor()

				</summary>
			</function>
			<function line="23" name="GenerateRoomKey">
				<summary>function RoomInfo.GenerateRoomKey()
static function
				</summary>
			</function>
			<function line="30" name="Init">
				<summary>function RoomInfo:Init(room_key)

   @param room_key: if nil, we will dynamically generate a room key
				</summary>
				<parameter name="room_key">if nil, we will dynamically generate a room key
				</parameter>
			</function>
			<function line="35" name="AddUser">
				<summary>function RoomInfo:AddUser(username)

				</summary>
				<parameter name="username"/>
			</function>
			<function line="39" name="GetUser">
				<summary>function RoomInfo:GetUser(username)

				</summary>
				<parameter name="username"/>
			</function>
			<function line="47" name="RemoveUser">
				<summary>function RoomInfo:RemoveUser(username)

				</summary>
				<parameter name="username"/>
			</function>
			<function line="52" name="CheckTimeout">
				<summary>function RoomInfo:CheckTimeout()
if a user does not send any message in certain time, we will need to time out and remove the user. 
				</summary>
			</function>
		</table>
		<table name="TunnelClient" src="script\apps\Aries\Creator\Game\Network\TunnelService\TunnelClient.lua">
			<function line="28" name="ctor">
				<summary>function TunnelClient:ctor()

				</summary>
			</function>
			<function line="37" name="ConnectServer">
				<summary>function TunnelClient:ConnectServer(ip, port, room_key, username, password, callbackFunc)

   @param ip, port: IP address of tunnel server
   @param room_key: room_key
   @param username: unique user name
   @param password: optional password
   @param callbackFunc: function(bSuccess) end
				</summary>
				<parameter name="ip">, port: IP address of tunnel server
				</parameter>
				<parameter name="port"/>
				<parameter name="room_key">room_key
				</parameter>
				<parameter name="username">unique user name
				</parameter>
				<parameter name="password">optional password
				</parameter>
				<parameter name="callbackFunc">function(bSuccess) end
				</parameter>
			</function>
			<function line="67" name="GetVirtualNid">
				<summary>function TunnelClient:GetVirtualNid(username)
get virtual nid: use username directly as nid. it must be unique within the same room.
				</summary>
				<parameter name="username"/>
			</function>
			<function line="71" name="Disconnect">
				<summary>function TunnelClient:Disconnect()

				</summary>
			</function>
			<function line="76" name="AddVirtualConnection">
				<summary>function TunnelClient:AddVirtualConnection(nid, tcpConnection)
manage virtual connections
				</summary>
				<parameter name="nid"/>
				<parameter name="tcpConnection"/>
			</function>
			<function line="85" name="Send">
				<summary>function TunnelClient:Send(nid, msg, neuronfile)
send message via tunnel server to another tunnel client
   @param nid: virtual nid of the target stunnel client. usually the user name
   @param msg: the raw message table {id=packet_id, .. }.
   @param neuronfile: should be nil. By default, it is ConnectionBase. 
				</summary>
				<parameter name="nid">virtual nid of the target stunnel client. usually the user name
				</parameter>
				<parameter name="msg">the raw message table {id=packet_id, .. }.
				</parameter>
				<parameter name="neuronfile">should be nil. By default, it is ConnectionBase. 
				</parameter>
			</function>
			<function line="93" name="LoginTunnel">
				<summary>function TunnelClient:LoginTunnel(callbackFunc)
login with current user name
				</summary>
				<parameter name="callbackFunc"/>
			</function>
			<function line="102" name="handleRelayMsg">
				<summary>function TunnelClient:handleRelayMsg(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="119" name="handleCmdMsg">
				<summary>function TunnelClient:handleCmdMsg(msg)

				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="TunnelServer" src="script\apps\Aries\Creator\Game\Network\TunnelService\TunnelServer.lua">
			<function line="21" name="ctor">
				<summary>function TunnelServer:ctor()

				</summary>
			</function>
			<function line="31" name="updateInsertRoom">
				<summary>function TunnelServer:updateInsertRoom(room_info)
update and insert room. this function is usually asked by lobbyserver to dynamically allocate a room. 
				</summary>
				<parameter name="room_info"/>
			</function>
			<function line="38" name="GetRoom">
				<summary>function TunnelServer:GetRoom(room_key)

				</summary>
				<parameter name="room_key"/>
			</function>
			<function line="42" name="GetUserNameFromNid">
				<summary>function TunnelServer:GetUserNameFromNid(nid)

				</summary>
				<parameter name="nid"/>
			</function>
			<function line="46" name="GetClientAddress">
				<summary>function TunnelServer:GetClientAddress(username)

				</summary>
				<parameter name="username"/>
			</function>
			<function line="53" name="handleReceive">
				<summary>function TunnelServer:handleReceive(msg)

				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="TunnelServerMain" src="script\apps\Aries\Creator\Game\Network\TunnelService\TunnelServer_main.lua">
			<function line="24" name="Init">
				<summary>function TunnelServerMain:Init(configFile)
this is the one time init function.
   @param configFile: table of {host, port} or filename, default to TunnelServer.config.xml
				</summary>
				<parameter name="configFile">table of {host, port} or filename, default to TunnelServer.config.xml
				</parameter>
			</function>
			<function line="44" name="LoadNetworkSettings">
				<summary>function TunnelServerMain:LoadNetworkSettings()
static function
				</summary>
			</function>
			<function line="63" name="StartServer">
				<summary>function TunnelServerMain:StartServer()
start a tunnel server in the current thread
				</summary>
			</function>
		</table>
		<table name="mathlib" src="script/ide/mathlib.lua">
			<function line="26" name="QuatToEuler">
				<summary>function mathlib.QuatToEuler(q1) 
Conversion Quaternion to Euler
   @param q1: {x,y,z,w}
   @returns: heading, attitude, bank
   @note: code converted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm
				</summary>
				<parameter name="q1">{x,y,z,w}
				</parameter>
				<returns>return heading, attitude, bank
				</returns>
			</function>
			<function line="53" name="EulerToQuat">
				<summary>function mathlib.EulerToQuat(heading, attitude, bank) 
Conversion Euler to Quaternion
   @param heading(yaw), attitude(roll), bank(pitch)
   @returns: x,y,z,w
				</summary>
				<parameter name="heading">(yaw), attitude(roll), bank(pitch)
				</parameter>
				<parameter name="attitude"/>
				<parameter name="bank"/>
				<returns>return x,y,z,w
				</returns>
			</function>
			<function line="73" name="QuatFromAxisAngle">
				<summary>function mathlib.QuatFromAxisAngle(x,y,z, angle) 
assumes axis is already normalised
   @param x,y,z: is a normalized axis vector
   @param angle: is the angle to rotate
				</summary>
				<parameter name="x">,y,z: is a normalized axis vector
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="angle">is the angle to rotate
				</parameter>
			</function>
			<function line="88" name="QuaternionMultiply">
				<summary>function mathlib.QuaternionMultiply(q1,q2)
Since a unit quaternion represents an orientation in 3D space, the multiplication of two unit quaternions will result in 
another unit quaternion that represents the combined rotation. Amazing, but it's true.
see: http://www.cprogramming.com/tutorial/3d/quaternions.html
   @param q1,q2: q1 and q2 are two quaternion{x,y,z,w}
				</summary>
				<parameter name="q1">,q2: q1 and q2 are two quaternion{x,y,z,w}
				</parameter>
				<parameter name="q2"/>
			</function>
			<function line="98" name="WrapAngleTo180">
				<summary>function mathlib.WrapAngleTo180(angle)
the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
				</summary>
				<parameter name="angle"/>
			</function>
			<function line="109" name="ToStandardAngle">
				<summary>function mathlib.ToStandardAngle(fAngle)
make sure that the angle is in the range (-Pi,Pi]
				</summary>
				<parameter name="fAngle"/>
			</function>
			<function line="140" name="SmoothMoveAngle">
				<summary>function mathlib.SmoothMoveAngle(src, dest, fMaxStep)
change src from src to dest, by a maximum of fMaxStep. If dest has been reached, return true; otherwise return false.
   @return result_value, bEqual: 
				</summary>
				<parameter name="src"/>
				<parameter name="dest"/>
				<parameter name="fMaxStep"/>
				<returns>return , bEqual: 
				</returns>
			</function>
			<function line="154" name="lerp">
				<summary>function mathlib.lerp(a, b, t)
such that t=0, return a. t=1, return b
				</summary>
				<parameter name="a"/>
				<parameter name="b"/>
				<parameter name="t"/>
			</function>
			<function line="159" name="GetHash">
				<summary>function mathlib.GetHash(value)
get string hash, return int (maybe negative)
				</summary>
				<parameter name="value"/>
			</function>
			<function line="173" name="clamp">
				<summary>function mathlib.clamp(value, from, to)
Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and third parameters
				</summary>
				<parameter name="value"/>
				<parameter name="from"/>
				<parameter name="to"/>
			</function>
			<function line="184" name="NextPowerOf2">
				<summary>function mathlib.NextPowerOf2(x)

   @param x: must be int, make sure to call math.floor(x) before this.
				</summary>
				<parameter name="x">must be int, make sure to call math.floor(x) before this.
				</parameter>
			</function>
		</table>
		<table name="algorithm" src="script/ide/commonlib.lua">
			<function line="94" name="sort_by_predicate">
				<summary>function algorithm.sort_by_predicate(input, predicate_func)
in place sort of the input list. the item order is unchanged for those who passed and not passed the predicate test.
   @param input: a table array
   @param predicate_func: a function(item) that should return true, if item should come before that that return false. 
				</summary>
				<parameter name="input">a table array
				</parameter>
				<parameter name="predicate_func">a function(item) that should return true, if item should come before that that return false. 
				</parameter>
			</function>
		</table>
		<table name="commonlib" src="script/ide/commonlib.lua">
			<function line="148" name="GetUIObject">
				<summary>function commonlib.GetUIObject(name, parent)
get an UI object by specifying a serie of names separated by #, such as childname#childname#childname, 
e.g. commonlib.GetUIObject("wndParent#button1");
   @param name: e.g. "wndParent#button1", it can also be number id. if it is number, parent is ignored.
   @param parent: nil or a parent UI object inside which the name is searched. If nil, first childname is searched globally.
   @return: return the ParaUIObject found. if not found, the returned object IsValid() returns false. 
				</summary>
				<parameter name="name">e.g. "wndParent#button1", it can also be number id. if it is number, parent is ignored.
				</parameter>
				<parameter name="parent">nil or a parent UI object inside which the name is searched. If nil, first childname is searched globally.
				</parameter>
				<returns>return return the ParaUIObject found. if not found, the returned object IsValid() returns false. 
				</returns>
			</function>
			<function line="172" name="getfield">
				<summary>function commonlib.getfield (f, rootEnv)
We rely on gfind, from the string library, to iterate over all words in f (where "word" is a sequence of one or more alphanumeric characters and underscores).
   @param f: f is a string like "a.b.c.d"
   @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used.
   @return: return the field in LUA, it may be nil, a value, or a table, etc. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used.
				</parameter>
				<returns>return return the field in LUA, it may be nil, a value, or a table, etc. 
				</returns>
			</function>
			<function line="193" name="setfield">
				<summary>function commonlib.setfield (f, v, rootEnv)
set a variable v to f, where f is a string
the call setfield("t.x.y", 10) creates a global table t, another table t.x, and assigns 10 to t.x.y
   @param f: f is a string like "a.b.c.d"
   @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="v"/>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used. 
				</parameter>
			</function>
			<function line="210" name="gettable">
				<summary>function commonlib.gettable(f, rootEnv)
get a table f, where f is a string
   @param f: f is a string like "a.b.c.d"
   @param rootEnv: it can be a table from which to search for f, if nil, the global table _G is used. 
				</summary>
				<parameter name="f">f is a string like "a.b.c.d"
				</parameter>
				<parameter name="rootEnv">it can be a table from which to search for f, if nil, the global table _G is used. 
				</parameter>
			</function>
			<function line="222" name="createtable">
				<summary>function commonlib.createtable(f, init_params, rootEnv)
create/get a table and init it with init_params
				</summary>
				<parameter name="f"/>
				<parameter name="init_params"/>
				<parameter name="rootEnv"/>
			</function>
			<function line="234" name="ResetModelAsset">
				<summary>function commonlib.ResetModelAsset(_obj, assetfilename)
reset the model asset
   @param obj: model object
   @assetfilename: file name of the asset file
   @return the new obj
				</summary>
				<parameter name="_obj"/>
				<parameter name="assetfilename"/>
				<returns>return new obj
				</returns>
			</function>
			<function line="262" name="MetaClone">
				<summary>function commonlib.MetaClone(obj)
clone a obj using just meta table. It does not actually copy parameters. 
Note: one can not serialize a meta cloned object, because it is an empty table with the same meta table as input obj. 
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="274" name="deepcopy">
				<summary>function commonlib.deepcopy(object)
code from: http://lua-users.org/wiki/CopyTable
This function returns a deep copy of a given table. The function below also copies the metatable to the new table if there is one, 
so the behaviour of the copied table is the same as the original. But the 2 tables share the same metatable, 
you can avoid this by changing this 'getmetatable(object)' to '_copy( getmetatable(object) )'.
				</summary>
				<parameter name="object"/>
			</function>
			<function line="297" name="copy">
				<summary>function commonlib.copy(object)
same as commonlib.clone except that it does not copy meta table. 
				</summary>
				<parameter name="object"/>
			</function>
			<function line="318" name="partialcopy">
				<summary>function commonlib.partialcopy(dest, src)
this function simply does, dest = src, but it copies value from src to dest. 
It is mostly used with tables.It just copies what is in src to dest, but dest retains its other fields that does not exist in src.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
			</function>
			<function line="340" name="mincopy">
				<summary>function commonlib.mincopy(dest, src)
this function simply does, dest = src, but it copies value from src to dest. 
It is mostly used with tables.It only copies src field to dest field, if src field name does not exist in dest. In other words, dest will preserve all its named fields plus additional fields in dest
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
			</function>
			<function line="362" name="partialcompare">
				<summary>function commonlib.partialcompare(dest, src, tolerance)
this function simply does, dest = src, but it copies value from src to dest. 
It is mostly used with tables.It only copies src field to dest field, if src field name does not exist in dest. In other words, dest will preserve all its named fields plus additional fields in dest
compares all fields in src with destination, value by value, if they are equal, true is returned. otherwise, return nil or false.
Note that if dest has more fields than src, yet all src fields equals to dest, then it will still return true.
Note: it also compare indexed array items
   @param tolerance: if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="tolerance">if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</parameter>
			</function>
			<function line="385" name="partialfields">
				<summary>function commonlib.partialfields(dest, src, fields)
compare all fields in dest with src and return true if equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="fields"/>
			</function>
			<function line="393" name="compare">
				<summary>function commonlib.compare(dest, src, tolerance)
strict compare all fields reccursively in dest and src, value by value
Note: it also compare indexed array items
   @param tolerance: if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
   @return true if equal.
				</summary>
				<parameter name="dest"/>
				<parameter name="src"/>
				<parameter name="tolerance">if not nil, it will be used to compare number type values. smaller than this will be regarded as equal.
				</parameter>
				<returns>return if equal.
				</returns>
			</function>
			<function line="400" name="resize">
				<summary>function commonlib.resize(t, size, v)
resize a table to a new size. It ensures that all elements are nil. 
this function uses table_getn() instead of #t, use table.resize for #t
				</summary>
				<parameter name="t"/>
				<parameter name="size"/>
				<parameter name="v"/>
			</function>
			<function line="437" name="removeArrayItem">
				<summary>function commonlib.removeArrayItem(t, nIndex)
remove an item from a table. The table size will be minored by 1.
   @param t: table array.
   @param nIndex: 1 based index, at which to remove the item
				</summary>
				<parameter name="t">table array.
				</parameter>
				<parameter name="nIndex">1 based index, at which to remove the item
				</parameter>
			</function>
			<function line="448" name="insertArrayItem">
				<summary>function commonlib.insertArrayItem(t, nIndex, item)
insert an array item to a table array. The table size will be increased by 1.
   @param t: table array.
   @param nIndex: 1 based index, at which to insert the item. if nil, it will inserted to the end
   @return return 1 based index at which the item is inserted
				</summary>
				<parameter name="t">table array.
				</parameter>
				<parameter name="nIndex">1 based index, at which to insert the item. if nil, it will inserted to the end
				</parameter>
				<parameter name="item"/>
				<returns>return 1 based index at which the item is inserted
				</returns>
			</function>
			<function line="473" name="removeArrayItems">
				<summary>function commonlib.removeArrayItems(t, callback_func)
remove all items that matches a certain criteria from an array table
e.g. 
commonlib.removeArrayItems({1,2,3,4,5,6}, function(i, item) return (i%2==0); end); --&gt; {1,3,5}
   @param t: table to be removed
   @param callback_func: the callback function(index, item) end. if the function returns true, then the table item at the given index will be removed from the table.
				</summary>
				<parameter name="t">table to be removed
				</parameter>
				<parameter name="callback_func">the callback function(index, item) end. if the function returns true, then the table item at the given index will be removed from the table.
				</parameter>
			</function>
			<function line="491" name="swapArrayItem">
				<summary>function commonlib.swapArrayItem(t, nIndex1, nIndex2)
swap two items in a table. 
				</summary>
				<parameter name="t"/>
				<parameter name="nIndex1"/>
				<parameter name="nIndex2"/>
			</function>
			<function line="499" name="moveArrayItem">
				<summary>function commonlib.moveArrayItem(t, nIndex1, nIndex2)
move array item from one nIndex1 to nIndex2
				</summary>
				<parameter name="t"/>
				<parameter name="nIndex1"/>
				<parameter name="nIndex2"/>
			</function>
			<function line="518" name="cleartable">
				<summary>function commonlib.cleartable(tab)
empty a given table
				</summary>
				<parameter name="tab"/>
			</function>
			<function line="565" name="SearchFiles">
				<summary>function commonlib.SearchFiles(...)
OBSOLETED: use commonlib.Files.SearchFiles(), instead. 
				</summary>
			</function>
			<function line="571" name="Absolute">
				<summary>function commonlib.Absolute(num)
get the absolute of the given number, if param not number type return nil
				</summary>
				<parameter name="num"/>
			</function>
			<function line="587" name="tonumber">
				<summary>function commonlib.tonumber(s)
convert the string to number
this function will handle the string will additional "0" digits in the front of the string
e.x. input: "010" return: 10
				</summary>
				<parameter name="s"/>
			</function>
			<function line="604" name="tolower">
				<summary>function commonlib.tolower(o)
make all table fields (including fields of sub tables) lower cased. This is useful for case-insensitive table.
   @param o: it will modify on this table and its sub-tables. If it is string. this function will return the lower cased string.
   @return: return the modified input 
				</summary>
				<parameter name="o">it will modify on this table and its sub-tables. If it is string. this function will return the lower cased string.
				</parameter>
				<returns>return return the modified input 
				</returns>
			</function>
			<function line="646" name="GetEmptyList">
				<summary>function commonlib.GetEmptyList(source_list,goal_num,bSort)
-random search a number of item from a list
&lt;verbatim&gt;
local source_list = {
	{ label = 1, isEmpty = true, },
	{ label = 2, isEmpty = true, },
	{ label = 3, isEmpty = false, },
	{ label = 4, isEmpty = true, },
}&lt;/verbatim&gt;
local goal_num = 5;
local result = commonlib.GetEmptyList(source_list,goal_num,true);
commonlib.echo(result);
-
   @param source_list: it is a table which will be searched
-
   @param goal_num:the number of search from source_list;
-NOTE:if #source_list &lt; goal_num then goal_num = #source_list;
-return nil or a result table
				</summary>
				<parameter name="source_list">it is a table which will be searched
-
				</parameter>
				<parameter name="goal_num">the number of search from source_list;
-NOTE:if #source_list &lt; goal_num then goal_num = #source_list;
-return nil or a result table
				</parameter>
				<parameter name="bSort"/>
			</function>
			<function line="700" name="GetRandomList">
				<summary>function commonlib.GetRandomList(source_num,goal_num,bSort)
在一个范围内随机选取一定的数目
goal_num = math.min(source_num,goal_num);
返回一个table: result = {1,3,7}

local result = commonlib.GetRandomList(10,5,true);
commonlib.echo(result);
				</summary>
				<parameter name="source_num"/>
				<parameter name="goal_num"/>
				<parameter name="bSort"/>
			</function>
			<function line="728" name="GetRandomIndex">
				<summary>function commonlib.GetRandomIndex(range,excludeindex)
在一个范围内随机选取一定的数目
goal_num = math.min(source_num,goal_num);
返回一个table: result = {1,3,7}

local result = commonlib.GetRandomList(10,5,true);
commonlib.echo(result);
产生一个随机数
   @param range:随机的范围 大于等于0的整数
   @param excludeindex:不包含的整数
				</summary>
				<parameter name="range">随机的范围 大于等于0的整数
				</parameter>
				<parameter name="excludeindex">不包含的整数
				</parameter>
			</function>
			<function line="764" name="module">
				<summary>function commonlib.module(modname, ...)
define a module, replace the global environment _G with that of the table.
this function is same as commonlib.createtable, except that the global environment _G with that of the table.
   @param modname: namespace for module
   @return the module created
				</summary>
				<parameter name="modname">namespace for module
				</parameter>
				<returns>return module created
				</returns>
			</function>
			<function line="775" name="split">
				<summary>function commonlib.split(str,delimiter)
define a module, replace the global environment _G with that of the table.
this function is same as commonlib.createtable, except that the global environment _G with that of the table.
   @param modname: namespace for module
   @return the module created
see all environment

	local result = commonlib.split("a,b,c,d",",");
	echo(result);
				</summary>
				<parameter name="str"/>
				<parameter name="delimiter"/>
				<returns>return module created
see all environment

	local result = commonlib.split("a,b,c,d",",");
	echo(result);
				</returns>
			</function>
			<function line="80" name="multi_inherit" src="script/ide/oo.lua">
				<summary>function commonlib.multi_inherit(...)
multiple inheritance
see. http://www.lua.org/pil/16.3.html
				</summary>
			</function>
			<function line="116" name="inherit" src="script/ide/oo.lua">
				<summary>function commonlib.inherit(baseClass, new_class, ctor)
create a new class inheriting from a baseClass.
the new class has new(), _super, isa() function.
   @param baseClass: the base class from which to inherit the new one. it can be nil if there is no base class.
   @param new_class: nil or a raw table.
   @param ctor: nil or the constructor function(o) end, one may init dynamic table fields in it. One can also define new_class:ctor() at a later time. 
note: inside ctor function, parent class virtual functions are not available,since meta table of parent is not set yet.
   @return the new class is created. One can later create and instance of the new class by calling its new function(). 
				</summary>
				<parameter name="baseClass">the base class from which to inherit the new one. it can be nil if there is no base class.
				</parameter>
				<parameter name="new_class">nil or a raw table.
				</parameter>
				<parameter name="ctor">nil or the constructor function(o) end, one may init dynamic table fields in it. One can also define new_class:ctor() at a later time. 
note: inside ctor function, parent class virtual functions are not available,since meta table of parent is not set yet.
				</parameter>
				<returns>return new class is created. One can later create and instance of the new class by calling its new function(). 
				</returns>
			</function>
			<function line="229" name="add_interface" src="script/ide/oo.lua">
				<summary>function commonlib.add_interface(target_class, interface_class)
this function can be called multiple times for the same target_class with different interface_class
It just copies all string_key, value pair from interface_class to target_class except for ctor and those that already exist in target_class.
This is faster than multiple inheritance or single inheritance because the target_class contains all interface functions on its own meta table.
   @note: interface_class's ctor function is NOT called in target_class's ctor, one has to do it manually if required.
   @param target_class: new class to which the interface functions are copied to.
   @param interface_class: base interface class table. please note that this table must be fully loaded when this function is called. 
				</summary>
				<parameter name="target_class">new class to which the interface functions are copied to.
				</parameter>
				<parameter name="interface_class">base interface class table. please note that this table must be fully loaded when this function is called. 
				</parameter>
			</function>
			<function line="244" name="enable__gc" src="script/ide/oo.lua">
				<summary>function commonlib.enable__gc(target_class, gc_function)
lua 5.1 does not support __gc for table object. it only supports __gc for userdata.
this function can be called to enable __gc function to be called when object is garbage collected
when target_class is garbage collected. see also `commonlib.setmetatable__gc`
   @param target_class: the table instance to which we will track garbage collection.
   @param gc_function: if nil, target_class.__gc is used. otherwise this function is used.
				</summary>
				<parameter name="target_class">the table instance to which we will track garbage collection.
				</parameter>
				<parameter name="gc_function">if nil, target_class.__gc is used. otherwise this function is used.
				</parameter>
			</function>
		</table>
		<table name="table" src="script/ide/commonlib.lua">
			<function line="419" name="resize">
				<summary>function table.resize(t, size, v)
resize a table to a new size. It ensures that all elements are nil.
   @param t: table to resize
   @param size: the new size
   @param v: the item value;
				</summary>
				<parameter name="t">table to resize
				</parameter>
				<parameter name="size">the new size
				</parameter>
				<parameter name="v">the item value;
				</parameter>
			</function>
		</table>
		<table name="utf8" src="script/ide/commonlib.lua">
			<function line="537" name="len">
				<summary>function utf8.len(unicode_string)
return the number of characters in UTF8 encoding.
more info at: http://lua-users.org/wiki/LuaUnicode
				</summary>
				<parameter name="unicode_string"/>
			</function>
			<function line="543" name="sub">
				<summary>function utf8.sub(ustring, nFrom, nTo)
similar to string.sub(), except that nFrom, nTo refers to characters, instead of byte
				</summary>
				<parameter name="ustring"/>
				<parameter name="nFrom"/>
				<parameter name="nTo"/>
			</function>
		</table>
		<table name="Encoding" src="script/ide/Encoding.lua">
			<function line="34" name="Utf8ToDefault">
				<summary>function Encoding.Utf8ToDefault(text)

				</summary>
				<parameter name="text"/>
			</function>
			<function line="38" name="DefaultToUtf8">
				<summary>function Encoding.DefaultToUtf8(text)

				</summary>
				<parameter name="text"/>
			</function>
			<function line="46" name="SortCSVString">
				<summary>function Encoding.SortCSVString(fields)
sort commar separated vector (CSV) string alphabetically
   @param fields: string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}
   @return return a new CSV string "A,B,C"
				</summary>
				<parameter name="fields">string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}
				</parameter>
				<returns>return a new CSV string "A,B,C"
				</returns>
			</function>
			<function line="69" name="EncodeStr">
				<summary>function Encoding.EncodeStr(s)
sort commar separated vector (CSV) string alphabetically
   @param fields: string such as "C,B,A", or a table containing string arrays such as {"C", "B", "A"}
   @return return a new CSV string "A,B,C"
				</summary>
				<parameter name="s"/>
				<returns>return a new CSV string "A,B,C"
				</returns>
			</function>
			<function line="80" name="EncodeHTMLInnerText">
				<summary>function Encoding.EncodeHTMLInnerText(s)

				</summary>
				<parameter name="s"/>
			</function>
			<function line="91" name="HasXMLEscapeChar">
				<summary>function Encoding.HasXMLEscapeChar(s)

				</summary>
				<parameter name="s"/>
			</function>
			<function line="222" name="split">
				<summary>function Encoding.split(data, eol, width)
---------------------------------------------------------------------------
Break a string in lines of equal size
Input 
data: string to be broken 
eol: end of line marker
width: width of output string lines
Returns
string broken in lines
---------------------------------------------------------------------------
				</summary>
				<parameter name="data"/>
				<parameter name="eol"/>
				<parameter name="width"/>
			</function>
			<function line="240" name="base64">
				<summary>function Encoding.base64(s, single)
---------------------------------------------------------------------------
Encodes a string into its base64 representation
Input 
s: binary string to be encoded
single: single line output?
Returns
string with corresponding base64 representation
---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
				<parameter name="single"/>
			</function>
			<function line="261" name="unbase64">
				<summary>function Encoding.unbase64(s)
---------------------------------------------------------------------------
Decodes a string from its base64 representation
Input 
s: base64 string
Returns
decoded binary string
---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
			</function>
			<function line="287" name="PasswordEncodeWithMac">
				<summary>function Encoding.PasswordEncodeWithMac(text)
encode with mac address. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="295" name="PasswordDecodeWithMac">
				<summary>function Encoding.PasswordDecodeWithMac(text)
return nil if mac address does not match with the local one. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="316" name="EncodeServerData">
				<summary>function Encoding.EncodeServerData(input)
used in poweritem api ChangeItem.
   @param input:either string or table.
   @return the server data string or nil.
				</summary>
				<parameter name="input">either string or table.
				</parameter>
				<returns>return server data string or nil.
				</returns>
			</function>
			<function line="329" name="DecodeServerData">
				<summary>function Encoding.DecodeServerData(input)

				</summary>
				<parameter name="input"/>
			</function>
			<function line="342" name="EncodeServerDataString">
				<summary>function Encoding.EncodeServerDataString(input)

				</summary>
				<parameter name="input"/>
			</function>
			<function line="351" name="url_decode">
				<summary>function Encoding.url_decode(str)
Decode an URL-encoded string
(Note that you should only decode a URL string after splitting it; this allows you to correctly process quoted "?" characters in the query string or base part, for instance.) 
				</summary>
				<parameter name="str"/>
			</function>
			<function line="360" name="url_encode">
				<summary>function Encoding.url_encode(str)
URL-encode a string
				</summary>
				<parameter name="str"/>
			</function>
		</table>
		<table name="Private" src="script/ide/Encoding.lua">
			<function line="145" name="t2f">
				<summary>function Private.t2f(a,b,c)
---------------------------------------------------------------------------
Converts a three byte sequence into its four character base64 
representation
---------------------------------------------------------------------------
				</summary>
				<parameter name="a"/>
				<parameter name="b"/>
				<parameter name="c"/>
			</function>
			<function line="162" name="f2t">
				<summary>function Private.f2t(a,b,c,d)
---------------------------------------------------------------------------
Converts a four character base64 representation into its three byte
sequence
---------------------------------------------------------------------------
				</summary>
				<parameter name="a"/>
				<parameter name="b"/>
				<parameter name="c"/>
				<parameter name="d"/>
			</function>
			<function line="176" name="to64pad">
				<summary>function Private.to64pad(s)
---------------------------------------------------------------------------
Creates a base64 representation of an incomplete last block
---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
			</function>
			<function line="196" name="from64pad">
				<summary>function Private.from64pad(s)
---------------------------------------------------------------------------
Decodes the base64 representation of an incomplete last block
---------------------------------------------------------------------------
				</summary>
				<parameter name="s"/>
			</function>
		</table>
		<table name="Timer" src="script/ide/timer.lua">
			<function line="72" name="new">
				<summary>function Timer:new(o)
a new timer class with infinite time. 
				</summary>
				<parameter name="o"/>
			</function>
			<function line="84" name="GetNextTimerID">
				<summary>function Timer.GetNextTimerID()
get the next timer id
				</summary>
			</function>
			<function line="94" name="Change">
				<summary>function Timer:Change(dueTime,period)
change the timer
   @param dueTime The amount of time to delay before the invoking the callback method specified in milliseconds
Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
   @param period The time interval between invocations of the callback method in milliseconds. 
Specify nil to disable periodic signaling. 
				</summary>
				<parameter name="dueTime">The amount of time to delay before the invoking the callback method specified in milliseconds
Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
				</parameter>
				<parameter name="period">The time interval between invocations of the callback method in milliseconds. 
Specify nil to disable periodic signaling. 
				</parameter>
			</function>
			<function line="107" name="Enable">
				<summary>function Timer:Enable()
call this function to enable the timer if not 
				</summary>
			</function>
			<function line="116" name="Tick">
				<summary>function Timer:Tick(nTickCount)
this function is called by the timer manager to process the time. 
set the tick count. it will return true, if the timer is activated. 
call this function regularly with new tick count.
   @param nTickCount: it should be ::GetTickCount() in millisecond. if nil, we will call the system ::GetTickCount() to get the current tick count.
   @return true if timer is activated. 
				</summary>
				<parameter name="nTickCount">it should be ::GetTickCount() in millisecond. if nil, we will call the system ::GetTickCount() to get the current tick count.
				</parameter>
				<returns>return if timer is activated. 
				</returns>
			</function>
			<function line="136" name="GetDelta">
				<summary>function Timer:GetDelta(max_delta)
get the delta in time since last tick.
   @param max_delta: if the delta is bigger than this value we will return max_delta rather than the big value. 
if this is nil, it will be 2 times of self.period
				</summary>
				<parameter name="max_delta">if the delta is bigger than this value we will return max_delta rather than the big value. 
if this is nil, it will be 2 times of self.period
				</parameter>
			</function>
			<function line="150" name="Activate">
				<summary>function Timer:Activate()
activate the call back. 
				</summary>
			</function>
			<function line="158" name="IsEnabled">
				<summary>function Timer:IsEnabled()
whether the timer is going to be called at least once in the future. 
NOTE: this may not be accurate if scene is reset. 
				</summary>
			</function>
		</table>
		<table name="TimerManager" src="script/ide/timer.lua">
			<function line="188" name="Start">
				<summary>function TimerManager.Start()
create a global timer for all sub timers. 
				</summary>
			</function>
			<function line="197" name="Stop">
				<summary>function TimerManager.Stop()

				</summary>
			</function>
			<function line="202" name="Clear">
				<summary>function TimerManager.Clear()
clear all timers
				</summary>
			</function>
			<function line="212" name="AddTimer">
				<summary>function TimerManager.AddTimer(timer)
call this function to either add a timer to the pool or change the timer settings. 
it will automatically set timer.enabled to true.
   @param timer: the timer object
				</summary>
				<parameter name="timer">the timer object
				</parameter>
			</function>
			<function line="233" name="RemoveTimer">
				<summary>function TimerManager.RemoveTimer(timer)
remove the given timer by id
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="239" name="DumpTimerCount">
				<summary>function TimerManager.DumpTimerCount()
dump timer info. 
				</summary>
			</function>
			<function line="254" name="OnTimer">
				<summary>function TimerManager.OnTimer()
the global ParaEngine high resolution timer. 
				</summary>
			</function>
			<function line="292" name="GetCurrentTime">
				<summary>function TimerManager.GetCurrentTime()
get the current time in millisecond. This may be faster than ParaGlobal_timeGetTime() since it is updated only at rendering frame rate.
   @note the resolution of the timer is same as the scripting frame move rate.
				</summary>
			</function>
			<function line="299" name="SetInterval">
				<summary>function TimerManager.SetInterval(func, milliSecond)
wait a specified number of milliseconds, and then execute a specified function, 
and it will continue to execute the function, once at every given time-interval.
   @return the timer object which can be used to call ClearInterval
				</summary>
				<parameter name="func"/>
				<parameter name="milliSecond"/>
				<returns>return timer object which can be used to call ClearInterval
				</returns>
			</function>
			<function line="305" name="ClearInterval">
				<summary>function TimerManager.ClearInterval(timer)

				</summary>
				<parameter name="timer"/>
			</function>
			<function line="312" name="SetTimeout">
				<summary>function TimerManager.SetTimeout(func, milliSecond)
create a timer object that will timeout once and call func.
   @param milliSecond: default to 1000ms (1 second)
   @return the timer object. 
				</summary>
				<parameter name="func"/>
				<parameter name="milliSecond">default to 1000ms (1 second)
				</parameter>
				<returns>return timer object. 
				</returns>
			</function>
			<function line="318" name="ClearTimeout">
				<summary>function TimerManager.ClearTimeout(timeoutVariable)

				</summary>
				<parameter name="timeoutVariable"/>
			</function>
		</table>
		<table name="NPL" src="script/ide/NPLExtension.lua">
			<function line="41" name="GetURL">
				<summary>function NPL.GetURL(url, callbackFunc, option)
return the content of a given url. 
e.g.  echo(NPL.GetURL("www.paraengine.com"))
   @param url: url string or a options table of {url=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}
if .json is true, code will be decoded as json.
if .qs is query string table
   @param callbackFunc: a function(err, msg, data) end, 
where msg is the raw HTTP message {header, code=0, rcode=200, data}
if nil, the function will not return until result is returned(sync call).
   @param option: mostly nil. "-I" for headers only
   @return: return nil if callbackFunc is a function. or the string content in sync call. 
				</summary>
				<parameter name="url">url string or a options table of {url=string, form={key=value}, headers={key=value, "line strings"}, json=bool, qs={}}
if .json is true, code will be decoded as json.
if .qs is query string table
				</parameter>
				<parameter name="callbackFunc">a function(err, msg, data) end, 
where msg is the raw HTTP message {header, code=0, rcode=200, data}
if nil, the function will not return until result is returned(sync call).
				</parameter>
				<parameter name="option">mostly nil. "-I" for headers only
				</parameter>
				<returns>return return nil if callbackFunc is a function. or the string content in sync call. 
				</returns>
			</function>
			<function line="50" name="activate_with_timeout">
				<summary>function NPL.activate_with_timeout(timeout_seconds, ...)
this function just repeatedly calls NPL.activate() until either the message is successfully sent out or timeout_seconds is reached. 
Internally, it will wait 0.1, 0.2, 0.4, 0.8, ... between unsuccessfull activation.
   @param timeout_seconds: the number of seconds to wait. if 0, it will only try once.
   @return the last NPL.activate call result
				</summary>
				<parameter name="timeout_seconds">the number of seconds to wait. if 0, it will only try once.
				</parameter>
				<returns>return last NPL.activate call result
				</returns>
			</function>
			<function line="73" name="activate_async_with_timeout">
				<summary>function NPL.activate_async_with_timeout(timeout_seconds, filename, msg)
This function is same as NPL.activate() except that if it failed. It will start a timer and send the message again and again until timeout_seconds passed. 
this function just repeatedly calls NPL.activate() until either the message is successfully sent out or timeout_seconds is reached. 
Internally, it will wait 0.1, 0.2, 0.4, 0.8, ... between unsuccessfull activation.
   @param timeout_seconds: the number of seconds to wait. if 0, it will only try once.
   @return the last NPL.activate call result
				</summary>
				<parameter name="timeout_seconds">the number of seconds to wait. if 0, it will only try once.
				</parameter>
				<parameter name="filename"/>
				<parameter name="msg"/>
				<returns>return last NPL.activate call result
				</returns>
			</function>
			<function line="109" name="ResetAllCookies">
				<summary>function NPL.ResetAllCookies()
name, value pairs or tables. 
nil means never expires. 
reset all cookies for all urls to empty.
				</summary>
			</function>
			<function line="118" name="SetCookie">
				<summary>function NPL.SetCookie(url, cookie)
set cookies for a given url.
   @param url: it is usually a web service or web page url string.
   @param cookies: it should be nil or a cookie table. Usually it is a table with 
{Data={user_id="GUID", session_key="GUID", app_key="GUID", counter=functor}, ExpireTime=nil }
counter will be supported later on, which will automatically increase by one or use the current system time in milliseconds. 
				</summary>
				<parameter name="url">it is usually a web service or web page url string.
				</parameter>
				<parameter name="cookie"/>
			</function>
			<function line="127" name="AddCookieVariable">
				<summary>function NPL.AddCookieVariable(url, name, value, ExpireTime)
add a cookie variable to a given URL.
   @param url: it is usually a web service or web page url string.
   @param name: string such as "session_key", "user_id"
   @param value: string or value
   @param ExpireTime: can be nil or a value. It will only be set if ExpireTime is smaller than the current cookie's expire time. 
				</summary>
				<parameter name="url">it is usually a web service or web page url string.
				</parameter>
				<parameter name="name">string such as "session_key", "user_id"
				</parameter>
				<parameter name="value">string or value
				</parameter>
				<parameter name="ExpireTime">can be nil or a value. It will only be set if ExpireTime is smaller than the current cookie's expire time. 
				</parameter>
			</function>
			<function line="143" name="GetCookie">
				<summary>function NPL.GetCookie(url)
get the cookies table by url. it may return nil if the cookie does not exist. 
				</summary>
				<parameter name="url"/>
			</function>
			<function line="151" name="MergeCookieWithMsg">
				<summary>function NPL.MergeCookieWithMsg(msg, cookie)
if msg={user_id="GUID1", somefields="XXX"} and cookies={user_id="GUID2", session_key="GUID", app_key="GUID",}, the msg will become
{user_id="GUID1", somefields="XXX", session_key="GUID", app_key="GUID",} after this function returns.
   @param msg: in/out msg table.
   @param cookie: it can be nil, it is usually the cookies table returned from NPL.GetCookie(url)
				</summary>
				<parameter name="msg">in/out msg table.
				</parameter>
				<parameter name="cookie">it can be nil, it is usually the cookies table returned from NPL.GetCookie(url)
				</parameter>
			</function>
			<function line="163" name="CallWebservice">
				<summary>function NPL.CallWebservice(URL, msg)
call a web service with data cookie support. One can bind a cookie object with a given URL. The cookie object will to copied to the msg data before sending
   @param URL: url of the web service
   @param msg: an NPL table to be sent. If there is a cookie object, it will be copied to data before sending. such as the user_id, session_id, app_key, counter, etc. 
				</summary>
				<parameter name="URL">url of the web service
				</parameter>
				<parameter name="msg">an NPL table to be sent. If there is a cookie object, it will be copied to data before sending. such as the user_id, session_id, app_key, counter, etc. 
				</parameter>
			</function>
			<function line="169" name="GetSrcUserName">
				<summary>function NPL.GetSrcUserName()
retrieve the user name from the current packet's source name. return "" if no username is found.
				</summary>
			</function>
			<function line="188" name="SyncFile">
				<summary>function NPL.SyncFile(FileUrl, DestFolder, ScriptCallBack, DownloaderName)
sync a file with a remote server
This function is very similar to NPL.AsyncDownload() except that FileUrl may contain CRC code
and that if will not perform the actual download if the DestFolder is a file with the right CRC
e.g.
NPL.SyncFile("http://www.kids3dmovie.com/uploads/LiXizhi/auto2.jpg?CRC32=507094163", "temp\\renamed.jpg", "DownloadCallback()", "test1");
   @param FileUrl: it may be a URL that ends with ?CRC32=number, such as http://www.kids3dmovie.com/test.jpg?CRC32=1234
   @param ScriptCallBack: a gobal variable called 
msg = {DownloadState=""|"complete"|"terminated", totalFileSize=number, currentFileSize=number, PercentDone=number} is the input. msg may be nil if any error occurs.
   @return:  1 it is downloading; 2 downloading is done because a file already exist with the currect CRC32 code
				</summary>
				<parameter name="FileUrl">it may be a URL that ends with ?CRC32=number, such as http://www.kids3dmovie.com/test.jpg?CRC32=1234
				</parameter>
				<parameter name="DestFolder"/>
				<parameter name="ScriptCallBack">a gobal variable called 
msg = {DownloadState=""|"complete"|"terminated", totalFileSize=number, currentFileSize=number, PercentDone=number} is the input. msg may be nil if any error occurs.
				</parameter>
				<parameter name="DownloaderName"/>
				<returns>return 1 it is downloading; 2 downloading is done because a file already exist with the currect CRC32 code
				</returns>
			</function>
			<function line="231" name="DeleteAllDownloadTempFiles">
				<summary>function NPL.DeleteAllDownloadTempFiles()
all temp file due to NPL.SyncFile() is deleted. Perhaps, this function should be called once several weeks
				</summary>
			</function>
			<function line="235" name="SyncFileCallBack">
				<summary>function NPL.SyncFileCallBack(DestFolder, tempfile)

				</summary>
				<parameter name="DestFolder"/>
				<parameter name="tempfile"/>
			</function>
			<function line="251" name="CheckLoad">
				<summary>function NPL.CheckLoad(filename)
this is same as NPL.load, except that it only load local script file without the "(gl)" prefix. 
and it will check the file existence in both source folder and bin folder before loading the file. 
if file is not found in the first place, NPL.load() is not called at all. and the function will return nil.
   @return : true if loaded. 
				</summary>
				<parameter name="filename"/>
				<returns>return true if loaded. 
				</returns>
			</function>
			<function line="259" name="DoesFileExist">
				<summary>function NPL.DoesFileExist(filename)
if a given script or other file exist. it will also check precompiled file
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="266" name="LoadPublicFilesFromXML">
				<summary>function NPL.LoadPublicFilesFromXML(filename)
load public NPL file to id map from XML file.
   @param filename: if nil, it defaults to config/NPLPublicFiles.xml
				</summary>
				<parameter name="filename">if nil, it defaults to config/NPLPublicFiles.xml
				</parameter>
			</function>
		</table>
		<table name="ParaScene" src="script/ide/ParaEngineExtension.lua">
			<function line="19" name="GetCharacter">
				<summary>function ParaScene.GetCharacter(charName)
it first searches the global object, if not found, it will search the OPC list.
always check if the object is valid() upon receive.
				</summary>
				<parameter name="charName"/>
			</function>
			<function line="43" name="GetSceneState">
				<summary>function ParaScene.GetSceneState()
return the cached scene state attribute 
				</summary>
			</function>
			<function line="64" name="GetAttributeObject">
				<summary>function ParaScene.GetAttributeObject(name)
optimize C++ API function by caching the table
				</summary>
				<parameter name="name"/>
			</function>
			<function line="94" name="CaptureSceneState">
				<summary>function ParaScene.CaptureSceneState(options)
capture the current scene state to be restored later on. 
e.g. 
local state = ParaScene.CaptureSceneState()
-- change scene state and render ...
ParaScene.RestoreSceneState(state);

options: a table or nil. if nil, it will capture everything.
   @return: return the captured scene state 
				</summary>
				<parameter name="options"/>
				<returns>return return the captured scene state 
				</returns>
			</function>
			<function line="126" name="RestoreSceneState">
				<summary>function ParaScene.RestoreSceneState(state)
restore scene state
				</summary>
				<parameter name="state"/>
			</function>
		</table>
		<table name="ParaCamera" src="script/ide/ParaEngineExtension.lua">
			<function line="53" name="GetAttributeObject">
				<summary>function ParaCamera.GetAttributeObject()
optimize C++ API function by caching the table
				</summary>
			</function>
			<function line="181" name="SetLookAtPos">
				<summary>function ParaCamera.SetLookAtPos(x, y, z)
set the look at position of the camera. It uses an invisible avatar as the camera look at position. 
after calling this function, please call ParaCamera.SetEyePos(facing, height, angle) to change the camera eye position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="187" name="GetLookAtPos">
				<summary>function ParaCamera.GetLookAtPos()

				</summary>
			</function>
			<function line="192" name="GetEyePos">
				<summary>function ParaCamera.GetEyePos()
it returns polar coordinate system.
   @return camobjDist, LifeupAngle, CameraRotY
				</summary>
				<returns>return , LifeupAngle, CameraRotY
				</returns>
			</function>
			<function line="198" name="GetDummyObject">
				<summary>function ParaCamera.GetDummyObject()
create/get the dummy camera object for the camera look position. 
				</summary>
			</function>
			<function line="218" name="SetEyePos">
				<summary>function ParaCamera.SetEyePos(camobjDist, LifeupAngle, CameraRotY)
set the camera eye position by camera object distance, life up angle and rotation around the y axis. One must call ParaCamera.SetLookAtPos() before calling this function. 
e.g.ParaCamera.SetEyePos(5, 1.3, 0.4);
				</summary>
				<parameter name="camobjDist"/>
				<parameter name="LifeupAngle"/>
				<parameter name="CameraRotY"/>
			</function>
			<function line="228" name="SwitchOrthoView">
				<summary>function ParaCamera.SwitchOrthoView(orthoWidth, orthoHeight)
switch to orthographic camera view, where the near and far objects are of the same size.
   @param orthoWidth: the width of the orthographic view volumn.
   @param orthoHeight: the height of the orthographic view volumn.
				</summary>
				<parameter name="orthoWidth">the width of the orthographic view volumn.
				</parameter>
				<parameter name="orthoHeight">the height of the orthographic view volumn.
				</parameter>
			</function>
			<function line="249" name="SwitchPerspectiveView">
				<summary>function ParaCamera.SwitchPerspectiveView()
switch to perspective view
				</summary>
			</function>
		</table>
		<table name="ParaEngine" src="script/ide/ParaEngineExtension.lua">
			<function line="78" name="GetAttributeObject">
				<summary>function ParaEngine.GetAttributeObject()
optimize C++ API function by caching the table
				</summary>
			</function>
		</table>
		<table name="ParaAsset" src="script/ide/ParaEngineExtension.lua">
			<function line="260" name="GetRemoteTexture">
				<summary>function ParaAsset.GetRemoteTexture(url)

An internal ResourceStore (local server) called "_default_" is used to serve http textures. 
An internal time is also used so that we can sequence downloader threads. 
				</summary>
				<parameter name="url"/>
			</function>
			<function line="269" name="GetRemoteTexture_callback">
				<summary>function ParaAsset.GetRemoteTexture_callback(entry)

				</summary>
				<parameter name="entry"/>
			</function>
			<function line="279" name="ClearTextureCache">
				<summary>function ParaAsset.ClearTextureCache()
clear all cached textures. 
				</summary>
			</function>
			<function line="296" name="SyncRemoteTexture">
				<summary>function ParaAsset.SyncRemoteTexture(FileUrl)

This function is only used internally. It is called automatically when the ParaEngine Core detects that a texture is a remote texture.
   @note: One shall never call this function explicitly. In scripting interface, we can call ParaAsset.LoadRemoteTexture() instead
Load a texture from remote file. It first checks if the file is available from the local texture cache,
if yes, it will immediately use the local copy, before refreshing from the network. In either case, a thread is 
used to synchronize with the remote server. The only exception is that the filename contains a CRC32 parameter, 
where the remote sync is skipped if CRC match.
				</summary>
				<parameter name="FileUrl"/>
			</function>
			<function line="309" name="SyncRemoteTexture_callback">
				<summary>function ParaAsset.SyncRemoteTexture_callback(FileUrl, DestFolder)

				</summary>
				<parameter name="FileUrl"/>
				<parameter name="DestFolder"/>
			</function>
			<function line="325" name="LoadRemoteTexture">
				<summary>function ParaAsset.LoadRemoteTexture(filename, loadingtexture)
Load a remote texture explicitly. This function differs from the original ParaAsset.LoadTexture() that
it allows you to specify a loadingtexture to display while the texture is being downloaded.
   @param filename: http texture
	note3: crc32 code can be appended to file name, so that the same file does not need to be downloaded multiple times if local and server version match. such as "http://www.paraengine.com/images/index_12.png?CRC32=0".
   @param loadingtexture: while filename is being downloaded, this texture will be used.
   @return: texture is returned.
				</summary>
				<parameter name="filename">http texture
	note3: crc32 code can be appended to file name, so that the same file does not need to be downloaded multiple times if local and server version match. such as "http://www.paraengine.com/images/index_12.png?CRC32=0".
				</parameter>
				<parameter name="loadingtexture">while filename is being downloaded, this texture will be used.
				</parameter>
				<returns>return texture is returned.
				</returns>
			</function>
		</table>
		<table name="Event" src="script/ide/System/Core/Event.lua">
			<function line="29" name="ctor">
				<summary>function Event:ctor()

				</summary>
			</function>
			<function line="32" name="init">
				<summary>function Event:init(event_type)

				</summary>
				<parameter name="event_type"/>
			</function>
			<function line="41" name="new_static">
				<summary>function Event:new_static(event_type)
get a singleton event by its types
event will be set to unaccepeted. 
				</summary>
				<parameter name="event_type"/>
			</function>
			<function line="60" name="use_static_new">
				<summary>function Event:use_static_new()
static function: after calling this, Event:new() will no longer create new object, but return the singleton class object instead. 
this is useful, if you send event without paramaters and without nested calls that depends on self:accept(). 
				</summary>
			</function>
			<function line="64" name="GetType">
				<summary>function Event:GetType() 

				</summary>
			</function>
			<function line="68" name="GetHandlerFuncName">
				<summary>function Event:GetHandlerFuncName()

				</summary>
			</function>
			<function line="72" name="accept">
				<summary>function Event:accept()

				</summary>
			</function>
			<function line="76" name="ignore">
				<summary>function Event:ignore()

				</summary>
			</function>
			<function line="80" name="setAccepted">
				<summary>function Event:setAccepted(accepted) 

				</summary>
				<parameter name="accepted"/>
			</function>
			<function line="84" name="isAccepted">
				<summary>function Event:isAccepted() 

				</summary>
			</function>
			<function line="89" name="spontaneous">
				<summary>function Event:spontaneous() 
whether it is sent spontneously instead of posted. 
				</summary>
			</function>
			<function line="94" name="OnTick">
				<summary>function Event:OnTick(deltaTime)
return true if event should be removed. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="98" name="tostring">
				<summary>function Event:tostring()

				</summary>
			</function>
		</table>
		<table name="EventTickFunc" src="script/ide/System/Core/Event.lua">
			<function line="109" name="ctor">
				<summary>function EventTickFunc:ctor()

				</summary>
			</function>
			<function line="116" name="init">
				<summary>function EventTickFunc:init(ms_delay_time, sender, slot)

   @param ms_delay_time: in ms seconds.
   @param sender: nil or a class object.
   @param slot: the slot function. 
				</summary>
				<parameter name="ms_delay_time">in ms seconds.
				</parameter>
				<parameter name="sender">nil or a class object.
				</parameter>
				<parameter name="slot">the slot function. 
				</parameter>
			</function>
			<function line="123" name="OnTick">
				<summary>function EventTickFunc:OnTick(deltaTime)

				</summary>
				<parameter name="deltaTime"/>
			</function>
		</table>
		<table name="TimerEvent" src="script/ide/System/Core/Event.lua">
			<function line="139" name="ctor">
				<summary>function TimerEvent:ctor()

				</summary>
			</function>
			<function line="143" name="init">
				<summary>function TimerEvent:init(timerId)

				</summary>
				<parameter name="timerId"/>
			</function>
			<function line="147" name="timerId">
				<summary>function TimerEvent:timerId() 

				</summary>
			</function>
		</table>
		<table name="ToolBase" src="script/ide/System/Core/ToolBase.lua">
			<function line="66" name="ctor">
				<summary>function ToolBase:ctor()

				</summary>
			</function>
			<function line="70" name="Destroy">
				<summary>function ToolBase:Destroy()

				</summary>
			</function>
			<function line="102" name="isAncestorOf">
				<summary>function ToolBase:isAncestorOf(child)
Returns true if this object is a parent, (or grandparent and so on
to any level), of the given child; otherwise returns false.
				</summary>
				<parameter name="child"/>
			</function>
			<function line="117" name="InitSingleton">
				<summary>function ToolBase:InitSingleton()
static function: to use the class itself as a singleton object. 
this function can be called many times, only the first time succeed. 
Once called, it will disable new() method for object instantiation.  
				</summary>
			</function>
			<function line="129" name="GetEvents">
				<summary>function ToolBase:GetEvents()
get event system. 
				</summary>
			</function>
			<function line="141" name="ChangeTimer">
				<summary>function ToolBase:ChangeTimer(dueTime, period)
change the timer
   @param dueTime The amount of time to delay before the invoking the callback method specified in milliseconds
Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
   @param period The time interval between invocations of the callback method in milliseconds. 
Specify nil to disable periodic signaling. 
				</summary>
				<parameter name="dueTime">The amount of time to delay before the invoking the callback method specified in milliseconds
Specify zero (0) to restart the timer immediately. Specify nil to prevent the timer from restarting.
				</parameter>
				<parameter name="period">The time interval between invocations of the callback method in milliseconds. 
Specify nil to disable periodic signaling. 
				</parameter>
			</function>
			<function line="148" name="KillTimer">
				<summary>function ToolBase:KillTimer()

				</summary>
			</function>
			<function line="155" name="GetEventList">
				<summary>function ToolBase:GetEventList()
get event list. 
				</summary>
			</function>
			<function line="167" name="ScheduleFunctionCall">
				<summary>function ToolBase:ScheduleFunctionCall(ms_delay_time, sender, slot)

   @param ms_delay_time: in ms seconds.
   @param sender: nil or a class object or anonymous function.
   @param slot: the slot function. if nil, the sender can be an anonymous function. 
				</summary>
				<parameter name="ms_delay_time">in ms seconds.
				</parameter>
				<parameter name="sender">nil or a class object or anonymous function.
				</parameter>
				<parameter name="slot">the slot function. if nil, the sender can be an anonymous function. 
				</parameter>
			</function>
			<function line="185" name="OnTickEvents">
				<summary>function ToolBase:OnTickEvents(deltaTime_ms)
private function:
				</summary>
				<parameter name="deltaTime_ms"/>
			</function>
			<function line="203" name="OnTick">
				<summary>function ToolBase:OnTick()
timer function callback:
				</summary>
			</function>
			<function line="212" name="GetConnection">
				<summary>function ToolBase:GetConnection(signal, bCreateIfNotExist)
getting connection list of a signal function. 
this is like axon in human brain.
   @param signal: function or string of function name.
   @param bCreateIfNotExist: default to nil.
   @return a list of synapses on the signal(axon).
				</summary>
				<parameter name="signal">function or string of function name.
				</parameter>
				<parameter name="bCreateIfNotExist">default to nil.
				</parameter>
				<returns>return list of synapses on the signal(axon).
				</returns>
			</function>
			<function line="247" name="Connect">
				<summary>function ToolBase.Connect(sender, signal, receiver, slot, connection_type)
static function: make automatic connection. If the sender is self pointer, it can be used as member function.
   @param connection_type: such as "UniqueConnection", if nil, default to "AutoConnection"
   @param sender: the sender class object.
   @param signal: a member function (or name) on the sender.
   @param receiver:the receiver class object. it can also be anonymous function in which case this should be the last parameter.
   @param slot: a member function (or name) on the receiver to connect to. 
				</summary>
				<parameter name="sender">the sender class object.
				</parameter>
				<parameter name="signal">a member function (or name) on the sender.
				</parameter>
				<parameter name="receiver">the receiver class object. it can also be anonymous function in which case this should be the last parameter.
				</parameter>
				<parameter name="slot">a member function (or name) on the receiver to connect to. 
				</parameter>
				<parameter name="connection_type">such as "UniqueConnection", if nil, default to "AutoConnection"
				</parameter>
			</function>
			<function line="269" name="ConnectImp">
				<summary>function ToolBase.ConnectImp(sender, signal, receiver, slot, connection_type)
implementation without parameter validation. 
				</summary>
				<parameter name="sender"/>
				<parameter name="signal"/>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="connection_type"/>
			</function>
			<function line="305" name="DisconnectHelper">
				<summary>function ToolBase:DisconnectHelper(connection, receiver, slot, disconnectType)
remove synapse from connection. 
				</summary>
				<parameter name="connection"/>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="disconnectType"/>
			</function>
			<function line="327" name="Disconnect">
				<summary>function ToolBase.Disconnect(sender, signal, receiver, slot, disconnectType)

   @param signal: if nil, it will remove all signal connections.
   @param disconnectType: "DisconnectOne" or "DisconnectAll", default to all. 
				</summary>
				<parameter name="sender"/>
				<parameter name="signal">if nil, it will remove all signal connections.
				</parameter>
				<parameter name="receiver"/>
				<parameter name="slot"/>
				<parameter name="disconnectType">"DisconnectOne" or "DisconnectAll", default to all. 
				</parameter>
			</function>
			<function line="361" name="DisconnectSenders">
				<summary>function ToolBase:DisconnectSenders()
disconnect from all senders
this function is mostly used in destructor to automatically break incoming connections.
				</summary>
			</function>
			<function line="378" name="DisconnectSender">
				<summary>function ToolBase:DisconnectSender(srcSender)
disconnect all connections from a given sender
				</summary>
				<parameter name="srcSender"/>
			</function>
			<function line="404" name="sender">
				<summary>function ToolBase:sender()
Returns a pointer to the object that sent the signal, if called in
a slot activated by a signal; otherwise it returns 0. The pointer
is valid only during the execution of the slot that calls this
function from this object's thread context.

The pointer returned by this function becomes invalid if the
sender is destroyed, or if the slot is disconnected from the
sender's signal.
   @warning This function violates the object-oriented principle of
modularity. However, getting access to the sender might be useful
when many signals are connected to a single slot.
				</summary>
			</function>
			<function line="413" name="Activate">
				<summary>function ToolBase.Activate(sender, signal, ...)
static or member function: activate a given signal, all connected slots will be called.
   @param sender: usually self. if used as a member function. 
				</summary>
				<parameter name="sender">usually self. if used as a member function. 
				</parameter>
				<parameter name="signal"/>
			</function>
			<function line="428" name="ConnectNotify">
				<summary>function ToolBase:ConnectNotify(signal)
This virtual function is called when something has been connected
to a signal in this object. 
warning This function violates the object-oriented principle of
modularity. However, it might be useful for optimizing access to expensive resources.
				</summary>
				<parameter name="signal"/>
			</function>
			<function line="434" name="DisconnectNotify">
				<summary>function ToolBase:DisconnectNotify(signal)
This virtual function is called when something has been disconnected from a signal in this object.
warning This function violates the object-oriented principle of
modularity. However, it might be useful for optimizing access to expensive resources.
				</summary>
				<parameter name="signal"/>
			</function>
			<function line="437" name="GetChildren">
				<summary>function ToolBase:GetChildren()

				</summary>
			</function>
			<function line="444" name="SetParent">
				<summary>function ToolBase:SetParent(parent)

				</summary>
				<parameter name="parent"/>
			</function>
			<function line="448" name="setParent_helper">
				<summary>function ToolBase:setParent_helper(parent)

				</summary>
				<parameter name="parent"/>
			</function>
			<function line="467" name="deleteChildren">
				<summary>function ToolBase:deleteChildren()

				</summary>
			</function>
			<function line="511" name="dumpObjectInfo">
				<summary>function ToolBase:dumpObjectInfo()
Dumps information about signal connections, etc. for this object to the log.
				</summary>
			</function>
			<function line="557" name="installEventFilter">
				<summary>function ToolBase:installEventFilter(obj)
Installs an event filter obj on this object. filter is like the hook chain
An event filter is an object that receives all events that are
sent to this object. The filter can either stop the event or
forward it to this object. The event filter obj receives
events via its eventFilter() function. The eventFilter() function
must return true if the event should be filtered, (i.e. stopped);
otherwise it must return false.
If multiple event filters are installed on a single object, the
filter that was installed last is activated first.
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="575" name="removeEventFilter">
				<summary>function ToolBase:removeEventFilter(obj)
Removes an event filter object obj from this object. The
request is ignored if such an event filter has not been installed.
All event filters for this object are automatically removed when
this object is destroyed.
It is always safe to remove an event filter, even during event
filter activation (i.e. from the eventFilter() function).
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="594" name="filterEvent">
				<summary>function ToolBase:filterEvent(object, event)
filter the event
   @return true if event is stopped by one of the filtered objects. 
				</summary>
				<parameter name="object"/>
				<parameter name="event"/>
				<returns>return if event is stopped by one of the filtered objects. 
				</returns>
			</function>
			<function line="615" name="eventFilter">
				<summary>function ToolBase:eventFilter(object, event)
virtual function: 
Filters events if this object has been installed as an event
filter for the watched object.
In your reimplementation of this function, if you want to filter
the event out, i.e. stop it being handled further, return
true; otherwise return false.
   @sa installEventFilter()
				</summary>
				<parameter name="object"/>
				<parameter name="event"/>
			</function>
			<function line="180" name="Property" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.Property(class_def, name, default_value, getterName, setterName, notifySignal)
define a property with overridable get/set function. 
e.g.  YourClass:Property(property_name, ...);
   @param class_def: the class table (not instance).
   @param name: First letter is usually in capital.  (it can also be property table. )
such as  {name="visible", set="setVisible", get="isVisible", default=nil, sig=nil, type="bool", desc=nil, }
{"visible", false, "isVisible", "setVisible"}
{"Enabled", false, auto=true}
   @param getterName: if nil, default to "Get"..name.
   @param setterName: if nil, default to "Set"..name.
   @param notifySignal: the signal to fire when property changed. default to nil. 
				</summary>
				<parameter name="class_def">the class table (not instance).
				</parameter>
				<parameter name="name">First letter is usually in capital.  (it can also be property table. )
such as  {name="visible", set="setVisible", get="isVisible", default=nil, sig=nil, type="bool", desc=nil, }
{"visible", false, "isVisible", "setVisible"}
{"Enabled", false, auto=true}
				</parameter>
				<parameter name="default_value"/>
				<parameter name="getterName">if nil, default to "Get"..name.
				</parameter>
				<parameter name="setterName">if nil, default to "Set"..name.
				</parameter>
				<parameter name="notifySignal">the signal to fire when property changed. default to nil. 
				</parameter>
			</function>
			<function line="204" name="Signal" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.Signal(class_def, name)
define a signal
e.g. YourClass:Signal("OnXXXChanged", ...);
   @param ...: parameter list is only used for documentation purpose. 
				</summary>
				<parameter name="class_def"/>
				<parameter name="name"/>
			</function>
			<function line="218" name="AddField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase.AddField(class_def, name, property)

				</summary>
				<parameter name="class_def"/>
				<parameter name="name"/>
				<parameter name="property"/>
			</function>
			<function line="234" name="IsValid" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:IsValid()

				</summary>
			</function>
			<function line="240" name="findPlug" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:findPlug(name)
find and return a given attribute plug object. 
this is a public helper function. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="244" name="GetFieldNum" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldNum()

				</summary>
			</function>
			<function line="248" name="GetFieldIndex" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldIndex(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="252" name="GetFieldName" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldName(valueIndex)

				</summary>
				<parameter name="valueIndex"/>
			</function>
			<function line="259" name="GetFieldType" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetFieldType(nIndex)

				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="268" name="SetFieldInternal" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:SetFieldInternal(name, value)
same as SetField, except that some implementation may not send signals like valueChanged even data is modified. 
it will automatically fallback to SetField if not such implementation is provided by the attribute object.  
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="272" name="SetField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:SetField(name, value)

				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="286" name="GetField" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetField(name, defaultValue)

				</summary>
				<parameter name="name"/>
				<parameter name="defaultValue"/>
			</function>
			<function line="306" name="GetAttributeObject" src="script/ide/System/Core/ToolBase_p.lua">
				<summary>function ToolBase:GetAttributeObject()

				</summary>
			</function>
		</table>
		<table name="SignalConnections" src="script/ide/System/Core/ToolBase_p.lua">
			<function line="21" name="ctor">
				<summary>function SignalConnections:ctor()

Title: private classes 
Author(s): LiXizhi
Date: 2014/11/25
Desc: This function should only be included by ToolBase.lua
use the lib:
------------------------------------------------------------
NPL.load("(gl)script/ide/System/Core/ToolBase_p.lua");
local ConnectionSynapse = commonlib.gettable("System.Core.ConnectionSynapse");
local SignalConnections = commonlib.gettable("System.Core.SignalConnections");
------------------------------------------------------------
----------------------------------------------
signal connections.
----------------------------------------------
				</summary>
			</function>
			<function line="25" name="Get">
				<summary>function SignalConnections:Get(signal)

				</summary>
				<parameter name="signal"/>
			</function>
			<function line="29" name="Set">
				<summary>function SignalConnections:Set(signal, axon_connection)

				</summary>
				<parameter name="signal"/>
				<parameter name="axon_connection"/>
			</function>
			<function line="33" name="pairs">
				<summary>function SignalConnections:pairs()

				</summary>
			</function>
			<function line="37" name="CleanConnectionLists">
				<summary>function SignalConnections:CleanConnectionLists()

				</summary>
			</function>
		</table>
		<table name="ConnectionSynapse" src="script/ide/System/Core/ToolBase_p.lua">
			<function line="55" name="ctor">
				<summary>function ConnectionSynapse:ctor()

				</summary>
			</function>
			<function line="58" name="IsConnectedTo">
				<summary>function ConnectionSynapse:IsConnectedTo(receiver, slot)

				</summary>
				<parameter name="receiver"/>
				<parameter name="slot"/>
			</function>
			<function line="63" name="Activate">
				<summary>function ConnectionSynapse:Activate(...)
invoke the slot
				</summary>
			</function>
		</table>
		<table name="painter" src="script/ide/System/Core/PainterContext.lua">
			<function line="32" name="ctor">
				<summary>function painter:ctor()

				</summary>
			</function>
			<function line="36" name="rect">
				<summary>function painter:rect()
TODO:
				</summary>
			</function>
			<function line="41" name="region">
				<summary>function painter:region()
TODO:
				</summary>
			</function>
			<function line="45" name="init">
				<summary>function painter:init(parentWindow)

				</summary>
				<parameter name="parentWindow"/>
			</function>
			<function line="50" name="GetWindow">
				<summary>function painter:GetWindow()

				</summary>
			</function>
			<function line="54" name="Begin">
				<summary>function painter:Begin(paintDevice)

				</summary>
				<parameter name="paintDevice"/>
			</function>
			<function line="58" name="End">
				<summary>function painter:End()

				</summary>
			</function>
			<function line="62" name="Flush">
				<summary>function painter:Flush()

				</summary>
			</function>
			<function line="66" name="Save">
				<summary>function painter:Save()

				</summary>
			</function>
			<function line="70" name="Restore">
				<summary>function painter:Restore()

				</summary>
			</function>
			<function line="91" name="SetCompositionMode">
				<summary>function painter:SetCompositionMode(mode)

CompositionMode_SourceBlend= 0,
CompositionMode_SourceOver= 1,
CompositionMode_DestinationOver = 2,
CompositionMode_Clear = 3,
CompositionMode_Source = 4,
CompositionMode_Destination = 5,
CompositionMode_SourceIn,
CompositionMode_DestinationIn,
CompositionMode_SourceOut,
CompositionMode_DestinationOut,
CompositionMode_SourceAtop,
CompositionMode_DestinationAtop,
CompositionMode_Xor,
CompositionMode_Plus,
CompositionMode_PlusSourceBlend,
				</summary>
				<parameter name="mode"/>
			</function>
			<function line="95" name="GetCompositionMode">
				<summary>function painter:GetCompositionMode()

				</summary>
			</function>
			<function line="102" name="SetFont">
				<summary>function painter:SetFont(font)
set current font
   @param font: {family="System", size=10, bold=true}
or it can be string "System;14;" or "System;14;bold"
				</summary>
				<parameter name="font">{family="System", size=10, bold=true}
or it can be string "System;14;" or "System;14;bold"
				</parameter>
			</function>
			<function line="110" name="SetPen">
				<summary>function painter:SetPen(pen)
set current pen
   @param pen: { width=1, brush = {color="#00000000", texture="filename or texture asset"}, }
or it can be {width=1, color="#000000", texture="filename or texture asset"}
or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</summary>
				<parameter name="pen">{ width=1, brush = {color="#00000000", texture="filename or texture asset"}, }
or it can be {width=1, color="#000000", texture="filename or texture asset"}
or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</parameter>
			</function>
			<function line="117" name="SetBrush">
				<summary>function painter:SetBrush(brush)
set current brush (texture and color)
   @param brush: { color="#00000000", texture="filename or texture asset"} 
or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</summary>
				<parameter name="brush">{ color="#00000000", texture="filename or texture asset"} 
or it can be pen color "#ff000000" or "255 255 255" or DWORD
				</parameter>
			</function>
			<function line="121" name="SetBrushOrigin">
				<summary>function painter:SetBrushOrigin(x, y)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="127" name="SetBackground">
				<summary>function painter:SetBackground(brush)
set current background brush
   @param brush: { color="#00000000", texture="filename or texture asset"}
				</summary>
				<parameter name="brush">{ color="#00000000", texture="filename or texture asset"}
				</parameter>
			</function>
			<function line="132" name="SetOpacity">
				<summary>function painter:SetOpacity(fOpacity)
between [0,1]
				</summary>
				<parameter name="fOpacity"/>
			</function>
			<function line="136" name="SetClipRegion">
				<summary>function painter:SetClipRegion(x, y, w, h)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w"/>
				<parameter name="h"/>
			</function>
			<function line="140" name="SetClipping">
				<summary>function painter:SetClipping(enable)

				</summary>
				<parameter name="enable"/>
			</function>
			<function line="144" name="HasClipping">
				<summary>function painter:HasClipping()

				</summary>
			</function>
			<function line="152" name="SetTransform">
				<summary>function painter:SetTransform(trans, combine)
Sets the world transformation matrix.
If combine is true, the specified matrix is combined with the current matrix; otherwise it replaces the current matrix.
				</summary>
				<parameter name="trans"/>
				<parameter name="combine"/>
			</function>
			<function line="156" name="GetTransform">
				<summary>function painter:GetTransform(out)

				</summary>
				<parameter name="out"/>
			</function>
			<function line="160" name="Scale">
				<summary>function painter:Scale(sx, sy)

				</summary>
				<parameter name="sx"/>
				<parameter name="sy"/>
			</function>
			<function line="164" name="Shear">
				<summary>function painter:Shear(sh, sv)

				</summary>
				<parameter name="sh"/>
				<parameter name="sv"/>
			</function>
			<function line="168" name="Rotate">
				<summary>function painter:Rotate(a)

				</summary>
				<parameter name="a"/>
			</function>
			<function line="172" name="Translate">
				<summary>function painter:Translate(dx, dy)

				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
			</function>
			<function line="176" name="DrawPoint">
				<summary>function painter:DrawPoint(x, y)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="180" name="DrawLine">
				<summary>function painter:DrawLine(x1, y1, x2, y2)

				</summary>
				<parameter name="x1"/>
				<parameter name="y1"/>
				<parameter name="x2"/>
				<parameter name="y2"/>
			</function>
			<function line="188" name="DrawTriangleList">
				<summary>function painter:DrawTriangleList(triangles, nTriangleCount, nIndexOffset)
draw triangle List
   @param triangles: array of triangle vertices {{0,1,0}, {1,0,0}, {0,0,1}, ...},
   @param nTriangleCount: triangle count, default to #triangleList/ 3
   @param nIndexOffset: start index offset. default to 0.
				</summary>
				<parameter name="triangles">array of triangle vertices {{0,1,0}, {1,0,0}, {0,0,1}, ...},
				</parameter>
				<parameter name="nTriangleCount">triangle count, default to #triangleList/ 3
				</parameter>
				<parameter name="nIndexOffset">start index offset. default to 0.
				</parameter>
			</function>
			<function line="197" name="DrawLineList">
				<summary>function painter:DrawLineList(lineList, nlineCount, nIndexOffset)
draw line List
   @param lineList: array of line vertices {{0,1,0}, {1,0,1},  ...},
   @param nlineCount: line count, default to #lineList/ 2
   @param nIndexOffset: start index offset. default to 0.
				</summary>
				<parameter name="lineList">array of line vertices {{0,1,0}, {1,0,1},  ...},
				</parameter>
				<parameter name="nlineCount">line count, default to #lineList/ 2
				</parameter>
				<parameter name="nIndexOffset">start index offset. default to 0.
				</parameter>
			</function>
			<function line="202" name="DrawRect">
				<summary>function painter:DrawRect(left, top, width, height)

				</summary>
				<parameter name="left"/>
				<parameter name="top"/>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
			<function line="210" name="DrawTexture">
				<summary>function painter:DrawTexture(x, y, w, h, pTexture, sx, sy, sw, sh)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w"/>
				<parameter name="h"/>
				<parameter name="pTexture"/>
				<parameter name="sx"/>
				<parameter name="sy"/>
				<parameter name="sw"/>
				<parameter name="sh"/>
			</function>
			<function line="219" name="DrawText">
				<summary>function painter:DrawText(x, y, w, h, sText, textOption)

   @param w, h: if h is nil, w is the sText
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="w">, h: if h is nil, w is the sText
				</parameter>
				<parameter name="h"/>
				<parameter name="sText"/>
				<parameter name="textOption"/>
			</function>
			<function line="229" name="DrawTextScaled">
				<summary>function painter:DrawTextScaled(x, y, text, scale)
helper function:
   @param scale: text scale. if nil or 1, it is same as DrawText()
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="text"/>
				<parameter name="scale">text scale. if nil or 1, it is same as DrawText()
				</parameter>
			</function>
			<function line="269" name="DrawTextScaledEx">
				<summary>function painter:DrawTextScaledEx(x, y, width, height, text, alignment, scale)
Set the text align and other text displaying formats
   @param alignment: It can be any combination of the following values.
DT_BOTTOM (0x00000008)
Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.
DT_CALCRECT (0x00000400)
Determines the width and height of the rectangle. If there are multiple lines of text, ID3DXFont::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DXFont::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DXFont::DrawText returns the height of the formatted text but does not draw the text.
DT_CENTER (0x00000001)
Centers text horizontally in the rectangle.
DT_EXPANDTABS (0x00000040)
Expands tab characters. The default number of characters per tab is eight.
DT_LEFT (0x00000000)
Aligns text to the left.
DT_NOCLIP (0x00000100)
Draws without clipping. ID3DXFont::DrawText is somewhat faster when DT_NOCLIP is used.
DT_RIGHT (0x00000002)
Aligns text to the right.
DT_RTLREADING
Displays text in right-to-left reading order for bi-directional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.
DT_SINGLELINE (0x00000020)
Displays text on a single line only. Carriage returns and line feeds do not break the line.
DT_TOP (0x00000000)
Top-justifies text.
DT_VCENTER (0x00000004)
Centers text vertically (single line only).
DT_WORDBREAK (0x00000010)
Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="text"/>
				<parameter name="alignment">It can be any combination of the following values.
DT_BOTTOM (0x00000008)
Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.
DT_CALCRECT (0x00000400)
Determines the width and height of the rectangle. If there are multiple lines of text, ID3DXFont::DrawText uses the width of the rectangle pointed to by the pRect parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, ID3DXFont::DrawText modifies the right side of the rectangle so that it bounds the last character in the line. In either case, ID3DXFont::DrawText returns the height of the formatted text but does not draw the text.
DT_CENTER (0x00000001)
Centers text horizontally in the rectangle.
DT_EXPANDTABS (0x00000040)
Expands tab characters. The default number of characters per tab is eight.
DT_LEFT (0x00000000)
Aligns text to the left.
DT_NOCLIP (0x00000100)
Draws without clipping. ID3DXFont::DrawText is somewhat faster when DT_NOCLIP is used.
DT_RIGHT (0x00000002)
Aligns text to the right.
DT_RTLREADING
Displays text in right-to-left reading order for bi-directional text when a Hebrew or Arabic font is selected. The default reading order for all text is left-to-right.
DT_SINGLELINE (0x00000020)
Displays text on a single line only. Carriage returns and line feeds do not break the line.
DT_TOP (0x00000000)
Top-justifies text.
DT_VCENTER (0x00000004)
Centers text vertically (single line only).
DT_WORDBREAK (0x00000010)
Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the pRect parameter. A carriage return/line feed sequence also breaks the line.
				</parameter>
				<parameter name="scale"/>
			</function>
			<function line="287" name="DrawRectTexture">
				<summary>function painter:DrawRectTexture(x, y, width, height, texture)
helper function:
   @param texture: if nil or "" or "Texture/whitedot.png", it will render with current pen color. 
otherwise it can also be single or 9-tiled texture
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="width"/>
				<parameter name="height"/>
				<parameter name="texture">if nil or "" or "Texture/whitedot.png", it will render with current pen color. 
otherwise it can also be single or 9-tiled texture
				</parameter>
			</function>
			<function line="301" name="SetMatrixMode">
				<summary>function painter:SetMatrixMode(nMode)
similar to glMatrixMode() in opengl.
   @param nMode:  0 is world, 1 is view, 2 is projection. default to 0. 
				</summary>
				<parameter name="nMode">0 is world, 1 is view, 2 is projection. default to 0. 
				</parameter>
			</function>
			<function line="305" name="GetMatrixMode">
				<summary>function painter:GetMatrixMode()

				</summary>
			</function>
			<function line="310" name="PushMatrix">
				<summary>function painter:PushMatrix()
similar to glPushMatrix() in opengl.
				</summary>
			</function>
			<function line="315" name="PopMatrix">
				<summary>function painter:PopMatrix()
similar to glPopMatrix() in opengl.
				</summary>
			</function>
			<function line="320" name="LoadCurrentMatrix">
				<summary>function painter:LoadCurrentMatrix()
retrieve the current matrix. 
				</summary>
			</function>
			<function line="325" name="LoadIdentityMatrix">
				<summary>function painter:LoadIdentityMatrix()
load identity matrix 
				</summary>
			</function>
			<function line="330" name="LoadBillboardMatrix">
				<summary>function painter:LoadBillboardMatrix()
load billboard matrix, so that everything rendered (including text) always face the camera.
				</summary>
			</function>
			<function line="336" name="LoadMatrix">
				<summary>function painter:LoadMatrix(mat)
we use row-major matrix
   @param mat: both 4*3 or 4*4 matrix are fine
				</summary>
				<parameter name="mat">both 4*3 or 4*4 matrix are fine
				</parameter>
			</function>
			<function line="341" name="MultiplyMatrix">
				<summary>function painter:MultiplyMatrix(mat)
multiply the current matrix with the specified matrix. we use row-major matrix 
				</summary>
				<parameter name="mat"/>
			</function>
			<function line="347" name="TranslateMatrix">
				<summary>function painter:TranslateMatrix(x, y, z)
multiply the current matrix by a translation matrix 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="354" name="RotateMatrix">
				<summary>function painter:RotateMatrix(angle, x, y, z)
multiply the current matrix by a rotation matrix 
				</summary>
				<parameter name="angle"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="360" name="ScaleMatrix">
				<summary>function painter:ScaleMatrix(x, y, z)
multiply the current matrix by a scaling matrix 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="367" name="GetScaling">
				<summary>function painter:GetScaling()
get current scaling.
   @return x,y,z of current scaling. 
				</summary>
				<returns>return ,y,z of current scaling. 
				</returns>
			</function>
			<function line="373" name="GetCurrentMatrix">
				<summary>function painter:GetCurrentMatrix()
get current matrix
   @return a new Matrix4
				</summary>
				<returns>return new Matrix4
				</returns>
			</function>
			<function line="379" name="EnableAutoLineWidth">
				<summary>function painter:EnableAutoLineWidth(bEnable)
if enabled, the minimum line width is 1 pixel for 3d lines.
   @param bEnable: if nil or true, it means true
				</summary>
				<parameter name="bEnable">if nil or true, it means true
				</parameter>
			</function>
		</table>
		<table name="Attribute" src="script/ide/System/Core/Attribute.lua">
			<function line="28" name="ctor">
				<summary>function Attribute:ctor()

				</summary>
			</function>
			<function line="33" name="init">
				<summary>function Attribute:init(attr, name)

   @param attr: the attribute object
   @param name: field name string. 
				</summary>
				<parameter name="attr">the attribute object
				</parameter>
				<parameter name="name">field name string. 
				</parameter>
			</function>
			<function line="39" name="IsValid">
				<summary>function Attribute:IsValid()

				</summary>
			</function>
			<function line="46" name="GetAttributeObject">
				<summary>function Attribute:GetAttributeObject()
get the underlying attribute object. 
				</summary>
			</function>
			<function line="55" name="GetObject">
				<summary>function Attribute:GetObject()
get the underlying object 
				</summary>
			</function>
			<function line="61" name="GetName">
				<summary>function Attribute:GetName()

				</summary>
			</function>
			<function line="65" name="GetIndex">
				<summary>function Attribute:GetIndex()

				</summary>
			</function>
			<function line="73" name="GetType">
				<summary>function Attribute:GetType()

				</summary>
			</function>
			<function line="81" name="IsFieldReadOnly">
				<summary>function Attribute:IsFieldReadOnly()

				</summary>
			</function>
			<function line="87" name="GetSchematics">
				<summary>function Attribute:GetSchematics()

				</summary>
			</function>
			<function line="95" name="GetSchematicsType">
				<summary>function Attribute:GetSchematicsType()

				</summary>
			</function>
			<function line="103" name="Call">
				<summary>function Attribute:Call()
call field by name. This function is only valid when The field type is void. 
It simply calls the function associated with the field name.
				</summary>
			</function>
			<function line="111" name="Reset">
				<summary>function Attribute:Reset()
Reset the field to its initial or default value. 
				</summary>
			</function>
			<function line="118" name="InvokeEditor">
				<summary>function Attribute:InvokeEditor(sParameters)
Invoke an (external) editor for a given field. This is usually for NPL script field
				</summary>
				<parameter name="sParameters"/>
			</function>
			<function line="125" name="GetValue">
				<summary>function Attribute:GetValue(output)

				</summary>
				<parameter name="output"/>
			</function>
			<function line="133" name="SetValue">
				<summary>function Attribute:SetValue(input)

				</summary>
				<parameter name="input"/>
			</function>
			<function line="141" name="SetValueInternal">
				<summary>function Attribute:SetValueInternal(input)
same as SetValue, except that some implementation may not send signals like valueChanged even data is modified. 
it will automatically fallback to SetValue if not such implementation is provided by the attribute object.  
				</summary>
				<parameter name="input"/>
			</function>
		</table>
		<table name="AttributeObject" src="script/ide/System/Core/AttributeObject.lua">
			<function line="55" name="ctor">
				<summary>function AttributeObject:ctor()

				</summary>
			</function>
			<function line="58" name="GetAttributeObject">
				<summary>function AttributeObject:GetAttributeObject()

				</summary>
			</function>
			<function line="62" name="QueryObject">
				<summary>function AttributeObject:QueryObject()

				</summary>
			</function>
			<function line="68" name="findPlug">
				<summary>function AttributeObject:findPlug(name)
find and return a given attribute plug object. 
this is a public helper function. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="75" name="equals">
				<summary>function AttributeObject:equals(obj)
return true, if this object is the same as the given object.
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="81" name="GetChild">
				<summary>function AttributeObject:GetChild(sName)
get child attribute object. this can be regarded as an intrusive data model of a given object. 
once you get an attribute object, you can use this model class to access all data in the hierarchy.
				</summary>
				<parameter name="sName"/>
			</function>
			<function line="85" name="GetChildAt">
				<summary>function AttributeObject:GetChildAt(nRowIndex, nColumnIndex)

   @param nColumnIndex: nil to default to 0;
				</summary>
				<parameter name="nRowIndex"/>
				<parameter name="nColumnIndex">nil to default to 0;
				</parameter>
			</function>
			<function line="89" name="GetChildCount">
				<summary>function AttributeObject:GetChildCount(nColumnIndex)

   @param nColumnIndex: if nil, default to 0. 
				</summary>
				<parameter name="nColumnIndex">if nil, default to 0. 
				</parameter>
			</function>
			<function line="94" name="GetColumnCount">
				<summary>function AttributeObject:GetColumnCount()
we support multi-dimensional child object. by default objects have only one column. 
				</summary>
			</function>
			<function line="99" name="IsValid">
				<summary>function AttributeObject:IsValid()
check if the object is valid
				</summary>
			</function>
			<function line="103" name="GetClassID">
				<summary>function AttributeObject:GetClassID()

				</summary>
			</function>
			<function line="107" name="GetClassName">
				<summary>function AttributeObject:GetClassName()
class name
				</summary>
			</function>
			<function line="112" name="GetClassDescription">
				<summary>function AttributeObject:GetClassDescription()
class description
				</summary>
			</function>
			<function line="123" name="SetOrder">
				<summary>function AttributeObject:SetOrder(order)

				</summary>
				<parameter name="order"/>
			</function>
			<function line="127" name="GetOrder">
				<summary>function AttributeObject:GetOrder()
get which order fields are saved.
				</summary>
			</function>
			<function line="131" name="GetFieldNum">
				<summary>function AttributeObject:GetFieldNum()
get the total number of field.
				</summary>
			</function>
			<function line="135" name="GetFieldName">
				<summary>function AttributeObject:GetFieldName(nIndex)
get the total number of field.
get field at the specified index. "" will be returned if index is out of range.
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="142" name="GetFieldIndex">
				<summary>function AttributeObject:GetFieldIndex(sFieldname)
get field index of a given field name. -1 will be returned if name not found.
   @param sFieldname
   @return index or -1
				</summary>
				<parameter name="sFieldname">
				</parameter>
				<returns>return or -1
				</returns>
			</function>
			<function line="150" name="GetFieldType">
				<summary>function AttributeObject:GetFieldType(nIndex)
get the field type as string
   @param nIndex : index of the field
   @return one of the following type may be returned 
"void" "bool" "string" "int" "float" "float_float" "float_float_float" "double" "vector2" "vector3" "vector4" "enum" "deprecated" ""
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return of the following type may be returned 
"void" "bool" "string" "int" "float" "float_float" "float_float_float" "double" "vector2" "vector3" "vector4" "enum" "deprecated" ""
				</returns>
			</function>
			<function line="157" name="IsFieldReadOnly">
				<summary>function AttributeObject:IsFieldReadOnly(nIndex)
whether the field is read only. a field is ready only if and only if it has only a get method.
   @param nIndex : index of the field
   @return true if it is ready only or field does not exist
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return if it is ready only or field does not exist
				</returns>
			</function>
			<function line="164" name="GetFieldSchematics">
				<summary>function AttributeObject:GetFieldSchematics(nIndex)
Get Field Schematics string
   @param nIndex: index of the field
   @return "" will be returned if index is out of range
				</summary>
				<parameter name="nIndex">index of the field
				</parameter>
				<returns>return "" will be returned if index is out of range
				</returns>
			</function>
			<function line="175" name="GetSchematicsType">
				<summary>function AttributeObject:GetSchematicsType(nIndex)
parse the schema type from the schema string.
   @return : simple schema type. it may be any of the following value. 
unspecified: ""
color3	":rgb" 
file	":file" 
script	":script"
integer	":int"
				</summary>
				<parameter name="nIndex"/>
				<returns>return simple schema type. it may be any of the following value. 
unspecified: ""
color3	":rgb" 
file	":file" 
script	":script"
integer	":int"
				</returns>
			</function>
			<function line="189" name="GetField">
				<summary>function AttributeObject:GetField(sFieldname, output)
get field by name.
e.g. suppose att is the attribute object.
local bGloble = att:GetField("global", true);
local facing = att:GetField("facing", 0);
local pos = att:GetField("position", {0,0,0});
pos[1] = pos[1]+100;pos[2] = 0;pos[3] = 10;
   @param sFieldname: field name
   @param output: default value. if field type is vectorN, output is a table with N items.
   @return: return the field result. If field not found, output will be returned. 
if field type is vectorN, return a table with N items.Please note table index start from 1
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="output">default value. if field type is vectorN, output is a table with N items.
				</parameter>
				<returns>return return the field result. If field not found, output will be returned. 
if field type is vectorN, return a table with N items.Please note table index start from 1
				</returns>
			</function>
			<function line="200" name="SetField">
				<summary>function AttributeObject:SetField(sFieldname, input)
set field by name 
e.g. suppose att is the attribute object.
att:SetField("facing", 3.14);
att:SetField("position", {100,0,0});
   @param sFieldname: field name
   @param input: input value. if field type is vectorN, input is a table with N items.--
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="input">input value. if field type is vectorN, input is a table with N items.--
				</parameter>
			</function>
			<function line="206" name="CallField">
				<summary>function AttributeObject:CallField(sFieldname)
call field by name. This function is only valid when The field type is void. 
It simply calls the function associated with the field name.
				</summary>
				<parameter name="sFieldname"/>
			</function>
			<function line="209" name="PrintObject">
				<summary>function AttributeObject:PrintObject(file)

				</summary>
				<parameter name="file"/>
			</function>
			<function line="215" name="ResetField">
				<summary>function AttributeObject:ResetField(nFieldID)
Reset the field to its initial or default value.
   @param nFieldID : field ID
   @return true if value is set; false if value not set. 
				</summary>
				<parameter name="nFieldID">field ID
				</parameter>
				<returns>return if value is set; false if value not set. 
				</returns>
			</function>
			<function line="222" name="InvokeEditor">
				<summary>function AttributeObject:InvokeEditor(nFieldID, sParameters)
Invoke an (external) editor for a given field. This is usually for NPL script field
   @param nFieldID : field ID
   @param sParameters : the parameter passed to the editor
   @return true if editor is invoked, false if failed or field has no editor. 
				</summary>
				<parameter name="nFieldID">field ID
				</parameter>
				<parameter name="sParameters">the parameter passed to the editor
				</parameter>
				<returns>return if editor is invoked, false if failed or field has no editor. 
				</returns>
			</function>
			<function line="239" name="GetDynamicField">
				<summary>function AttributeObject:GetDynamicField(sFieldnameOrIndex, output)
get field by name or index.
e.g. suppose att is the attribute object.
local bGloble = att:GetField("URL", nil);
local facing = att:GetField("Title", "default one");
   @param sFieldname: field name string or number index
   @param output: default value. if field type is vectorN, output is a table with N items.
   @return: return the field result. If field not found, output will be returned. 
if field type is vectorN, return a table with N items.Please note table index start from 1
				</summary>
				<parameter name="sFieldnameOrIndex"/>
				<parameter name="output">default value. if field type is vectorN, output is a table with N items.
				</parameter>
				<returns>return return the field result. If field not found, output will be returned. 
if field type is vectorN, return a table with N items.Please note table index start from 1
				</returns>
			</function>
			<function line="245" name="GetDynamicFieldNameByIndex">
				<summary>function AttributeObject:GetDynamicFieldNameByIndex(nIndex)
get field name by index
				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="249" name="GetDynamicFieldCount">
				<summary>function AttributeObject:GetDynamicFieldCount()
how many dynamic field this object currently have.
				</summary>
			</function>
			<function line="258" name="SetDynamicField">
				<summary>function AttributeObject:SetDynamicField(sFieldname, input)
set field by name 
e.g. suppose att is the attribute object.
att:SetDynamicField("URL", 3.14);
att:SetDynamicField("Title", {100,0,0});
   @param sFieldname: field name
   @param input: input value. can be value or string type--
				</summary>
				<parameter name="sFieldname">field name
				</parameter>
				<parameter name="input">input value. can be value or string type--
				</parameter>
			</function>
			<function line="262" name="RemoveAllDynamicFields">
				<summary>function AttributeObject:RemoveAllDynamicFields()
remove all dynamic fields
				</summary>
			</function>
			<function line="267" name="AddDynamicField">
				<summary>function AttributeObject:AddDynamicField(sName, dwType)
add dynamic field and return field index
   @return field index or -1
				</summary>
				<parameter name="sName"/>
				<parameter name="dwType"/>
				<returns>return index or -1
				</returns>
			</function>
		</table>
		<table name="Screen" src="script/ide/System/Windows/Screen.lua">
			<function line="19" name="ctor">
				<summary>function Screen:ctor()

				</summary>
			</function>
			<function line="22" name="GetGUIRoot">
				<summary>function Screen:GetGUIRoot()

				</summary>
			</function>
			<function line="29" name="GetWidth">
				<summary>function Screen:GetWidth()

				</summary>
			</function>
			<function line="33" name="GetHeight">
				<summary>function Screen:GetHeight()

				</summary>
			</function>
		</table>
		<table name="Window" src="script/ide/System/Windows/Window.lua">
			<function line="45" name="ctor">
				<summary>function Window:ctor()

				</summary>
			</function>
			<function line="54" name="Show">
				<summary>function Window:Show(name_or_params, parent, alignment, left, top, width, height)
show and bind to a new ParaUI control object to receive events from.
   @param name_or_params: name or params {}
   @param parent: if nil, it is the root GUI object.
   @param left,top, width, height: if nil, we will render at full size of parent.  
				</summary>
				<parameter name="name_or_params">name or params {}
				</parameter>
				<parameter name="parent">if nil, it is the root GUI object.
				</parameter>
				<parameter name="alignment"/>
				<parameter name="left">,top, width, height: if nil, we will render at full size of parent.  
				</parameter>
				<parameter name="top"/>
				<parameter name="width"/>
				<parameter name="height"/>
			</function>
			<function line="72" name="RefreshUrlComponent">
				<summary>function Window:RefreshUrlComponent()

				</summary>
			</function>
			<function line="79" name="ShowWithParams">
				<summary>function Window:ShowWithParams(params)

   @param params: {url="", alignment, x,y,width, height, allowDrag,zorder }
				</summary>
				<parameter name="params">{url="", alignment, x,y,width, height, allowDrag,zorder }
				</parameter>
			</function>
			<function line="127" name="CloseWindow">
				<summary>function Window:CloseWindow(bDestroy)

   @param bDestroy: if true, it will destroy the window, otherwise it will just hide it.
				</summary>
				<parameter name="bDestroy">if true, it will destroy the window, otherwise it will just hide it.
				</parameter>
			</function>
			<function line="132" name="GetNativeWindow">
				<summary>function Window:GetNativeWindow()

				</summary>
			</function>
			<function line="137" name="SetSizeToUsedSize">
				<summary>function Window:SetSizeToUsedSize()
set the window's size to be the layout's used size
				</summary>
			</function>
			<function line="148" name="create_sys">
				<summary>function Window:create_sys(native_window, initializeWindow, destroyOldWindow)
bind to native window.
				</summary>
				<parameter name="native_window"/>
				<parameter name="initializeWindow"/>
				<parameter name="destroyOldWindow"/>
			</function>
			<function line="217" name="handleGeometryChangeEvent">
				<summary>function Window:handleGeometryChangeEvent()

				</summary>
			</function>
			<function line="221" name="isWindow">
				<summary>function Window:isWindow()

				</summary>
			</function>
			<function line="226" name="handleMouseEvent">
				<summary>function Window:handleMouseEvent(event)

   @param event_type: "mousePressEvent", "mouseMoveEvent", "mouseWheelEvent", "mouseReleaseEvent"
				</summary>
				<parameter name="event"/>
			</function>
			<function line="251" name="handleMouseEnterLeaveEvent">
				<summary>function Window:handleMouseEnterLeaveEvent(mouse_event)

   @param event_type: "mouseEnterEvent", "mouseLeaveEvent"
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="275" name="UpdateGeometry_Sys">
				<summary>function Window:UpdateGeometry_Sys()
update geometry according to native ParaUI object
				</summary>
			</function>
			<function line="284" name="setGeometry_sys">
				<summary>function Window:setGeometry_sys(ax, ay, aw, ah)

				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="321" name="show_sys">
				<summary>function Window:show_sys()

				</summary>
			</function>
			<function line="325" name="hide_sys">
				<summary>function Window:hide_sys()

				</summary>
			</function>
			<function line="329" name="setVisible_sys">
				<summary>function Window:setVisible_sys(visible)

				</summary>
				<parameter name="visible"/>
			</function>
			<function line="336" name="EnableSelfPaint">
				<summary>function Window:EnableSelfPaint(bSelfPaint)
set whether the window will paint on its own render target. default is false. 
				</summary>
				<parameter name="bSelfPaint"/>
			</function>
			<function line="344" name="repaint">
				<summary>function Window:repaint()
force repaint in the next frame.
				</summary>
			</function>
			<function line="357" name="SetFocus_sys">
				<summary>function Window:SetFocus_sys()
set key focus to the window. 
				</summary>
			</function>
			<function line="371" name="update">
				<summary>function Window:update()
Updates the widget unless updates are disabled or the widget is hidden.
This function does not cause an immediate repaint; instead it schedules a paint in the next frame.
				</summary>
			</function>
			<function line="376" name="markDirty">
				<summary>function Window:markDirty()
causing a repaint
				</summary>
			</function>
			<function line="383" name="handleRender">
				<summary>function Window:handleRender()
handle ondraw callback from system ParaUI object. 
				</summary>
			</function>
			<function line="389" name="SetAutoClearBackground">
				<summary>function Window:SetAutoClearBackground(bEnabled)
whether to automatically clear the background to fully transparent when doing self paint on its own render target.
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="399" name="SetMouseCaptureEnabled">
				<summary>function Window:SetMouseCaptureEnabled(bEnabled)
Sets whether mouse capture should be enabled or not
If the return value is true, the window receives all mouse events until SetMouseGrabEnabled(false) is
called; other windows get no mouse events at all. Keyboard events are not affected.
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="406" name="IsMouseCaptureEnabled">
				<summary>function Window:IsMouseCaptureEnabled()

				</summary>
			</function>
			<function line="410" name="handleActivateEvent">
				<summary>function Window:handleActivateEvent(isActivate)

				</summary>
				<parameter name="isActivate"/>
			</function>
			<function line="419" name="handleDestroy_sys">
				<summary>function Window:handleDestroy_sys()
native windows have been forcibly closed. 
				</summary>
			</function>
			<function line="434" name="windowDestroyEvent">
				<summary>function Window:windowDestroyEvent()
virtual called when native window is destroyed. 
				</summary>
			</function>
			<function line="440" name="mapToGlobal">
				<summary>function Window:mapToGlobal(pos)
convert to global position
   @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="446" name="mapFromGlobal">
				<summary>function Window:mapFromGlobal(pos)
convert from global to local pos.
   @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="450" name="setCompositionPoint_sys">
				<summary>function Window:setCompositionPoint_sys(p)

				</summary>
				<parameter name="p"/>
			</function>
			<function line="456" name="paintEvent">
				<summary>function Window:paintEvent(painter)

				</summary>
				<parameter name="painter"/>
			</function>
			<function line="460" name="mousePressEvent">
				<summary>function Window:mousePressEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="471" name="mouseMoveEvent">
				<summary>function Window:mouseMoveEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
			<function line="492" name="mouseReleaseEvent">
				<summary>function Window:mouseReleaseEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
		</table>
		<table name="UIElement" src="script/ide/System/Windows/UIElement.lua">
			<function line="86" name="ctor">
				<summary>function UIElement:ctor()

				</summary>
			</function>
			<function line="94" name="init">
				<summary>function UIElement:init(parent)
init and return the object. 
If you add a child widget to an already visible widget you must
explicitly show the child to make it visible.
				</summary>
				<parameter name="parent"/>
			</function>
			<function line="99" name="SetParent">
				<summary>function UIElement:SetParent(parent)

				</summary>
				<parameter name="parent"/>
			</function>
			<function line="116" name="ApplyCss">
				<summary>function UIElement:ApplyCss(css)
virtual: apply css style
				</summary>
				<parameter name="css"/>
			</function>
			<function line="131" name="isAncestorOf">
				<summary>function UIElement:isAncestorOf(child)
Returns true if this object is a parent, (or grandparent and so on
to any level), of the given child, and both objects are within
the same window; otherwise returns false.
				</summary>
				<parameter name="child"/>
			</function>
			<function line="143" name="isWindow">
				<summary>function UIElement:isWindow()

				</summary>
			</function>
			<function line="148" name="GetWindow">
				<summary>function UIElement:GetWindow()
the native window object at the root of parent.
				</summary>
			</function>
			<function line="152" name="parentWidget">
				<summary>function UIElement:parentWidget()

				</summary>
			</function>
			<function line="156" name="isHidden">
				<summary>function UIElement:isHidden() 

				</summary>
			</function>
			<function line="160" name="isVisible">
				<summary>function UIElement:isVisible()

				</summary>
			</function>
			<function line="166" name="hide">
				<summary>function UIElement:hide()
A hidden widget will only become visible when show() is called on
it. It will not be automatically shown when the parent is shown.
				</summary>
			</function>
			<function line="170" name="hide_sys">
				<summary>function UIElement:hide_sys()

				</summary>
			</function>
			<function line="174" name="show">
				<summary>function UIElement:show()
Shows the widget and its child widgets.
				</summary>
			</function>
			<function line="180" name="show_recursive">
				<summary>function UIElement:show_recursive()
Makes the widget visible in the isVisible() meaning of the word.
It is only called for toplevels or widgets with visible parents.
				</summary>
			</function>
			<function line="197" name="show_sys">
				<summary>function UIElement:show_sys()

				</summary>
			</function>
			<function line="200" name="show_helper">
				<summary>function UIElement:show_helper()

				</summary>
			</function>
			<function line="224" name="createRecursively">
				<summary>function UIElement:createRecursively()

				</summary>
			</function>
			<function line="236" name="create">
				<summary>function UIElement:create(window, initializeWindow, destroyOldWindow)

   @param window: native window object
				</summary>
				<parameter name="window">native window object
				</parameter>
				<parameter name="initializeWindow"/>
				<parameter name="destroyOldWindow"/>
			</function>
			<function line="244" name="create_sys">
				<summary>function UIElement:create_sys()

				</summary>
			</function>
			<function line="247" name="aboutToDestroy">
				<summary>function UIElement:aboutToDestroy()

				</summary>
			</function>
			<function line="250" name="deactivateWidgetCleanup">
				<summary>function UIElement:deactivateWidgetCleanup()

				</summary>
			</function>
			<function line="261" name="destroy">
				<summary>function UIElement:destroy(destroyWindow)
TODO: not tested
				</summary>
				<parameter name="destroyWindow"/>
			</function>
			<function line="284" name="isCreated">
				<summary>function UIElement:isCreated()

				</summary>
			</function>
			<function line="288" name="setVisible">
				<summary>function UIElement:setVisible(visible)

				</summary>
				<parameter name="visible"/>
			</function>
			<function line="351" name="focusNextPrevChild">
				<summary>function UIElement:focusNextPrevChild(bNext)
TODO:
				</summary>
				<parameter name="bNext"/>
			</function>
			<function line="357" name="event">
				<summary>function UIElement:event(event)
called whenever an event comes. Subclass can overwrite this function.
   @param handlerName: "sizeEvent", "paintEvent", "mouseDownEvent", "mouseUpEvent", etc.
   @param event: the event object. 
				</summary>
				<parameter name="event">the event object. 
				</parameter>
			</function>
			<function line="375" name="sizeEvent">
				<summary>function UIElement:sizeEvent(event)
The resize event is called whenever the window is resized in the windowing system,
either directly through the windowing system acknowledging a setGeometry() or resize() request,
or indirectly through the user resizing the window manually.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="379" name="logEvent">
				<summary>function UIElement:logEvent(event)
just for printing log. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="384" name="repaint">
				<summary>function UIElement:repaint()
force repaint in the next frame.
				</summary>
			</function>
			<function line="394" name="update">
				<summary>function UIElement:update()
Updates the widget unless updates are disabled or the widget is hidden.
This function does not cause an immediate repaint; instead it schedules a paint event for processing 
when system returns to the main event loop. This permits us to optimize for more speed and less 
flicker than a call to repaint() does. Calling update() several times normally results in just one paintEvent() call.
				</summary>
			</function>
			<function line="407" name="isActiveWindow">
				<summary>function UIElement:isActiveWindow()

				</summary>
			</function>
			<function line="411" name="focusPolicy">
				<summary>function UIElement:focusPolicy()

				</summary>
			</function>
			<function line="415" name="setFocusPolicy">
				<summary>function UIElement:setFocusPolicy(policy)

				</summary>
				<parameter name="policy"/>
			</function>
			<function line="425" name="focusWidget">
				<summary>function UIElement:focusWidget()
Returns the last child of this widget that setFocus had been
called on.  For top level widgets this is the widget that will get
focus in case this window gets activated
				</summary>
			</function>
			<function line="429" name="setFocus_sys">
				<summary>function UIElement:setFocus_sys()

				</summary>
			</function>
			<function line="437" name="hasFocus">
				<summary>function UIElement:hasFocus()
whether this widget has the keyboard input focus
By default, this property is false.
				</summary>
			</function>
			<function line="443" name="setFocus">
				<summary>function UIElement:setFocus(reason)
set key focus to the UIElement.
   @param reason: nil
				</summary>
				<parameter name="reason">nil
				</parameter>
			</function>
			<function line="460" name="updateFocusChild">
				<summary>function UIElement:updateFocusChild()
updates focus_child on parent widgets to point into this widget
				</summary>
			</function>
			<function line="483" name="clearFocus">
				<summary>function UIElement:clearFocus()

				</summary>
			</function>
			<function line="495" name="Update">
				<summary>function UIElement:Update()
Updates the widget unless updates are disabled or the widget is hidden.
This function does not cause an immediate repaint; instead it schedules a paint in the next frame.
				</summary>
			</function>
			<function line="502" name="GetStyle">
				<summary>function UIElement:GetStyle()
get the style object
				</summary>
			</function>
			<function line="508" name="updatesEnabled">
				<summary>function UIElement:updatesEnabled()
we can temporarily disable updates for complex UI element and render them at lower frame rate. 
				</summary>
			</function>
			<function line="513" name="Render">
				<summary>function UIElement:Render(painterContext)
render the widget and all its child objects to the current device context. 
				</summary>
				<parameter name="painterContext"/>
			</function>
			<function line="525" name="prepareToRender">
				<summary>function UIElement:prepareToRender()

				</summary>
			</function>
			<function line="534" name="drawWidget">
				<summary>function UIElement:drawWidget(painterContext, offset)
draw with offset and its child recursively
   @param offset: Point of offset. 
				</summary>
				<parameter name="painterContext"/>
				<parameter name="offset">Point of offset. 
				</parameter>
			</function>
			<function line="567" name="paintEvent">
				<summary>function UIElement:paintEvent(painter)
virtual: render everything here
   @param painter: painterContext
				</summary>
				<parameter name="painter">painterContext
				</parameter>
			</function>
			<function line="573" name="setMouseTracking">
				<summary>function UIElement:setMouseTracking(enable)

				</summary>
				<parameter name="enable"/>
			</function>
			<function line="577" name="hasMouseTracking">
				<summary>function UIElement:hasMouseTracking()

				</summary>
			</function>
			<function line="582" name="mousePressEvent">
				<summary>function UIElement:mousePressEvent(mouse_event)
virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="591" name="mouseMoveEvent">
				<summary>function UIElement:mouseMoveEvent(mouse_event)
virtual: 
If mouse tracking is switched off, mouse move events only occur if
a mouse button is pressed while the mouse is being moved. If mouse
tracking is switched on, mouse move events occur even if no mouse button is pressed.
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="595" name="mouseReleaseEvent">
				<summary>function UIElement:mouseReleaseEvent(mouse_event)
virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="598" name="mouseWheelEvent">
				<summary>function UIElement:mouseWheelEvent(mouse_event)
virtual: 
virtual: 
				</summary>
				<parameter name="mouse_event"/>
			</function>
			<function line="601" name="keyPressEvent">
				<summary>function UIElement:keyPressEvent(key_event)
virtual: 
virtual: 
virtual: 
				</summary>
				<parameter name="key_event"/>
			</function>
			<function line="604" name="keyReleaseEvent">
				<summary>function UIElement:keyReleaseEvent(key_event)
virtual: 
virtual: 
virtual: 
virtual: 
				</summary>
				<parameter name="key_event"/>
			</function>
			<function line="608" name="mouseEnterEvent">
				<summary>function UIElement:mouseEnterEvent(event)
virtual: An event is sent to the widget when the mouse cursor enters the widget.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="612" name="mouseLeaveEvent">
				<summary>function UIElement:mouseLeaveEvent(event)
virtual: A leave event is sent to the widget when the mouse cursor leaves the widget.
				</summary>
				<parameter name="event"/>
			</function>
			<function line="616" name="focusInEvent">
				<summary>function UIElement:focusInEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="620" name="focusOutEvent">
				<summary>function UIElement:focusOutEvent(event)
virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="625" name="childAt">
				<summary>function UIElement:childAt(point)

   @param p: 
Returns the visible child object at the position x, y in the local coordinate system, or nil if no visible child.
				</summary>
				<parameter name="point"/>
			</function>
			<function line="629" name="childAt_helper">
				<summary>function UIElement:childAt_helper(point)

				</summary>
				<parameter name="point"/>
			</function>
			<function line="639" name="childAtRecursiveHelper">
				<summary>function UIElement:childAtRecursiveHelper(p)
private:
   @param p: point in local coordinate system. 
				</summary>
				<parameter name="p">point in local coordinate system. 
				</parameter>
			</function>
			<function line="662" name="pointInsideRectAndMask">
				<summary>function UIElement:pointInsideRectAndMask(p)

				</summary>
				<parameter name="p"/>
			</function>
			<function line="667" name="setAttribute">
				<summary>function UIElement:setAttribute(name, bEnabled)

   @param bEnabled: if nil, it is true.
				</summary>
				<parameter name="name"/>
				<parameter name="bEnabled">if nil, it is true.
				</parameter>
			</function>
			<function line="676" name="testAttribute">
				<summary>function UIElement:testAttribute(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="681" name="setGeometry">
				<summary>function UIElement:setGeometry(ax, ay, aw, ah)
set the rect
				</summary>
				<parameter name="ax"/>
				<parameter name="ay"/>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="693" name="move">
				<summary>function UIElement:move(x, y)
move to a given position
if the widget is a window, the position is that of the widget on the desktop
Calling move() or setGeometry() inside moveEvent() can lead to infinite recursion
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="707" name="resize">
				<summary>function UIElement:resize(aw, ah)
set size
				</summary>
				<parameter name="aw"/>
				<parameter name="ah"/>
			</function>
			<function line="716" name="rect">
				<summary>function UIElement:rect()
client rect. left, top is always 0,0.
   @note: the returned rect is temporary, do not keep for long. 
				</summary>
			</function>
			<function line="721" name="pos">
				<summary>function UIElement:pos()
return left top point
				</summary>
			</function>
			<function line="726" name="geometry">
				<summary>function UIElement:geometry()
left, top is relative to its parent. 
				</summary>
			</function>
			<function line="730" name="width">
				<summary>function UIElement:width()

				</summary>
			</function>
			<function line="734" name="height">
				<summary>function UIElement:height()

				</summary>
			</function>
			<function line="739" name="x">
				<summary>function UIElement:x()
the x coordinate relative to its parent
				</summary>
			</function>
			<function line="744" name="y">
				<summary>function UIElement:y()
the y coordinate relative to its parent
				</summary>
			</function>
			<function line="749" name="setX">
				<summary>function UIElement:setX(x)

				</summary>
				<parameter name="x"/>
			</function>
			<function line="753" name="setY">
				<summary>function UIElement:setY(y)

				</summary>
				<parameter name="y"/>
			</function>
			<function line="758" name="IsMouseCaptured">
				<summary>function UIElement:IsMouseCaptured()
if the mouse is captured to this element or not.
				</summary>
			</function>
			<function line="763" name="CaptureMouse">
				<summary>function UIElement:CaptureMouse()
Captures the mouse to this element.
				</summary>
			</function>
			<function line="776" name="ReleaseMouseCapture">
				<summary>function UIElement:ReleaseMouseCapture()
Releases the mouse capture.
				</summary>
			</function>
			<function line="786" name="sendSizeEvents">
				<summary>function UIElement:sendSizeEvents()

				</summary>
			</function>
			<function line="799" name="sendPendingSizeEvents">
				<summary>function UIElement:sendPendingSizeEvents(recursive, disableUpdates)

				</summary>
				<parameter name="recursive"/>
				<parameter name="disableUpdates"/>
			</function>
			<function line="828" name="updateGeometry">
				<summary>function UIElement:updateGeometry()
Notifies the layout system that this widget has changed and may need to change geometry.
				</summary>
			</function>
			<function line="834" name="GetLayout">
				<summary>function UIElement:GetLayout()
Returns the layout manager that is installed on this widget, or nil if no layout manager is installed.
The layout manager sets the geometry of the widget's children that have been added to the layout.
				</summary>
			</function>
			<function line="840" name="SetLayout">
				<summary>function UIElement:SetLayout(layout)
Sets the layout manager for this widget to a layout.
An alternative to calling this function is to pass this widget to the layout's init function.
				</summary>
				<parameter name="layout"/>
			</function>
			<function line="847" name="updateGeometry_helper">
				<summary>function UIElement:updateGeometry_helper(forceUpdate)

				</summary>
				<parameter name="forceUpdate"/>
			</function>
			<function line="862" name="underMouse">
				<summary>function UIElement:underMouse()

				</summary>
			</function>
			<function line="869" name="mapToGlobal">
				<summary>function UIElement:mapToGlobal(pos)
convert to global position
   @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="886" name="mapFromGlobal">
				<summary>function UIElement:mapFromGlobal(pos)
convert from global to local pos.
   @return the returned Point is temporary, do not hold it for long
				</summary>
				<parameter name="pos"/>
				<returns>return returned Point is temporary, do not hold it for long
				</returns>
			</function>
			<function line="903" name="mapToParent">
				<summary>function UIElement:mapToParent(pos)
Translates the widget coordinate \a pos to a coordinate in the parent widget.
Same as mapToGlobal() if the widget has no parent.
				</summary>
				<parameter name="pos"/>
			</function>
			<function line="911" name="mapFromParent">
				<summary>function UIElement:mapFromParent(pos)
Translates the parent widget coordinate \a pos to widget coordinates.
Same as mapFromGlobal() if the widget has no parent.
				</summary>
				<parameter name="pos"/>
			</function>
			<function line="919" name="mapTo">
				<summary>function UIElement:mapTo(parent, pos) 
Translates the widget coordinate \a pos to the coordinate system
of \a parent. The \a parent must not be nil and must be a parent of the calling widget.
				</summary>
				<parameter name="parent"/>
				<parameter name="pos"/>
			</function>
			<function line="934" name="mapFrom">
				<summary>function UIElement:mapFrom(parent, pos) 
Translates the widget coordinate \a pos from the coordinate system
of \a parent to this widget's coordinate system. The \a parent
must not be nil and must be a parent of the calling widget.
				</summary>
				<parameter name="parent"/>
				<parameter name="pos"/>
			</function>
			<function line="946" name="topLevelWidget">
				<summary>function UIElement:topLevelWidget()

				</summary>
			</function>
			<function line="950" name="LoadComponent">
				<summary>function UIElement:LoadComponent(url)

				</summary>
				<parameter name="url"/>
			</function>
			<function line="954" name="setMouseTracking">
				<summary>function UIElement:setMouseTracking(enable)

				</summary>
				<parameter name="enable"/>
			</function>
			<function line="958" name="hasMouseTracking">
				<summary>function UIElement:hasMouseTracking()

				</summary>
			</function>
			<function line="962" name="GetTooltip">
				<summary>function UIElement:GetTooltip()

				</summary>
			</function>
			<function line="969" name="SetTooltip">
				<summary>function UIElement:SetTooltip(tooltip)
If you want to control a tooltip's behavior, you can intercept the
event() function and catch the Event::ToolTip event (e.g., if you
want to customize the area for which the tooltip should be shown).
				</summary>
				<parameter name="tooltip"/>
			</function>
			<function line="973" name="toolTipEvent">
				<summary>function UIElement:toolTipEvent(event)

				</summary>
				<parameter name="event"/>
			</function>
		</table>
		<table name="Keyboard" src="script/ide/System/Windows/Keyboard.lua">
			<function line="17" name="ctor">
				<summary>function Keyboard:ctor()

				</summary>
			</function>
			<function line="20" name="IsAltKeyPressed">
				<summary>function Keyboard:IsAltKeyPressed()

				</summary>
			</function>
			<function line="24" name="IsCtrlKeyPressed">
				<summary>function Keyboard:IsCtrlKeyPressed()

				</summary>
			</function>
			<function line="28" name="IsShiftKeyPressed">
				<summary>function Keyboard:IsShiftKeyPressed()

				</summary>
			</function>
		</table>
		<table name="Mouse" src="script/ide/System/Windows/Mouse.lua">
			<function line="21" name="ctor">
				<summary>function Mouse:ctor()

				</summary>
			</function>
			<function line="25" name="GetCapture">
				<summary>function Mouse:GetCapture()
Gets the element that has captured the mouse. 
				</summary>
			</function>
			<function line="32" name="Capture">
				<summary>function Mouse:Capture(element)
When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.
To release mouse capture, call Capture passing nil as the element to capture.
   @param element: if nil, it means release mouse capture. 
				</summary>
				<parameter name="element">if nil, it means release mouse capture. 
				</parameter>
			</function>
			<function line="37" name="LeftButton">
				<summary>function Mouse:LeftButton()
Gets the state of the left button of the mouse. true if pressed. 
				</summary>
			</function>
			<function line="42" name="RightButton">
				<summary>function Mouse:RightButton()
Gets the state of the right button of the mouse. true if pressed. 
				</summary>
			</function>
			<function line="47" name="DirectlyOver">
				<summary>function Mouse:DirectlyOver()
Gets the element the mouse pointer is directly over.
				</summary>
			</function>
			<function line="52" name="pos">
				<summary>function Mouse:pos()
get Point object. 
				</summary>
			</function>
			<function line="58" name="GetMousePosition">
				<summary>function Mouse:GetMousePosition()
return x, y in GUI screen coordinate
				</summary>
			</function>
		</table>
		<table name="BufferPicking" src="script/ide/System/Scene/BufferPicking.lua">
			<function line="25" name="ctor">
				<summary>function BufferPicking:ctor()

				</summary>
			</function>
			<function line="29" name="CreatePickingBuffer_sys">
				<summary>function BufferPicking:CreatePickingBuffer_sys()

				</summary>
			</function>
			<function line="39" name="Pick">
				<summary>function BufferPicking:Pick(x, y, width, height, nViewportId)
pick by a point in the viewport. 
Tip: to pick a thin line, one may consider picking by a small rect region.
   @param x, y: if nil, it is the current mouse position.
   @param width, height: if nil, 1,1
   @param nViewportId: viewport index, if -1 it means the current viewport.
   @return array of picking result. if nil means nothing is picked.
				</summary>
				<parameter name="x">, y: if nil, it is the current mouse position.
				</parameter>
				<parameter name="y"/>
				<parameter name="width">, height: if nil, 1,1
				</parameter>
				<parameter name="height"/>
				<parameter name="nViewportId">viewport index, if -1 it means the current viewport.
				</parameter>
				<returns>return of picking result. if nil means nothing is picked.
				</returns>
			</function>
			<function line="55" name="GetPickingResult">
				<summary>function BufferPicking:GetPickingResult()
return an array of unique picking id in the last pick call. it may return nil if nothing is picked
				</summary>
			</function>
			<function line="67" name="GetPickingCount">
				<summary>function BufferPicking:GetPickingCount()
return the number of objects picked. 
				</summary>
			</function>
			<function line="73" name="GetPickingID">
				<summary>function BufferPicking:GetPickingID(nIndex)
get the picked item id of the given picking item. if no data at the index return 0.
   @param nIndex: if -1, it will use m_currentPickIndex;
				</summary>
				<parameter name="nIndex">if -1, it will use m_currentPickIndex;
				</parameter>
			</function>
			<function line="81" name="ClearPickingResult">
				<summary>function BufferPicking:ClearPickingResult()
clear last picking result 
				</summary>
			</function>
			<function line="85" name="SetPickLeftTop">
				<summary>function BufferPicking:SetPickLeftTop(x, y)

				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
			</function>
			<function line="90" name="GetPickLeftTop">
				<summary>function BufferPicking:GetPickLeftTop()

				</summary>
			</function>
			<function line="95" name="SetPickWidthHeight">
				<summary>function BufferPicking:SetPickWidthHeight(w,h)

				</summary>
				<parameter name="w"/>
				<parameter name="h"/>
			</function>
			<function line="100" name="GetPickWidthHeight">
				<summary>function BufferPicking:GetPickWidthHeight()

				</summary>
			</function>
			<function line="105" name="GetPickIndex">
				<summary>function BufferPicking:GetPickIndex()

				</summary>
			</function>
			<function line="108" name="SetPickIndex">
				<summary>function BufferPicking:SetPickIndex(nIndex)

				</summary>
				<parameter name="nIndex"/>
			</function>
			<function line="114" name="IsResultDirty">
				<summary>function BufferPicking:IsResultDirty()

				</summary>
			</function>
			<function line="118" name="SetResultDirty">
				<summary>function BufferPicking:SetResultDirty(bDirty)

				</summary>
				<parameter name="bDirty"/>
			</function>
			<function line="123" name="GetViewport">
				<summary>function BufferPicking:GetViewport()
in which viewport to pick. default to -1, which is the default one. 
				</summary>
			</function>
			<function line="128" name="SetViewport">
				<summary>function BufferPicking:SetViewport(nViewportIndex)
in which viewport to pick. if -1, it is the default one. 
				</summary>
				<parameter name="nViewportIndex"/>
			</function>
		</table>
		<table name="OverlayPicking" src="script/ide/System/Scene/Overlays/OverlayPicking.lua">
			<function line="25" name="ctor">
				<summary>function OverlayPicking:ctor()

				</summary>
			</function>
			<function line="29" name="CreatePickingBuffer_sys">
				<summary>function OverlayPicking:CreatePickingBuffer_sys()

				</summary>
			</function>
			<function line="33" name="ResetPickingName">
				<summary>function OverlayPicking:ResetPickingName()

				</summary>
			</function>
			<function line="37" name="GetPickingCount">
				<summary>function OverlayPicking:GetPickingCount()

				</summary>
			</function>
			<function line="43" name="GetPickingResult">
				<summary>function OverlayPicking:GetPickingResult()

				</summary>
			</function>
			<function line="59" name="GetNextPickingName">
				<summary>function OverlayPicking:GetNextPickingName()
find next color int value that should be used for the picking color for next unique pickable item.
				</summary>
			</function>
			<function line="65" name="GetActivePickingName">
				<summary>function OverlayPicking:GetActivePickingName()
picking name from the last picking result.
				</summary>
			</function>
			<function line="71" name="SetActivePickingName">
				<summary>function OverlayPicking:SetActivePickingName(name)
usually called automatically. remove the alpha channel.
set the name of last picking result.
				</summary>
				<parameter name="name"/>
			</function>
		</table>
		<table name="ShapesDrawer" src="script/ide/System/Scene/Overlays/ShapesDrawer.lua">
			<function line="41" name="DrawCube">
				<summary>function ShapesDrawer.DrawCube(painter, x,y,z, radius, bFakeCube)
8 triangles
12 triangles
draw a cube by specifying its center and radius(half length)
   @param bFakeCube: if true (default), we will emulate a cube by drawing only 8 triangles, instead of 12. when no shading
				</summary>
				<parameter name="painter"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="radius"/>
				<parameter name="bFakeCube">if true (default), we will emulate a cube by drawing only 8 triangles, instead of 12. when no shading
				</parameter>
			</function>
			<function line="57" name="DrawLine">
				<summary>function ShapesDrawer.DrawLine(painter, from_x,from_y,from_z, to_x, to_y, to_z)
draw a line
				</summary>
				<parameter name="painter"/>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="86" name="DrawCircle">
				<summary>function ShapesDrawer.DrawCircle(painter, cx,cy,cz, radius, axis, bFill, segment, fromAngle, toAngle, center_offset)
draw a circle perpendicular to a specified axis with center and radius
   @param axis: "x", "y", "z". perpendicular to which axis
   @param bFill: if true (default to nil), we will fill the circle with current brush
   @param segment: if nil, we will automatically determine segment by radius.
   @param fromAngle: default to 0;
   @param toAngle: default to 2*math.pi;
   @param center_offset: default to 0.
				</summary>
				<parameter name="painter"/>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="radius"/>
				<parameter name="axis">"x", "y", "z". perpendicular to which axis
				</parameter>
				<parameter name="bFill">if true (default to nil), we will fill the circle with current brush
				</parameter>
				<parameter name="segment">if nil, we will automatically determine segment by radius.
				</parameter>
				<parameter name="fromAngle">default to 0;
				</parameter>
				<parameter name="toAngle">default to 2*math.pi;
				</parameter>
				<parameter name="center_offset">default to 0.
				</parameter>
			</function>
			<function line="136" name="DrawArrowHead">
				<summary>function ShapesDrawer.DrawArrowHead(painter, cx,cy,cz, axis, radius, length, segment)
draw arrow head 
				</summary>
				<parameter name="painter"/>
				<parameter name="cx"/>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="axis"/>
				<parameter name="radius"/>
				<parameter name="length"/>
				<parameter name="segment"/>
			</function>
		</table>
		<table name="AutoCamera" src="script/ide/System/Scene/Cameras/AutoCamera.lua">
			<function line="20" name="ctor">
				<summary>function AutoCamera:ctor()

				</summary>
			</function>
			<function line="23" name="GetViewProjMatrix">
				<summary>function AutoCamera:GetViewProjMatrix()

				</summary>
			</function>
			<function line="27" name="GetViewMatrix">
				<summary>function AutoCamera:GetViewMatrix()

				</summary>
			</function>
			<function line="31" name="GetProjMatrix">
				<summary>function AutoCamera:GetProjMatrix()

				</summary>
			</function>
		</table>
		<table name="Cameras" src="script/ide/System/Scene/Cameras/Cameras.lua">
			<function line="19" name="GetCurrent">
				<summary>function Cameras:GetCurrent()
default to autocamera if no camera is set. 
				</summary>
			</function>
			<function line="23" name="SetCurrent">
				<summary>function Cameras:SetCurrent(cam)

				</summary>
				<parameter name="cam"/>
			</function>
		</table>
		<table name="mem_cache" src="script/apps/WebServer/mem_cache.lua">
			<function line="25" name="ctor">
				<summary>function mem_cache:ctor()

				</summary>
			</function>
			<function line="34" name="get">
				<summary>function mem_cache:get(name, group, force)
Retrieves the cache contents from the cache by key and group.
   @param key: What the contents in the cache are called
   @param group: Where the cache contents are grouped
   @param force: boolean Whether to force an update of the local cache from the persistent cache -- (default is false)
   @return value: value stored in cache. nil if not found;
				</summary>
				<parameter name="name"/>
				<parameter name="group">Where the cache contents are grouped
				</parameter>
				<parameter name="force">boolean Whether to force an update of the local cache from the persistent cache -- (default is false)
				</parameter>
				<returns>return value stored in cache. nil if not found;
				</returns>
			</function>
			<function line="45" name="set">
				<summary>function mem_cache:set( key, data, group, expire)
Saves the data to the cache.
   @return true on success
				</summary>
				<parameter name="key"/>
				<parameter name="data"/>
				<parameter name="group"/>
				<parameter name="expire"/>
				<returns>return on success
				</returns>
			</function>
			<function line="57" name="add">
				<summary>function mem_cache:add( key, data, group, expire)
Adds data to the cache, if the cache key doesn't already exist.
   @param key: The cache key to use for retrieval later
   @param data:  The data to add to the cache store
   @param group: The group to add the cache to. default to ""
   @param expire: When the cache data should be expired
   @return bool False if cache key and group already exist, true on success
				</summary>
				<parameter name="key">The cache key to use for retrieval later
				</parameter>
				<parameter name="data">The data to add to the cache store
				</parameter>
				<parameter name="group">The group to add the cache to. default to ""
				</parameter>
				<parameter name="expire">When the cache data should be expired
				</parameter>
				<returns>return False if cache key and group already exist, true on success
				</returns>
			</function>
			<function line="69" name="replace">
				<summary>function mem_cache:replace( key, data, group, expire)
Replaces the contents of the cache with new data.
   @return bool False if not exists, true if contents were replaced
				</summary>
				<parameter name="key"/>
				<parameter name="data"/>
				<parameter name="group"/>
				<parameter name="expire"/>
				<returns>return False if not exists, true if contents were replaced
				</returns>
			</function>
			<function line="82" name="GetInstance">
				<summary>function mem_cache:GetInstance()
static public function. 
get global singleton
				</summary>
			</function>
			<function line="91" name="getgroup">
				<summary>function mem_cache:getgroup(group)

				</summary>
				<parameter name="group"/>
			</function>
		</table>
		<table name="minetypes" src="script/apps/WebServer/minetypes.lua">
			<function line="26" name="guess_type">
				<summary>function minetypes:guess_type(path, bStrict)
gets the mimetype from the filename's extension
   @param path: filepath 
				</summary>
				<parameter name="path">filepath 
				</parameter>
				<parameter name="bStrict"/>
			</function>
		</table>
		<table name="common_handlers" src="script/apps/WebServer/npl_common_handlers.lua">
			<function line="17" name="err_404">
				<summary>function common_handlers.err_404 (req, res)

				</summary>
				<parameter name="req"/>
				<parameter name="res"/>
			</function>
			<function line="31" name="err_403">
				<summary>function common_handlers.err_403 (req, res)

				</summary>
				<parameter name="req"/>
				<parameter name="res"/>
			</function>
			<function line="45" name="err_405">
				<summary>function common_handlers.err_405 (req, res)

				</summary>
				<parameter name="req"/>
				<parameter name="res"/>
			</function>
			<function line="78" name="patternhandler">
				<summary>function common_handlers.patternhandler(conf)

				</summary>
				<parameter name="conf"/>
			</function>
			<function line="91" name="vhostshandler">
				<summary>function common_handlers.vhostshandler(vhosts)
---------------------------------------------------------------------------
virtual hosts handler
---------------------------------------------------------------------------
				</summary>
				<parameter name="vhosts"/>
			</function>
			<function line="235" name="GetValidNPLFileName">
				<summary>function common_handlers.GetValidNPLFileName(docroot, relpath)
it will automatically add .lua extension.
   @param relpath: like "/helloworld.lua"
   @return nil if not found. 
				</summary>
				<parameter name="docroot"/>
				<parameter name="relpath">like "/helloworld.lua"
				</parameter>
				<returns>return if not found. 
				</returns>
			</function>
			<function line="251" name="GetValidFileName">
				<summary>function common_handlers.GetValidFileName(docroot, relpath)
it will automatically add .lua extension.
   @param relpath: like "/helloworld.lua"
   @return nil if not found. 
				</summary>
				<parameter name="docroot"/>
				<parameter name="relpath">like "/helloworld.lua"
				</parameter>
				<returns>return if not found. 
				</returns>
			</function>
		</table>
		<table name="WebServer" src="script/apps/WebServer/npl_common_handlers.lua">
			<function line="166" name="urlhandler">
				<summary>function WebServer.urlhandler (conf)

				</summary>
				<parameter name="conf"/>
			</function>
			<function line="222" name="redirecthandler.makeHandler">
				<summary>function WebServer.redirecthandler.makeHandler (params)

				</summary>
				<parameter name="params"/>
			</function>
			<function line="274" name="makeGenericHandler">
				<summary>function WebServer.makeGenericHandler(docroot, params, extra_vars)
Makes a generic WSAPI handler, that launches WSAPI application scripts
   @param docroot: where filename is located.
   @param params: additional params. usually nil.
				</summary>
				<parameter name="docroot">where filename is located.
				</parameter>
				<parameter name="params">additional params. usually nil.
				</parameter>
				<parameter name="extra_vars"/>
			</function>
			<function line="278" name="filehandler" src="script/apps/WebServer/npl_file_handler.lua">
				<summary>function WebServer.filehandler(baseDir)
public: file handler maker. it returns a handler that serves files in the baseDir dir
   @param baseDir: the directory from which to serve files. "%world%" is current world directory
   @return the actual handler function(request, response) end
				</summary>
				<parameter name="baseDir">the directory from which to serve files. "%world%" is current world directory
				</parameter>
				<returns>return actual handler function(request, response) end
				</returns>
			</function>
			<function line="76" name="npl_page_handler" src="script/apps/WebServer/npl_page_handler.lua">
				<summary>function WebServer.npl_page_handler(params)
public: file handler maker. it returns a handler that serves files in the baseDir dir
   @param params: string or {docroot, }the directory from which to serve files. 
				</summary>
				<parameter name="params">string or {docroot, }the directory from which to serve files. 
				</parameter>
			</function>
			<function line="21" name="npl_script_handler" src="script/apps/WebServer/npl_script_handler.lua">
				<summary>function WebServer.npl_script_handler(params)
public: file handler maker. it returns a handler that serves files in the baseDir dir
   @param params: string or {docroot, }the directory from which to serve files. 
				</summary>
				<parameter name="params">string or {docroot, }the directory from which to serve files. 
				</parameter>
			</function>
			<function line="52" name="webdir" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:webdir()
get web root directory without trailing /
				</summary>
			</function>
			<function line="57" name="setwebdir" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:setwebdir(dir)
set web root directory. usually same as the configuration file's parent directory
				</summary>
				<parameter name="dir"/>
			</function>
			<function line="102" name="LoadConfig" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:LoadConfig(filename)
Register the server configuration
&lt;verbatim&gt;--
   @param config: {server={host="*", port=80}, defaultHost={rules={}, virtualhosts={hostname=host, }}}

-- Define here where Web HTTP documents scripts are located
local webDir = "./"

local simplerules = {

    { -- URI remapping example
      match = "^[^%./]*/$",
      with = WebServer.redirecthandler,
      params = {"index.lp"}
    }, 

    { -- cgiluahandler example
      match = {"%.lp$", "%.lp/.*$", "%.lua$", "%.lua/.*$" },
      with = WebServer.cgiluahandler.makeHandler (webDir)
    },
    
    { -- filehandler example
      match = ".",
      with = WebServer.filehandler,
      params = {baseDir = webDir}
    },
} 

WebServer:LoadConfig({
    server = {host = "*", port = 8080},
    
    defaultHost = {
    	rules = simplerules
    },

	virtualhosts = {
        ["www.sitename.com"] = simplerules
    }
}&lt;/verbatim&gt;);
load config from a given file.
   @param filename: if nil, it will be "config/WebServer.config.xml". it can also be config table.
				</summary>
				<parameter name="filename">if nil, it will be "config/WebServer.config.xml". it can also be config table.
				</parameter>
			</function>
			<function line="245" name="GetServerConfig" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:GetServerConfig()

				</summary>
			</function>
			<function line="250" name="StopServer" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:StopServer()
stop a server that is started by StartServer;
				</summary>
			</function>
			<function line="261" name="AddVirtualDirectory" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:AddVirtualDirectory(virtual_directory, directory)
add a global virtual directory, so that we can serve files inside that virtual directory as if file is there. 
this is a useful way when a application or mod wants to add their own pages to entire website. 
e.g.: WebServer:AddVirtualFile("/paracraft", "script/apps/Aries/Creator/Game/Website/");
   @param virtual_directory: virtual directory as requested from the url.
   @param directory: the actual filename. 
				</summary>
				<parameter name="virtual_directory">virtual directory as requested from the url.
				</parameter>
				<parameter name="directory">the actual filename. 
				</parameter>
			</function>
			<function line="265" name="GetVirtualDirectory" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:GetVirtualDirectory(virtual_directory)

				</summary>
				<parameter name="virtual_directory"/>
			</function>
			<function line="274" name="GetServer" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:GetServer(server_type)
get low-level server implementation.
   @param server_type: "httpd" or "npl_http". default to "npl_http"
"httpd" use socket.dll
"npl_http" use default npl network layer (recommended)
				</summary>
				<parameter name="server_type">"httpd" or "npl_http". default to "npl_http"
"httpd" use socket.dll
"npl_http" use default npl network layer (recommended)
				</parameter>
			</function>
			<function line="286" name="site_url" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:site_url(path, scheme)

   @param path: additional path used.
   @return something like "http://localhost:8080/"  it will return nil if server is not started yet.
				</summary>
				<parameter name="path">additional path used.
				</parameter>
				<parameter name="scheme"/>
				<returns>return like "http://localhost:8080/"  it will return nil if server is not started yet.
				</returns>
			</function>
			<function line="315" name="StartDeprecatedHttpd" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:StartDeprecatedHttpd(filename, bIsAsync)

   @Deprecated: this will use the old httpd server (requires socket.dll)
use Start() instead.
start the web server based on configuration file
this function does not return until the web server exit. use StartServerAsync for async calls.
   @param filename: if nil, it will be "config/WebServer.config.xml"
				</summary>
				<parameter name="filename">if nil, it will be "config/WebServer.config.xml"
				</parameter>
				<parameter name="bIsAsync"/>
			</function>
			<function line="324" name="IsStarted" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:IsStarted()
check if already started
				</summary>
			</function>
			<function line="334" name="Start" src="script/apps/WebServer/WebServer.lua">
				<summary>function WebServer:Start(root_dir, ip, port)
start npl web server in the given folder.
   @param root_dir: root directory or the path to the server configuration file.
   @param ip: nil to use config file setting in the directory. nil or "0.0.0.0" to listen to all ip. "" or "localhost" or "127.0.0.1" to listen to loopback.
   @param port: nil to use config file setting.
   @param root_dir: document root directory. default to "script/apps/WebServer/test"
it will automatically search a file called "webserver.config.xml" at the document root if available. 
				</summary>
				<parameter name="root_dir">document root directory. default to "script/apps/WebServer/test"
it will automatically search a file called "webserver.config.xml" at the document root if available. 
				</parameter>
				<parameter name="ip">nil to use config file setting in the directory. nil or "0.0.0.0" to listen to all ip. "" or "localhost" or "127.0.0.1" to listen to loopback.
				</parameter>
				<parameter name="port">nil to use config file setting.
				</parameter>
			</function>
		</table>
		<table name="npl_http" src="script/apps/WebServer/npl_http.lua">
			<function line="26" name="LoadBuildinHandlers">
				<summary>function npl_http.LoadBuildinHandlers()

				</summary>
			</function>
			<function line="34" name="LoadNPLRuntimeConfig">
				<summary>function npl_http.LoadNPLRuntimeConfig(config)

				</summary>
				<parameter name="config"/>
			</function>
			<function line="81" name="LoadGCConfig">
				<summary>function npl_http.LoadGCConfig(config)
Start a garbage collection timer, that does a full garbage collection of all worker threads every few seconds. 
				</summary>
				<parameter name="config"/>
			</function>
			<function line="87" name="GetCompressionThreshold">
				<summary>function npl_http.GetCompressionThreshold()

				</summary>
			</function>
			<function line="92" name="LoadConfig">
				<summary>function npl_http.LoadConfig(config)
set request handler according to configuration
				</summary>
				<parameter name="config"/>
			</function>
			<function line="125" name="SetCommonHeader">
				<summary>function npl_http.SetCommonHeader(h, v)
it will replace value
				</summary>
				<parameter name="h"/>
				<parameter name="v"/>
			</function>
			<function line="132" name="GetCommonHeaders">
				<summary>function npl_http.GetCommonHeaders()

				</summary>
			</function>
			<function line="139" name="start">
				<summary>function npl_http.start(config)
start server with config
do not call this directly, use WebServer.Start() to start your server. 
				</summary>
				<parameter name="config"/>
			</function>
			<function line="148" name="SetRequestHandler">
				<summary>function npl_http.SetRequestHandler(handler)
replace the default request handler
   @param handler: function(req, response) end, 
				</summary>
				<parameter name="handler">function(req, response) end, 
				</parameter>
			</function>
			<function line="152" name="handleRequest">
				<summary>function npl_http.handleRequest(req)

				</summary>
				<parameter name="req"/>
			</function>
		</table>
		<table name="npl_page_env" src="script/apps/WebServer/npl_page_env.lua">
			<function line="74" name="new">
				<summary>function npl_page_env:new(request, response)
expose: request, response, echo and print to npl script. 
				</summary>
				<parameter name="request"/>
				<parameter name="response"/>
			</function>
			<function line="109" name="print">
				<summary>function npl_page_env.print(...)
same as self.echo(string.format(...))
				</summary>
			</function>
			<function line="125" name="nplinfo">
				<summary>function npl_page_env.nplinfo()
similar to phpinfo()
output everything about the environment and the request including all request headers.
				</summary>
			</function>
			<function line="140" name="exit">
				<summary>function npl_page_env.exit(msg)
similar to php.exit()
Output a message and terminate the current script
   @param msg: output this message. usually nil. 
				</summary>
				<parameter name="msg">output this message. usually nil. 
				</parameter>
			</function>
			<function line="158" name="dirname">
				<summary>function npl_page_env.dirname(filename)
similar to php.dirname() however with the trailing /
get the directory name of the given file with the trailing /.
   @param filename: if nil, self.__FILE__ is used. 
				</summary>
				<parameter name="filename">if nil, self.__FILE__ is used. 
				</parameter>
			</function>
			<function line="201" name="getfilepath">
				<summary>function npl_page_env.getfilepath(filename)

   @param filename: file path, relative or absolute. 
begin with './', relative to current file
begin with '/', relative to web root directory
begin with '../../../', up several directory to current file
no "/" in filename, relative to current file
otherwise, filename is absolute path. 
				</summary>
				<parameter name="filename">file path, relative or absolute. 
begin with './', relative to current file
begin with '/', relative to web root directory
begin with '../../../', up several directory to current file
no "/" in filename, relative to current file
otherwise, filename is absolute path. 
				</parameter>
			</function>
			<function line="212" name="file_exists">
				<summary>function npl_page_env.file_exists(filename)
Checks whether a file exists
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="267" name="include">
				<summary>function npl_page_env.include(filename, bReload)
similar to php.include: http://php.net/manual/en/function.include.php
The include statement includes and evaluates the specified file and return its result if any.
the included file share the same global environment as the caller. Unlike php, if you include another file 
inside a function, upvalues are NOT shared due to the lexical scoping nature of lua. 
Please note that exit() call will fallthrough all nested include and terminate the request.
e.g.
include(dirname(__FILE__).."test_include.page");
include("test_include.page");  -- identical to above
   @param filename: if no parent directory is specified, we will assume it is from the containing file's parent directory. 
if filename begins with "/", it will append the web root directory.
   @param bReload: true to reload the file. default to nil. files will be loaded only once.
   @return: result of the included function. 
				</summary>
				<parameter name="filename">if no parent directory is specified, we will assume it is from the containing file's parent directory. 
if filename begins with "/", it will append the web root directory.
				</parameter>
				<parameter name="bReload">true to reload the file. default to nil. files will be loaded only once.
				</parameter>
				<returns>return result of the included function. 
				</returns>
			</function>
			<function line="280" name="include_once">
				<summary>function npl_page_env.include_once(filename)
same as include(), expect that this function only takes effect on first call for a given env.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="302" name="include_pagecode">
				<summary>function npl_page_env.include_pagecode(code, filename)
include a given page code.
   @param code: the actual code string to include.
   @param filename: nil to default to current file. only used for displaying error
				</summary>
				<parameter name="code">the actual code string to include.
				</parameter>
				<parameter name="filename">nil to default to current file. only used for displaying error
				</parameter>
			</function>
			<function line="312" name="site_url">
				<summary>function npl_page_env.site_url(filename, scheme)
return the site url like http://localhost:8080/
				</summary>
				<parameter name="filename"/>
				<parameter name="scheme"/>
			</function>
			<function line="321" name="site_config">
				<summary>function npl_page_env.site_config(name)

   @param name: if nil, the root config table is returned. 
				</summary>
				<parameter name="name">if nil, the root config table is returned. 
				</parameter>
			</function>
			<function line="334" name="addheader">
				<summary>function npl_page_env.addheader(name, value)
add header, only possible when header is not sent yet. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="344" name="setheader">
				<summary>function npl_page_env.setheader(name, value)
set header (replace previously set values), only possible when header is not sent yet. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="354" name="log">
				<summary>function npl_page_env.log(...)
simple log any object, same as echo. 
				</summary>
			</function>
			<function line="363" name="sanitize">
				<summary>function npl_page_env.sanitize(text)
Sanitizes all HTML tags
				</summary>
				<parameter name="text"/>
			</function>
			<function line="377" name="json_encode">
				<summary>function npl_page_env.json_encode(value, bUseEmptyArray)
Returns a string containing the JSON representation of value.
   @param bUseEmptyArray: by default, empty table is serialized to json as object {}. 
calling this function will be serialized to json as array []
				</summary>
				<parameter name="value"/>
				<parameter name="bUseEmptyArray">by default, empty table is serialized to json as object {}. 
calling this function will be serialized to json as array []
				</parameter>
			</function>
			<function line="386" name="json_decode">
				<summary>function npl_page_env.json_decode(value)
json decode
				</summary>
				<parameter name="value"/>
			</function>
			<function line="395" name="xml_encode">
				<summary>function npl_page_env.xml_encode(value)
Returns a string containing the Xml representation of value. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="410" name="get_file_text">
				<summary>function npl_page_env.get_file_text(filename)
get file text
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="431" name="yield">
				<summary>function npl_page_env.yield(bExitOnError)
yield control until all async jobs are completed
   @param bExitOnError: if true, this function will handle error
   @return err, msg: err is true if there is error. 
				</summary>
				<parameter name="bExitOnError">if true, this function will handle error
				</parameter>
				<returns>return , msg: err is true if there is error. 
				</returns>
			</function>
			<function line="459" name="gettable">
				<summary>function npl_page_env.gettable(tabNames)
similar to commonlib.gettable(tabNames) but in page scope.
   @param tabNames: table names like "models.users"
				</summary>
				<parameter name="tabNames">table names like "models.users"
				</parameter>
			</function>
			<function line="470" name="createtable">
				<summary>function npl_page_env.createtable(tabNames, init_params)
similar to commonlib.createtable(tabNames) but in page scope.
   @param tabNames: table names like "models.users"
				</summary>
				<parameter name="tabNames">table names like "models.users"
				</parameter>
				<parameter name="init_params"/>
			</function>
			<function line="476" name="inherit">
				<summary>function npl_page_env.inherit(baseClass, new_class, ctor)
same as commonlib.inherit()
				</summary>
				<parameter name="baseClass"/>
				<parameter name="new_class"/>
				<parameter name="ctor"/>
			</function>
		</table>
		<table name="env_imp" src="script/apps/WebServer/npl_page_env.lua">
			<function line="100" name="echo">
				<summary>function env_imp:echo(text)
handy function to output using current request context
   @param text: string or number or nil or boolean. 
				</summary>
				<parameter name="text">string or number or nil or boolean. 
				</parameter>
			</function>
			<function line="104" name="print">
				<summary>function env_imp:print(...)

				</summary>
			</function>
			<function line="114" name="nplinfo">
				<summary>function env_imp:nplinfo()

				</summary>
			</function>
			<function line="130" name="exit">
				<summary>function env_imp:exit(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="149" name="dirname">
				<summary>function env_imp:dirname(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="163" name="getfilepath">
				<summary>function env_imp:getfilepath(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="206" name="file_exists">
				<summary>function env_imp:file_exists(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="218" name="add_include_file">
				<summary>function env_imp:add_include_file(filename)
private: add file to be already included
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="231" name="has_include_file">
				<summary>function env_imp:has_include_file(filename)
private: return true if file is already included in the environment. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="235" name="include">
				<summary>function env_imp:include(filename, bReload)

				</summary>
				<parameter name="filename"/>
				<parameter name="bReload"/>
			</function>
			<function line="272" name="include_once">
				<summary>function env_imp:include_once(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="285" name="include_pagecode">
				<summary>function env_imp:include_pagecode(code, filename)

				</summary>
				<parameter name="code"/>
				<parameter name="filename"/>
			</function>
			<function line="307" name="site_url">
				<summary>function env_imp:site_url(filename, scheme)

				</summary>
				<parameter name="filename"/>
				<parameter name="scheme"/>
			</function>
			<function line="316" name="site_config">
				<summary>function env_imp:site_config(name)

				</summary>
				<parameter name="name"/>
			</function>
			<function line="329" name="addheader">
				<summary>function env_imp:addheader(name, value)

				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="339" name="setheader">
				<summary>function env_imp:setheader(name, value)

				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="349" name="log">
				<summary>function env_imp:log(...)

				</summary>
			</function>
			<function line="358" name="sanitize">
				<summary>function env_imp:sanitize(text)

				</summary>
				<parameter name="text"/>
			</function>
			<function line="370" name="json_encode">
				<summary>function env_imp:json_encode(value, bUseEmptyArray)

				</summary>
				<parameter name="value"/>
				<parameter name="bUseEmptyArray"/>
			</function>
			<function line="381" name="json_decode">
				<summary>function env_imp:json_decode(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="390" name="xml_encode">
				<summary>function env_imp:xml_encode(value)

				</summary>
				<parameter name="value"/>
			</function>
			<function line="399" name="get_file_text">
				<summary>function env_imp:get_file_text(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="415" name="yield">
				<summary>function env_imp:yield(bExitOnError)

				</summary>
				<parameter name="bExitOnError"/>
			</function>
			<function line="439" name="resume">
				<summary>function env_imp:resume(err, msg)
resume from where jobs are paused last.
   @param err: if there is error, this is true, otherwise it is nil.
   @param msg: error message in case err=true
				</summary>
				<parameter name="err">if there is error, this is true, otherwise it is nil.
				</parameter>
				<parameter name="msg">error message in case err=true
				</parameter>
			</function>
			<function line="453" name="gettable">
				<summary>function env_imp:gettable(tabNames)

				</summary>
				<parameter name="tabNames"/>
			</function>
			<function line="464" name="createtable">
				<summary>function env_imp:createtable(tabNames, init_params)

				</summary>
				<parameter name="tabNames"/>
				<parameter name="init_params"/>
			</function>
		</table>
		<table name="npl_page_manager" src="script/apps/WebServer/npl_page_manager.lua">
			<function line="26" name="ctor">
				<summary>function npl_page_manager:ctor()

				</summary>
			</function>
			<function line="32" name="get">
				<summary>function npl_page_manager:get(filename)
create get a given file
   @return page, bNewlyLoaded
				</summary>
				<parameter name="filename"/>
				<returns>return , bNewlyLoaded
				</returns>
			</function>
			<function line="48" name="get_by_code">
				<summary>function npl_page_manager:get_by_code(code, filename)
create get a given page code
   @param code: the actual code string to include.
   @param filename: nil to default to "__code". only used for displaying error
   @return page, bNewlyLoaded
				</summary>
				<parameter name="code">the actual code string to include.
				</parameter>
				<parameter name="filename">nil to default to "__code". only used for displaying error
				</parameter>
				<returns>return , bNewlyLoaded
				</returns>
			</function>
			<function line="66" name="clear">
				<summary>function npl_page_manager:clear()

				</summary>
			</function>
			<function line="71" name="refresh">
				<summary>function npl_page_manager:refresh(filename)
parse and compile again. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="88" name="GetRootDirectory">
				<summary>function npl_page_manager:GetRootDirectory(dir)

   @return rootdir or ""
				</summary>
				<parameter name="dir"/>
				<returns>return or ""
				</returns>
			</function>
			<function line="100" name="monitor_directory">
				<summary>function npl_page_manager:monitor_directory(dir)
monitor file change and call refresh() automatically 
				</summary>
				<parameter name="dir"/>
			</function>
		</table>
		<table name="npl_page_parser" src="script/apps/WebServer/npl_page_parser.lua">
			<function line="31" name="ctor">
				<summary>function npl_page_parser:ctor()

				</summary>
			</function>
			<function line="34" name="init">
				<summary>function npl_page_parser:init(page_manager)

				</summary>
				<parameter name="page_manager"/>
			</function>
			<function line="39" name="get_filename">
				<summary>function npl_page_parser:get_filename()

				</summary>
			</function>
			<function line="43" name="SetFilename">
				<summary>function npl_page_parser:SetFilename(filename)

				</summary>
				<parameter name="filename"/>
			</function>
			<function line="49" name="parse">
				<summary>function npl_page_parser:parse(filename)
return nil if failed or the page object 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="66" name="parse_text">
				<summary>function npl_page_parser:parse_text(text)

				</summary>
				<parameter name="text"/>
			</function>
			<function line="73" name="page_to_npl">
				<summary>function npl_page_parser:page_to_npl(text)
convert from mixed mode page text to npl script code text. 
return npl script as string.
				</summary>
				<parameter name="text"/>
			</function>
			<function line="125" name="compile_npl_script">
				<summary>function npl_page_parser:compile_npl_script(script)

				</summary>
				<parameter name="script"/>
			</function>
			<function line="132" name="has_error">
				<summary>function npl_page_parser:has_error()

				</summary>
			</function>
			<function line="136" name="get_error_msg">
				<summary>function npl_page_parser:get_error_msg()

				</summary>
			</function>
			<function line="141" name="set_error_msg">
				<summary>function npl_page_parser:set_error_msg(msg)
this will make the page output this error on all following requests
				</summary>
				<parameter name="msg"/>
			</function>
			<function line="150" name="send_page_error">
				<summary>function npl_page_parser:send_page_error(msg, code_env)

				</summary>
				<parameter name="msg"/>
				<parameter name="code_env"/>
			</function>
			<function line="157" name="enter_env">
				<summary>function npl_page_parser:enter_env(code_env)
return the call depth
				</summary>
				<parameter name="code_env"/>
			</function>
			<function line="170" name="leave_env">
				<summary>function npl_page_parser:leave_env(code_env)
return the call depth
				</summary>
				<parameter name="code_env"/>
			</function>
			<function line="183" name="run">
				<summary>function npl_page_parser:run(code_env)
this function may be nest-called such as inside the code_env.include() function.
   @param code_env: the code enviroment. echo and print method should be overridden to send.
   @return the result of the function call. 
				</summary>
				<parameter name="code_env">the code enviroment. echo and print method should be overridden to send.
				</parameter>
				<returns>return result of the function call. 
				</returns>
			</function>
		</table>
		<table name="request" src="script/apps/WebServer/npl_request.lua">
			<function line="44" name="ctor">
				<summary>function request:ctor()

				</summary>
			</function>
			<function line="49" name="GetResponse">
				<summary>function request:GetResponse()
get the response object. 
				</summary>
			</function>
			<function line="54" name="GetNid">
				<summary>function request:GetNid()
get the nid where the request is from. 
				</summary>
			</function>
			<function line="58" name="errorEvent">
				<summary>function request:errorEvent(msg)

				</summary>
				<parameter name="msg"/>
			</function>
			<function line="70" name="tostring">
				<summary>function request:tostring()

				</summary>
			</function>
			<function line="74" name="redirect">
				<summary>function request:redirect(d)

				</summary>
				<parameter name="d"/>
			</function>
			<function line="81" name="url">
				<summary>function request:url()
original request url
				</summary>
			</function>
			<function line="85" name="parse_url">
				<summary>function request:parse_url()

				</summary>
			</function>
			<function line="97" name="GetMsg">
				<summary>function request:GetMsg()
headers actually is the raw message containing everything.
just incase one wants to clone the request and forward it to some other threads or network process. 
				</summary>
			</function>
			<function line="102" name="getparams">
				<summary>function request:getparams()
get url parameters: both url post/get are supported
				</summary>
			</function>
			<function line="119" name="IsJsonBody">
				<summary>function request:IsJsonBody()

				</summary>
			</function>
			<function line="128" name="GetHost">
				<summary>function request:GetHost()
get host name from header. usually checking for the http origin for cross-domain request or not. 
				</summary>
			</function>
			<function line="133" name="GetMethod">
				<summary>function request:GetMethod()
in headers  'GET', 'HEAD', 'POST', 'PUT', 'OPTIONS' etc
				</summary>
			</function>
			<function line="139" name="header">
				<summary>function request:header(name)
get the value of given header
   @param name: "method", "Host", or any of other custom header fields
				</summary>
				<parameter name="name">"method", "Host", or any of other custom header fields
				</parameter>
			</function>
			<function line="146" name="get">
				<summary>function request:get(name)
get a given url get/post param by name
   @param name: if name is nil or 'json', we will return table object passed in from headers.body (json http post)
if you post data as json, you can also access json encoded html body directly with key name. 
				</summary>
				<parameter name="name">if name is nil or 'json', we will return table object passed in from headers.body (json http post)
if you post data as json, you can also access json encoded html body directly with key name. 
				</parameter>
			</function>
			<function line="158" name="getpeername">
				<summary>function request:getpeername()
get ip address as string
				</summary>
			</function>
			<function line="164" name="discard">
				<summary>function request:discard()
drop this request, so that nothing is sent to client at the moment. 
we use this function to delegate a request from one thread to another in npl script handler
				</summary>
			</function>
			<function line="169" name="send">
				<summary>function request:send(address)
send/route the request to another processor: possibly another npl file in another thread or another machine. 
				</summary>
				<parameter name="address"/>
			</function>
			<function line="178" name="get_cookie">
				<summary>function request:get_cookie(name)
get cookies or a given cookie entry value by name
   @param name: if nil, entire cookies table is returned. if string, only cookies value of the given name is returned. 
				</summary>
				<parameter name="name">if nil, entire cookies table is returned. if string, only cookies value of the given name is returned. 
				</parameter>
			</function>
			<function line="200" name="clear_cookie">
				<summary>function request:clear_cookie()
clear all cookies in case of rpc request, etc. 
				</summary>
			</function>
			<function line="220" name="NormalizeHeaders">
				<summary>function request:NormalizeHeaders(headers)
from case insensitive to case sensitive. 
				</summary>
				<parameter name="headers"/>
			</function>
			<function line="240" name="init">
				<summary>function request:init(msg)
request can be reused by calling this function. 
the request object is returned if succeed.
				</summary>
				<parameter name="msg"/>
			</function>
		</table>
		<table name="response" src="script/apps/WebServer/npl_response.lua">
			<function line="57" name="ctor">
				<summary>function response:ctor()

				</summary>
			</function>
			<function line="62" name="init">
				<summary>function response:init(req)
response can be reused by calling this function. 
				</summary>
				<parameter name="req"/>
			</function>
			<function line="72" name="send_xml">
				<summary>function response:send_xml(xml, return_code, headers)
make a xml rpc response
   @param xml: xml/html root node or text.
   @param return_code: nil if default to "ok"(200)
				</summary>
				<parameter name="xml">xml/html root node or text.
				</parameter>
				<parameter name="return_code">nil if default to "ok"(200)
				</parameter>
				<parameter name="headers"/>
			</function>
			<function line="87" name="send_json">
				<summary>function response:send_json(json, return_code, headers)
make a json response
   @param return_code: nil if default to "ok"(200)
				</summary>
				<parameter name="json"/>
				<parameter name="return_code">nil if default to "ok"(200)
				</parameter>
				<parameter name="headers"/>
			</function>
			<function line="98" name="SetReturnCode">
				<summary>function response:SetReturnCode(return_code)

				</summary>
				<parameter name="return_code"/>
			</function>
			<function line="107" name="nocache_headers">
				<summary>function response:nocache_headers()
Set the headers to prevent caching for the different browsers.
Different browsers support different nocache headers, so several
headers must be sent so that all of them get the point that no
caching should occur.
				</summary>
			</function>
			<function line="115" name="set_header">
				<summary>function response:set_header(h, v)
it will replace value
				</summary>
				<parameter name="h"/>
				<parameter name="v"/>
			</function>
			<function line="123" name="add_header">
				<summary>function response:add_header(h, v)
there can be duplicated names 
				</summary>
				<parameter name="h"/>
				<parameter name="v"/>
			</function>
			<function line="144" name="SetContent">
				<summary>function response:SetContent(text)
if one calls SetContent instead of send(), any previously buffered send text will be ignored. 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="153" name="send">
				<summary>function response:send(text, bUseEmptyArray)
send response and finish the request now.
   @param bUseEmptyArray: by default, empty table is serialized to json as object {}. 
calling this function will be serialized to json as array[]
   @param pure HTML text or json table
				</summary>
				<parameter name="text"/>
				<parameter name="bUseEmptyArray">by default, empty table is serialized to json as object {}. 
calling this function will be serialized to json as array[]
				</parameter>
			</function>
			<function line="164" name="status">
				<summary>function response:status(code)
set return code and return response object.
				</summary>
				<parameter name="code"/>
			</function>
			<function line="176" name="sendsome">
				<summary>function response:sendsome(text)
cache string and send it until finish() is called.
it is optimized to call send() many times during a single request.
   @param text: string or a table of text lines. 
				</summary>
				<parameter name="text">string or a table of text lines. 
				</parameter>
			</function>
			<function line="211" name="isContentTypePlainText">
				<summary>function response:isContentTypePlainText(contentType)

				</summary>
				<parameter name="contentType"/>
			</function>
			<function line="220" name="send_response">
				<summary>function response:send_response()
sends prebuilt content to the client
if possible, sets Content-Length: header field
uses:
self.content : content data to send
sets:
self.keep_alive : if possible to keep using the same connection
				</summary>
			</function>
			<function line="310" name="send_headers">
				<summary>function response:send_headers()
sends the response headers directly to client 
uses:
self.sent_headers : if true, headers are already sent, does nothing
self.statusline : response status, if nil, sends 200 OK
self.headers : table of header fields to send
				</summary>
			</function>
			<function line="338" name="send_data">
				<summary>function response:send_data(data)
sends content directly to client. sends headers first, if not
   @param data : content data to send
				</summary>
				<parameter name="data">content data to send
				</parameter>
			</function>
			<function line="383" name="set_cookie">
				<summary>function response:set_cookie(name, value)

				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="394" name="redirect">
				<summary>function response:redirect(path)

				</summary>
				<parameter name="path"/>
			</function>
			<function line="398" name="delete_cookie">
				<summary>function response:delete_cookie(name, path)

				</summary>
				<parameter name="name"/>
				<parameter name="path"/>
			</function>
			<function line="404" name="discard">
				<summary>function response:discard()
drop this request, so that nothing is sent to client at the moment. 
we use this function to delegate a request from one thread to another in npl script handler
				</summary>
			</function>
			<function line="411" name="finish">
				<summary>function response:finish()
call this function to actually send cached response to client.
this function is automatically called when page handler is finished. 
Please note, calling finish() between Begin() and End() has no effect. 
				</summary>
			</function>
			<function line="421" name="Begin">
				<summary>function response:Begin()
we will enter asynchronous mode, and the response is sent when self:End() is called. 
Please note, it is up to you, to call End() function. Forgetting doing so, the client will no longer receive any response from current connection. 
For example, in the page handler, we may wait for another async http call, before calling End().
				</summary>
			</function>
			<function line="427" name="End">
				<summary>function response:End(bIgnoreFinish)
finish and send the asynchronous response.
   @param bIgnoreFinish: if true, we will not call finish to send the actual response. default to nil.
				</summary>
				<parameter name="bIgnoreFinish">if true, we will not call finish to send the actual response. default to nil.
				</parameter>
			</function>
			<function line="436" name="GetAddress">
				<summary>function response:GetAddress()

				</summary>
			</function>
			<function line="444" name="CloseAfterSend">
				<summary>function response:CloseAfterSend()

				</summary>
			</function>
			<function line="449" name="sendInternal">
				<summary>function response:sendInternal(text)
private: 
				</summary>
				<parameter name="text"/>
			</function>
		</table>
		<table name="util" src="script/apps/WebServer/npl_util.lua">
			<function line="16" name="url_decode">
				<summary>function util.url_decode(str)
Decode an URL-encoded string (see RFC 2396)
				</summary>
				<parameter name="str"/>
			</function>
			<function line="25" name="url_encode">
				<summary>function util.url_encode(str)
URL-encode a string (see RFC 2396)
				</summary>
				<parameter name="str"/>
			</function>
			<function line="35" name="sanitize">
				<summary>function util.sanitize(text)
Sanitizes all HTML tags
				</summary>
				<parameter name="text"/>
			</function>
			<function line="40" name="not_empty">
				<summary>function util.not_empty(s)
Checks whether s is not nil or the empty string
				</summary>
				<parameter name="s"/>
			</function>
			<function line="49" name="parse_args">
				<summary>function util.parse_args( args, defaults)
Merge user defined arguments into defaults array.
   @param args : string or array.  Value to merge with $defaults
   @param defaults: Optional. Array that serves as the defaults. Default empty.
   @return array Merged user defined values with defaults.
				</summary>
				<parameter name="args">string or array.  Value to merge with $defaults
				</parameter>
				<parameter name="defaults">Optional. Array that serves as the defaults. Default empty.
				</parameter>
				<returns>return Merged user defined values with defaults.
				</returns>
			</function>
			<function line="65" name="escape">
				<summary>function util.escape(s)
Encodes a string into its escaped hexadecimal representation
   @param s:  binary string to be encoded
   @return escaped representation of string binary
				</summary>
				<parameter name="s">binary string to be encoded
				</parameter>
				<returns>return representation of string binary
				</returns>
			</function>
			<function line="74" name="unescape">
				<summary>function util.unescape(s)
Encodes a string into its escaped hexadecimal representation
   @param s: binary string to be encoded
   @return escaped representation of string binary
				</summary>
				<parameter name="s">binary string to be encoded
				</parameter>
				<returns>return representation of string binary
				</returns>
			</function>
			<function line="83" name="parse_str">
				<summary>function util.parse_str(str, params)
Parses a string into variables to be stored in an array.
   @param str: url query string such as "a=1&amp;b&amp;c=3"
   @return the url params table returned. 
				</summary>
				<parameter name="str">url query string such as "a=1&amp;b&amp;c=3"
				</parameter>
				<parameter name="params"/>
				<returns>return url params table returned. 
				</returns>
			</function>
			<function line="110" name="GetUrl">
				<summary>function util.GetUrl(...)
please see System.os.GetUrl
				</summary>
			</function>
		</table>
		<table name="Rules" src="script/apps/WebServer/rules.lua">
			<function line="15" name="ctor">
				<summary>function Rules:ctor()

				</summary>
			</function>
			<function line="40" name="init">
				<summary>function Rules:init(rules)

&lt;verbatim&gt;
   @paran rules: table like:
{

    { -- URI remapping example
      match = "^[^%./]*/$",
      with = WebServer.redirecthandler,
      params = {"index.lp"}
    }, 

    { -- cgiluahandler example
      match = {"%.lp$", "%.lp/.*$", "%.lua$", "%.lua/.*$" },
      with = WebServer.cgiluahandler.makeHandler (webDir)
    },
    
    { -- filehandler example
      match = ".",
      with = WebServer.filehandler,
      params = {baseDir = webDir}
    },
}&lt;/verbatim&gt; 
				</summary>
				<parameter name="rules"/>
			</function>
		</table>
	</tables>
	<globals/>
	<variables>
		<variable name="BlockEngine" type="BlockEngine"/>
		<variable name="GameLogic" type="GameLogic"/>
		<variable name="CmdParser" type="CmdParser"/>
		<variable name="CommandManager" type="CommandManager"/>
		<variable name="EntityManager" type="EntityManager"/>
		<variable name="Entity" type="Entity"/>
		<variable name="ItemClient" type="ItemClient"/>
		<variable name="Item" type="Item"/>
		<variable name="ItemStack" type="ItemStack"/>
		<variable name="block_types" type="block_types"/>
		<variable name="block_model" type="block_model"/>
		<variable name="block" type="block"/>
		<variable name="Files" type="Files"/>
		<variable name="World" type="World"/>
		<variable name="SelectionManager" type="SelectionManager"/>
		<variable name="BaseContext" type="BaseContext"/>
		<variable name="ChatMessage" type="ChatMessage"/>
		<variable name="ChunkObserver" type="ChunkObserver"/>
		<variable name="ChunkObserverClient" type="ChunkObserverClient"/>
		<variable name="ConnectionBase" type="ConnectionBase"/>
		<variable name="Connections" type="Connections"/>
		<variable name="ConnectionTCP" type="ConnectionTCP"/>
		<variable name="EntityTracker" type="EntityTracker"/>
		<variable name="EntityTrackerEntry" type="EntityTrackerEntry"/>
		<variable name="NetClientHandler" type="NetClientHandler"/>
		<variable name="NetHandler" type="NetHandler"/>
		<variable name="NetLoginHandler" type="NetLoginHandler"/>
		<variable name="NetServerHandler" type="NetServerHandler"/>
		<variable name="NetworkMain" type="NetworkMain"/>
		<variable name="PlayerManager" type="PlayerManager"/>
		<variable name="PlayerManagerClient" type="PlayerManagerClient"/>
		<variable name="ServerListener" type="ServerListener"/>
		<variable name="ServerManager" type="ServerManager"/>
		<variable name="ServerManagerDedicated" type="ServerManagerDedicated"/>
		<variable name="WorldClient" type="WorldClient"/>
		<variable name="WorldServer" type="WorldServer"/>
		<variable name="AuthUserList" type="AuthUserList"/>
		<variable name="BanList" type="BanList"/>
		<variable name="PasswordList" type="PasswordList"/>
		<variable name="ServerConfig" type="ServerConfig"/>
		<variable name="Packet" type="Packet"/>
		<variable name="PacketAnimation" type="PacketAnimation"/>
		<variable name="PacketAttachEntity" type="PacketAttachEntity"/>
		<variable name="PacketAuthUser" type="PacketAuthUser"/>
		<variable name="PacketBlockChange" type="PacketBlockChange"/>
		<variable name="PacketBlockDestroy" type="PacketBlockDestroy"/>
		<variable name="PacketBlockMultiChange" type="PacketBlockMultiChange"/>
		<variable name="PacketBlockPieces" type="PacketBlockPieces"/>
		<variable name="PacketChat" type="PacketChat"/>
		<variable name="PacketClickBlock" type="PacketClickBlock"/>
		<variable name="PacketClickEntity" type="PacketClickEntity"/>
		<variable name="PacketClientCommand" type="PacketClientCommand"/>
		<variable name="PacketCustomPayload" type="PacketCustomPayload"/>
		<variable name="PacketDestroyEntity" type="PacketDestroyEntity"/>
		<variable name="PacketEntityAction" type="PacketEntityAction"/>
		<variable name="PacketEntityEffect" type="PacketEntityEffect"/>
		<variable name="PacketEntityHeadRotation" type="PacketEntityHeadRotation"/>
		<variable name="PacketEntityMetadata" type="PacketEntityMetadata"/>
		<variable name="PacketEntityMobSpawn" type="PacketEntityMobSpawn"/>
		<variable name="PacketEntityMovableSpawn" type="PacketEntityMovableSpawn"/>
		<variable name="PacketEntityPlayerSpawn" type="PacketEntityPlayerSpawn"/>
		<variable name="PacketEntityTeleport" type="PacketEntityTeleport"/>
		<variable name="PacketEntityVelocity" type="PacketEntityVelocity"/>
		<variable name="PacketKickDisconnect" type="PacketKickDisconnect"/>
		<variable name="PacketLevelSound" type="PacketLevelSound"/>
		<variable name="PacketLogin" type="PacketLogin"/>
		<variable name="PacketLoginClient" type="PacketLoginClient"/>
		<variable name="PacketMapChunk" type="PacketMapChunk"/>
		<variable name="PacketMapChunkData" type="PacketMapChunkData"/>
		<variable name="PacketMapChunks" type="PacketMapChunks"/>
		<variable name="PacketMove" type="PacketMove"/>
		<variable name="PacketPing" type="PacketPing"/>
		<variable name="PacketPlayerInfo" type="PacketPlayerInfo"/>
		<variable name="PacketPlayerInventory" type="PacketPlayerInventory"/>
		<variable name="PacketPlayerLook" type="PacketPlayerLook"/>
		<variable name="PacketPlayerLookMove" type="PacketPlayerLookMove"/>
		<variable name="PacketPlayerPosition" type="PacketPlayerPosition"/>
		<variable name="PacketRelEntity" type="PacketRelEntity"/>
		<variable name="PacketRelEntityLook" type="PacketRelEntityLook"/>
		<variable name="PacketRelEntityMove" type="PacketRelEntityMove"/>
		<variable name="PacketRelEntityMoveLook" type="PacketRelEntityMoveLook"/>
		<variable name="PacketSleep" type="PacketSleep"/>
		<variable name="PacketSpawnPosition" type="PacketSpawnPosition"/>
		<variable name="PacketUpdateAttributes" type="PacketUpdateAttributes"/>
		<variable name="PacketUpdateEntitySign" type="PacketUpdateEntitySign"/>
		<variable name="PacketUpdateTime" type="PacketUpdateTime"/>
		<variable name="Packet_Types" type="Packet_Types"/>
		<variable name="RoomInfo" type="RoomInfo"/>
		<variable name="TunnelClient" type="TunnelClient"/>
		<variable name="TunnelServer" type="TunnelServer"/>
		<variable name="TunnelServerMain" type="TunnelServerMain"/>
		<variable name="mathlib" type="mathlib"/>
		<variable name="algorithm" type="algorithm"/>
		<variable name="commonlib" type="commonlib"/>
		<variable name="table" type="table"/>
		<variable name="utf8" type="utf8"/>
		<variable name="Encoding" type="Encoding"/>
		<variable name="Private" type="Private"/>
		<variable name="Timer" type="Timer"/>
		<variable name="TimerManager" type="TimerManager"/>
		<variable name="NPL" type="NPL"/>
		<variable name="ParaScene" type="ParaScene"/>
		<variable name="ParaCamera" type="ParaCamera"/>
		<variable name="ParaEngine" type="ParaEngine"/>
		<variable name="ParaAsset" type="ParaAsset"/>
		<variable name="Event" type="Event"/>
		<variable name="EventTickFunc" type="EventTickFunc"/>
		<variable name="TimerEvent" type="TimerEvent"/>
		<variable name="ToolBase" type="ToolBase"/>
		<variable name="SignalConnections" type="SignalConnections"/>
		<variable name="ConnectionSynapse" type="ConnectionSynapse"/>
		<variable name="painter" type="painter"/>
		<variable name="Attribute" type="Attribute"/>
		<variable name="AttributeObject" type="AttributeObject"/>
		<variable name="Screen" type="Screen"/>
		<variable name="Window" type="Window"/>
		<variable name="UIElement" type="UIElement"/>
		<variable name="Keyboard" type="Keyboard"/>
		<variable name="Mouse" type="Mouse"/>
		<variable name="BufferPicking" type="BufferPicking"/>
		<variable name="OverlayPicking" type="OverlayPicking"/>
		<variable name="ShapesDrawer" type="ShapesDrawer"/>
		<variable name="AutoCamera" type="AutoCamera"/>
		<variable name="Cameras" type="Cameras"/>
		<variable name="mem_cache" type="mem_cache"/>
		<variable name="minetypes" type="minetypes"/>
		<variable name="common_handlers" type="common_handlers"/>
		<variable name="WebServer" type="WebServer"/>
		<variable name="npl_http" type="npl_http"/>
		<variable name="npl_page_env" type="npl_page_env"/>
		<variable name="env_imp" type="env_imp"/>
		<variable name="npl_page_manager" type="npl_page_manager"/>
		<variable name="npl_page_parser" type="npl_page_parser"/>
		<variable name="request" type="request"/>
		<variable name="response" type="response"/>
		<variable name="util" type="util"/>
		<variable name="Rules" type="Rules"/>
	</variables>
</doc>